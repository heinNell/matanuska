src/modules/WialonModule.tsx:/**
src/modules/WialonModule.tsx:// Re-export all Wialon components and hooks
src/firebaseConfig.ts:// Development configuration - only used in development mode
src/firebaseConfig.ts:  databaseURL: "https://mat1-9e6b3-default-rtdb.firebaseio.com",
src/firebaseConfig.ts:// Get Firebase configuration based on environment
src/firebaseConfig.ts:  // In development, we can use the dev config or env vars if present
src/firebaseConfig.ts:  // In production, strictly require environment variables with no fallbacks
src/firebaseConfig.ts:// Get the appropriate config based on environment
src/firebaseConfig.ts:// Validate the configuration
src/firebaseConfig.ts:      return true; // Continue in development even with missing fields
src/firebaseConfig.ts:      // In production, throw an error for missing configuration
src/firebaseConfig.ts:      // We'll log the error but not throw to prevent app crash
src/firebaseConfig.ts:// Initialize Firebase with the appropriate configuration - only if not already initialized
src/utils/csvUtils.ts:/**
src/utils/csvUtils.ts:/**
src/utils/csvUtils.ts:/**
src/utils/csvUtils.ts:/**
src/utils/helpers.ts:// -------------------- Utility Functions --------------------
src/utils/helpers.ts:// -------------------- ID Generation --------------------
src/utils/helpers.ts:// -------------------- Date Formatting --------------------
src/utils/helpers.ts:// -------------------- Currency Formatting --------------------
src/utils/helpers.ts:// -------------------- Core Trip Calculations --------------------
src/utils/helpers.ts:// -------------------- Flag & Compliance Logic --------------------
src/utils/helpers.ts:// -------------------- Filtering Functions --------------------
src/utils/helpers.ts:// -------------------- Utility Functions --------------------
src/utils/helpers.ts:// Check if the user is online
src/utils/helpers.ts:// Helper to retry failed operations with exponential backoff
src/utils/helpers.ts:        delay *= 2; // Exponential backoff
src/utils/helpers.ts:// -------------------- Report Generation --------------------
src/utils/helpers.ts:// Generate report for a single trip (used by TripReport component)
src/utils/helpers.ts:    // Calculate cost breakdown by category
src/utils/helpers.ts:    // Find missing receipts
src/utils/helpers.ts:// Placeholder for multiple trips report generation
src/utils/helpers.ts:    // TODO: Implement real export
src/utils/helpers.ts:    // Calculate basic metrics
src/utils/helpers.ts:    // Calculate revenue and expenses for trips in this currency only
src/utils/helpers.ts:    // Calculate per-trip averages for the specified currency only
src/utils/helpers.ts:    // Client type breakdown
src/utils/helpers.ts:    // Investigation metrics
src/utils/helpers.ts:    // Calculate average resolution time
src/utils/helpers.ts:    // Filter to only use trips in the specified currency
src/utils/helpers.ts:          const resolutionTime = (resolvedDate.getTime() - flaggedDate.getTime()) / (1000 * 60 * 60 * 24); // in days
src/utils/helpers.ts:    // Driver statistics
src/utils/helpers.ts:    // Filter to only use trips in the specified currency
src/utils/helpers.ts:    // Create workbook
src/utils/helpers.ts:    // Summary sheet
src/utils/helpers.ts:    // Driver stats sheet
src/utils/helpers.ts:    // Trips detail sheet
src/utils/helpers.ts:    // Write file
src/utils/helpers.ts:// -------------------- Flagged Costs Extraction --------------------
src/utils/helpers.ts:// -------------------- Trip Sorting by Date --------------------
src/utils/helpers.ts:  // Group trips by loading date (start date)
src/utils/helpers.ts:  // Sort dates in descending order (newest first)
src/utils/helpers.ts:  // Create a new object with sorted dates
src/utils/helpers.ts:// Format date for display in headers
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:// Error types for categorization
src/utils/errorHandling.ts:// Error severity levels
src/utils/errorHandling.ts:  FATAL = "fatal", // Application cannot continue, requires immediate attention
src/utils/errorHandling.ts:  ERROR = "error", // Serious issue that impacts functionality but doesn't crash the app
src/utils/errorHandling.ts:  WARNING = "warning", // Issue that may lead to problems but doesn't affect current operation
src/utils/errorHandling.ts:  INFO = "info", // Informational message about an error that was handled gracefully
src/utils/errorHandling.ts:// Structured error object
src/utils/errorHandling.ts:// For storing global error handlers
src/utils/errorHandling.ts:// For tracking logged errors to prevent duplication
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:  // Determine error category based on error message or type
src/utils/errorHandling.ts:  // Default to medium severity if not specified
src/utils/errorHandling.ts:  // Default message is from the original error
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:  // Create a unique ID for deduplication
src/utils/errorHandling.ts:  // Skip logging if we've seen this exact error recently
src/utils/errorHandling.ts:  // Add to the set of logged errors
src/utils/errorHandling.ts:  // After 1 minute, remove from the set to allow re-logging
src/utils/errorHandling.ts:  // Log to console with appropriate severity
src/utils/errorHandling.ts:  // Run any registered global error handlers
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:      // Create a structured error
src/utils/errorHandling.ts:      // Check if we should retry
src/utils/errorHandling.ts:        // Use exponential backoff for retry delay
src/utils/errorHandling.ts:        // Wait before retrying
src/utils/errorHandling.ts:      // If we're not retrying, log and handle the error
src/utils/errorHandling.ts:            ? ErrorSeverity.WARNING // Less severe when network is actually offline
src/utils/errorHandling.ts:      // Call the error handler if provided
src/utils/errorHandling.ts:      // Re-throw the original error
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:  // Return a function to unregister the handler
src/utils/errorHandling.ts:/**
src/utils/errorHandling.ts:/**
src/utils/tyreConstants.ts:// Tyre Size & Pattern Reference Data
src/utils/tyreConstants.ts:// Fleet-specific tyre position references
src/utils/tyreConstants.ts:  // HORSES (Truck Tractors, 11 positions each)
src/utils/tyreConstants.ts:  // INTERLINKS (18 positions each: 16 tyres + 2 spares)
src/utils/tyreConstants.ts:  // REEFERS (8 positions each: 6 tyres + 2 spares)
src/utils/tyreConstants.ts:  // LMVs ONLY (7 positions: 6 tyres + 1 spare)
src/utils/tyreConstants.ts:  // 11-POSITION VEHICLE
src/utils/tyreConstants.ts:// Tyre store/location enum
src/utils/tyreConstants.ts:// Helper functions for fleet positions
src/utils/tyreConstants.ts:  // 315/80R22.5 (Drive)
src/utils/tyreConstants.ts:  // 315/80R22.5 (Dual / Multi)
src/utils/tyreConstants.ts:  // 315/80R22.5 (Steer)
src/utils/tyreConstants.ts:  // 315/80R22.5 (Trailer)
src/utils/tyreConstants.ts:  // 385/65R22.5 (Steer)
src/utils/tyreConstants.ts:// Helper functions to get unique values for dropdown options
src/utils/tyreConstants.ts:// Vendor reference data
src/utils/tyreConstants.ts:// Helper functions for vendor data
src/utils/tyreConstants.ts:// Add function to filter inventory by criteria
src/utils/tyreConstants.ts:// Mock inventory data based on the reference lists
src/utils/tyreConstants.ts:  // Extended properties to simplify access in components
src/utils/tyreConstants.ts:  // Direct properties for nested data
src/utils/tyreConstants.ts:// Generate some mock inventory data
src/utils/tyreConstants.ts:  // Create a few inventory items for each position type
src/utils/tyreConstants.ts:      // Ensure we always have a valid vendor
src/utils/tyreConstants.ts:// Exported tyreSizes and tyreBrands for use in TyreDashboard
src/utils/wialonAuth.ts:// src/utils/wialonAuth.ts
src/utils/wialonAuth.ts:    script.src = "https://hst-api.wialon.com/wsdk/script/wialon.js";
src/utils/wialonAuth.ts:    session.initSession("https://hst-api.wialon.com");
src/utils/wialonAuth.ts:    session.logout(); // Fixed: no arguments
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:      // Handle circular references
src/utils/error-utils.ts:      // Handle Error objects
src/utils/error-utils.ts:      // Handle DOMException
src/utils/error-utils.ts:      // Handle functions (convert to string representation)
src/utils/error-utils.ts:      // Handle undefined
src/utils/error-utils.ts:      // Handle symbols
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:  // Firebase errors
src/utils/error-utils.ts:  // Axios errors
src/utils/error-utils.ts:  // Google Maps API errors
src/utils/error-utils.ts:  // DOM exceptions
src/utils/error-utils.ts:  // Network errors
src/utils/error-utils.ts:  // Standard Error instances
src/utils/error-utils.ts:  // Promise rejection with object
src/utils/error-utils.ts:  // Plain objects with error-like properties
src/utils/error-utils.ts:  // String errors
src/utils/error-utils.ts:  // Number errors (rare but possible)
src/utils/error-utils.ts:  // Everything else (null, undefined, boolean, etc.)
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:  // Simple hash function
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:    // FIX: Universal "cause" assignment for compatibility
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:      // FIX: Universal "cause" assignment for compatibility
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:  // Clear existing timeout for this error
src/utils/error-utils.ts:  // Set new timeout
src/utils/error-utils.ts:/**
src/utils/error-utils.ts:  /**
src/utils/error-utils.ts:  /**
src/utils/error-utils.ts:  /**
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:  firebase: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Listen/channel',
src/utils/networkDetection.ts:  firebaseJS: 'https://www.gstatic.com/firebasejs/9.17.1/firebase-app.js',
src/utils/networkDetection.ts:  google: 'https://www.google.com/favicon.ico'
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:  // Update status to checking during the check
src/utils/networkDetection.ts:  // Quick check for basic connectivity
src/utils/networkDetection.ts:    // Test Firebase reachability
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:  // Perform initial check
src/utils/networkDetection.ts:  // Set up event listeners
src/utils/networkDetection.ts:  // Set up periodic checking
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:  // Call immediately with current state
src/utils/networkDetection.ts:  // Return unsubscribe function
src/utils/networkDetection.ts:/**
src/utils/networkDetection.ts:// Start monitoring by default when this module is imported
src/utils/auditLogUtils.ts:import { firestore } from '../utils/firebaseConnectionHandler'; // Using the firestore instance from your connection handler
src/utils/auditLogUtils.ts:/**
src/utils/cn.ts:/**
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:  // Return existing promise if already loading or loaded
src/utils/wialonLoader.ts:  // If already loaded, return resolved promise
src/utils/wialonLoader.ts:  // Set loading flag
src/utils/wialonLoader.ts:      // Check if script already exists
src/utils/wialonLoader.ts:      // Get configuration
src/utils/wialonLoader.ts:        "https://hst-api.wialon.com";
src/utils/wialonLoader.ts:      // Create script element with optimal loading
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts: * @param baseUrl - Base URL for Wialon API (default: https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en)
src/utils/wialonLoader.ts:  baseUrl: string = "https://hst-api.wialon.com"
src/utils/wialonLoader.ts:  // Ensure Wialon SDK is loaded
src/utils/wialonLoader.ts:          // Get detailed error information
src/utils/wialonLoader.ts:          // Check for specific error codes
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:/**
src/utils/wialonLoader.ts:// Rely on global typings in src/types/wialon-sdk.d.ts
src/utils/mapConfig.ts:/**
src/utils/mapConfig.ts:// Default map center - Pretoria, South Africa
src/utils/mapConfig.ts:// Map style presets
src/utils/mapConfig.ts:  // Clean style that hides points of interest
src/utils/mapConfig.ts:  // Night mode style
src/utils/mapConfig.ts:  // Satellite with roads style - similar to "hybrid" mapTypeId but can be used with other map types
src/utils/mapConfig.ts:  // Transport/logistics focused style
src/utils/mapConfig.ts:// Default map options
src/utils/mapConfig.ts:// Icon types supported by the application
src/utils/mapConfig.ts:// Helper to create marker icons with different colors or predefined types
src/utils/mapConfig.ts:  // If it's a predefined icon type
src/utils/mapConfig.ts:      // If it's a color string like '#FF0000', use it as color
src/utils/mapConfig.ts:// Truck icon for logistics applications
src/utils/mapConfig.ts:// Calculate the bounds to fit an array of locations
src/utils/mapConfig.ts:  // Use Google Maps API to calculate bounds
src/utils/mapConfig.ts:  // Fallback manual calculation if Google Maps isn't loaded
src/utils/mapConfig.ts:// Calculate the center point of multiple locations
src/utils/mapConfig.ts:// Calculate the appropriate zoom level based on the bounds
src/utils/mapConfig.ts:// Interface for window global
src/utils/mapConfig.ts:// Import Google Maps utilities from the centralized loader
src/utils/mapConfig.ts:// Re-export for backward compatibility
src/utils/syncService.ts:// Collection references
src/utils/syncService.ts:// const tripsCollection = collection(db, 'trips'); // Unused
src/utils/syncService.ts:// Type for sync status
src/utils/syncService.ts:// Interface for sync listeners
src/utils/syncService.ts:// Sync service class
src/utils/syncService.ts:    // Listen for online/offline events
src/utils/syncService.ts:    // Initialize online status
src/utils/syncService.ts:    // Setup a periodic connection check
src/utils/syncService.ts:    setInterval(() => this.checkConnection(), 60000); // Check every minute
src/utils/syncService.ts:  // Register data callbacks for all collections
src/utils/syncService.ts:  // Register listeners
src/utils/syncService.ts:  // Check connection and attempt reconnection if needed
src/utils/syncService.ts:      // We were offline but now we appear to be online
src/utils/syncService.ts:      // We were online but now appear to be offline
src/utils/syncService.ts:  // Handle online event
src/utils/syncService.ts:      // Enable Firestore network
src/utils/syncService.ts:      // Process any pending changes
src/utils/syncService.ts:  // Handle offline event
src/utils/syncService.ts:    // Disable Firestore network to avoid unnecessary retries
src/utils/syncService.ts:  // Set sync status and notify listeners
src/utils/syncService.ts:  // Set connection status and notify listeners
src/utils/syncService.ts:  // Process pending changes when back online
src/utils/syncService.ts:        // Add server timestamp
src/utils/syncService.ts:        // Remove from pending changes
src/utils/syncService.ts:  // Subscribe to a trip's real-time updates
src/utils/syncService.ts:    // DEBUG ONLY - Validate context
src/utils/syncService.ts:    // Guard against undefined 'this'
src/utils/syncService.ts:      return; // Abort to prevent crash
src/utils/syncService.ts:    // Unsubscribe if already subscribed
src/utils/syncService.ts:          // Convert Firestore timestamps to ISO strings using our helper function
src/utils/syncService.ts:  // Unsubscribe from trips collection subscription
src/utils/syncService.ts:    // Unsubscribe from global trips listener if it exists
src/utils/syncService.ts:  // Unsubscribe from tyres collection subscription
src/utils/syncService.ts:    // Unsubscribe from global tyres listener if it exists
src/utils/syncService.ts:  // Subscribe to all trips (global listener)
src/utils/syncService.ts:    // Clear any existing global trip listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:            // Removed trips will be filtered out when we rebuild the trips array
src/utils/syncService.ts:        // If we have added/modified/removed items, do a full rebuild of the trips array
src/utils/syncService.ts:          // For a complete refresh, get all current documents
src/utils/syncService.ts:        // Don't change connection status here to avoid false disconnections
src/utils/syncService.ts:  // Subscribe to diesel records for a specific fleet
src/utils/syncService.ts:    // Unsubscribe if already subscribed
src/utils/syncService.ts:          // Convert Firestore timestamps to ISO strings
src/utils/syncService.ts:  // Subscribe to driver behavior events for a specific driver
src/utils/syncService.ts:    // Unsubscribe if already subscribed
src/utils/syncService.ts:          // Convert Firestore timestamps to ISO strings
src/utils/syncService.ts:  // Subscribe to all driver behavior events (global listener)
src/utils/syncService.ts:    // Clear any existing global driver behavior listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Subscribe to all diesel records (global listener)
src/utils/syncService.ts:    // Clear any existing global diesel listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Subscribe to audit logs
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:              // Get current audit logs and add the new one
src/utils/syncService.ts:  // Update a trip with real-time sync
src/utils/syncService.ts:      // Clean data for Firestore (remove undefined values)
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update a diesel record with real-time sync
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update a driver behavior event with real-time sync
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Link diesel record to trip
src/utils/syncService.ts:      // Get the diesel record
src/utils/syncService.ts:      // Get the trip
src/utils/syncService.ts:      // Update diesel record with trip ID
src/utils/syncService.ts:      // Create a cost entry in the trip
src/utils/syncService.ts:      // Add cost entry to trip
src/utils/syncService.ts:  // Store pending changes in localStorage as backup
src/utils/syncService.ts:  // Subscribe to all missed loads (global listener)
src/utils/syncService.ts:    // Clear any existing global missed loads listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Subscribe to all action items (global listener)
src/utils/syncService.ts:    // Clear any existing global action items listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Subscribe to all clients (global listener)
src/utils/syncService.ts:    // Clear any existing global clients listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Subscribe to all CAR reports (global listener)
src/utils/syncService.ts:    // Clear any existing global CAR reports listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Load pending changes from localStorage
src/utils/syncService.ts:  // Subscribe to all enhanced job cards (global listener)
src/utils/syncService.ts:    // Clear any existing global enhanced job cards listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Unsubscribe from enhanced job cards collection subscription
src/utils/syncService.ts:    // Unsubscribe from global enhanced job cards listener if it exists
src/utils/syncService.ts:  // Add an enhanced job card
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:        // Online - add directly to Firestore
src/utils/syncService.ts:        // Offline - generate temporary ID and store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update an enhanced job card
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Delete an enhanced job card
src/utils/syncService.ts:        // Online - delete directly from Firestore
src/utils/syncService.ts:        // Offline - store delete operation for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Cleanup method to unsubscribe from all listeners
src/utils/syncService.ts:    // Unsubscribe from all individual trip listeners
src/utils/syncService.ts:    // Unsubscribe from all individual diesel listeners
src/utils/syncService.ts:    // Unsubscribe from all individual driver behavior listeners
src/utils/syncService.ts:    // Unsubscribe from all individual audit log listeners
src/utils/syncService.ts:    // Unsubscribe from all individual job card listeners
src/utils/syncService.ts:    // Unsubscribe from all individual enhanced job card listeners
src/utils/syncService.ts:    // Unsubscribe from all individual tyre listeners
src/utils/syncService.ts:    // Unsubscribe from all global listeners
src/utils/syncService.ts:    // Remove event listeners
src/utils/syncService.ts:  // Get connection status
src/utils/syncService.ts:  // Check if the user is authenticated
src/utils/syncService.ts:    // This is a simplified check that could be expanded based on your auth implementation
src/utils/syncService.ts:    // For demo purposes, we'll just check if we're in development mode
src/utils/syncService.ts:      // In development mode, always return true to allow subscriptions
src/utils/syncService.ts:    // In production, we should check for actual authentication
src/utils/syncService.ts:    // This is where you'd add your Firebase Auth check
src/utils/syncService.ts:      // Example (assuming there's a global auth object or function):
src/utils/syncService.ts:      // return firebase.auth().currentUser != null;
src/utils/syncService.ts:      // For now, we'll just return true as a fallback
src/utils/syncService.ts:      // In a real implementation, you'd want to check if the user is signed in:
src/utils/syncService.ts:      // const user = getAuth().currentUser;
src/utils/syncService.ts:      // return !!user;
src/utils/syncService.ts:  // Subscribe to all workshop inventory items (global listener)
src/utils/syncService.ts:    // Clear any existing global workshop inventory listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Add a workshop inventory item
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:        // Online - add directly to Firestore
src/utils/syncService.ts:        // Offline - generate temporary ID and store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update a workshop inventory item with real-time sync
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Delete a workshop inventory item
src/utils/syncService.ts:        // Online - delete directly from Firestore
src/utils/syncService.ts:        // Offline - store delete operation for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Subscribe to all job cards (global listener)
src/utils/syncService.ts:    // Clear any existing global job cards listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Add a job card
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:        // Online - add directly to Firestore
src/utils/syncService.ts:        // Offline - generate temporary ID and store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update a job card
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Delete a job card
src/utils/syncService.ts:        // Online - delete directly from Firestore
src/utils/syncService.ts:        // Offline - store delete operation for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Subscribe to all tyres (global listener)
src/utils/syncService.ts:    // Clear any existing global tyres listeners
src/utils/syncService.ts:    // Check if user is authenticated before subscribing
src/utils/syncService.ts:        // Track changes for debugging
src/utils/syncService.ts:        // Process document changes
src/utils/syncService.ts:          // Get all current documents for a full refresh
src/utils/syncService.ts:  // Add a tyre
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:        // Online - add directly to Firestore
src/utils/syncService.ts:        // Offline - generate temporary ID and store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Update a tyre
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add updatedAt timestamp
src/utils/syncService.ts:        // Online - update directly
src/utils/syncService.ts:        // Offline - store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Delete a tyre
src/utils/syncService.ts:        // Online - delete directly from Firestore
src/utils/syncService.ts:        // Offline - store delete operation for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Add a tyre inspection
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:      // Get the tyre to update its inspection history
src/utils/syncService.ts:      // Create a new inspection ID
src/utils/syncService.ts:      // Add the inspection to the tyre's inspection history
src/utils/syncService.ts:      // Update the tyre with the new inspection history and current tread depth/pressure
src/utils/syncService.ts:  // Add inventory item (alias for addWorkshopInventoryItem for consistency)
src/utils/syncService.ts:  // Update inventory item (alias for updateWorkshopInventoryItem for consistency)
src/utils/syncService.ts:  // Add a reorder request for inventory items
src/utils/syncService.ts:      // Clean data for Firestore
src/utils/syncService.ts:      // Add timestamps
src/utils/syncService.ts:        // Online - add directly to Firestore
src/utils/syncService.ts:        // Offline - generate temporary ID and store for later sync
src/utils/syncService.ts:        // Store in localStorage as backup
src/utils/syncService.ts:  // Get tyres - helper method to provide current tyres via callback
src/utils/syncService.ts:// The cleanObjectForFirestore and convertTimestamps functions have been moved
src/utils/syncService.ts:// to a shared utility file at ./firestoreUtils.ts
src/utils/syncService.ts:// They are now imported at the top of this file.
src/utils/syncService.ts:// Create and export a singleton instance
src/utils/syncService.ts:// Initialize by loading any pending changes
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────────── CONSTANTS ───────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:const SCRIPT_ID = "google-maps-sdk";                // <── single canonical tag
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────────── STATE ──────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:let promise: Promise<void> | null = null;           // shared loader promise
src/utils/loadGoogleMapsScript.ts:let requestedLibraries    = new Set<string>();      // track libs across calls
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────────── HELPERS ────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────── SERVICE CHECK / VALIDATORS ─────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  if (import.meta.env.DEV) {                         // dev → always direct API
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────────── MAIN LOADER ────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 1. Short-circuit if already loaded ─────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 2. Re-use in-flight promise ───────────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 3. One-time setup ─────────────────────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 4. Build (deduped) library list ───────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 5. Construct URL ──────────────────────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:    src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=${dedupedLibs}`;
src/utils/loadGoogleMapsScript.ts:  /* 6. Create (or replace) the script tag ─────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:  /* 7. Build shared promise ───────────────────────────────────────────────────────────────── */
src/utils/loadGoogleMapsScript.ts:      // Slight delay to let auth checks run
src/utils/loadGoogleMapsScript.ts:      // Attempt one fallback rewrite at most
src/utils/loadGoogleMapsScript.ts:/* ───────────────────────────────────────── REACT HOOK ─────────────────────────────────────── */
src/utils/wialonApi.ts:// utils/wialonApi.ts
src/utils/wialonApi.ts:  const resp = await fetch('https://hst-api.wialon.com/wialon/ajax.html', {
src/utils/offlineCache.ts:/**
src/utils/offlineCache.ts:// Initialize the database
src/utils/offlineCache.ts:        // Create object stores if they don't exist
src/utils/offlineCache.ts:// Cache data with collection path and query parameters as the key
src/utils/offlineCache.ts:  ttl: number = 24 * 60 * 60 * 1000 // 24 hours in milliseconds
src/utils/offlineCache.ts:      // Create a cache key from collection path and query parameters
src/utils/offlineCache.ts:      // Store data with expiration time
src/utils/offlineCache.ts:// Get cached data
src/utils/offlineCache.ts:        // Check if the cached data has expired
src/utils/offlineCache.ts:          // Delete expired data
src/utils/offlineCache.ts:// Queue operation for syncing when back online
src/utils/offlineCache.ts:// Process pending operations when back online
src/utils/offlineCache.ts:          // Process all operations
src/utils/offlineCache.ts:                // Remove the operation if successfully processed
src/utils/offlineCache.ts:                // Increment attempt count
src/utils/offlineCache.ts:// Clear expired cache entries
src/utils/offlineCache.ts:// Helper function to create a consistent cache key
src/utils/offlineCache.ts:    // Sort keys to ensure consistent cache keys regardless of parameter order
src/utils/offlineCache.ts:// Initialize cache when this module is imported
src/utils/formatters.ts:/**
src/utils/formatters.ts:/**
src/utils/googleMapsLoader.ts:// Define the Google object in window
src/utils/googleMapsLoader.ts:    gm_authFailure?: () => void; // Google Maps auth failure handler
src/utils/googleMapsLoader.ts:// Loading state management
src/utils/googleMapsLoader.ts:// Environment configuration
src/utils/googleMapsLoader.ts:// This flag correctly checks if you have an API key to use as a fallback.
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:      console.info(`[Maps Loader] https://console.cloud.google.com/google/maps-apis/credentials`);
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:  // Always use direct API in development environment
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:  // If already loaded, return immediately
src/utils/googleMapsLoader.ts:  // Only load once
src/utils/googleMapsLoader.ts:  // Set up auth failure handler
src/utils/googleMapsLoader.ts:  // Validate API key format
src/utils/googleMapsLoader.ts:  // Check network status first
src/utils/googleMapsLoader.ts:  // Check service availability if we haven't yet
src/utils/googleMapsLoader.ts:    // If already loaded, resolve immediately
src/utils/googleMapsLoader.ts:    // Determine which API source to use
src/utils/googleMapsLoader.ts:      // Process libraries to ensure we're not loading duplicates
src/utils/googleMapsLoader.ts:      // Add all requested libraries to our tracking set
src/utils/googleMapsLoader.ts:      // Create a deduplicated library string
src/utils/googleMapsLoader.ts:      const url = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=${deduplicatedLibraries}`;
src/utils/googleMapsLoader.ts:    // Use async and defer for better performance
src/utils/googleMapsLoader.ts:    // Handle successful load
src/utils/googleMapsLoader.ts:      // Check if Google Maps API is actually available
src/utils/googleMapsLoader.ts:      // Even if script loads, we need to check for auth errors that might happen after loading
src/utils/googleMapsLoader.ts:      // We use a small delay to allow the auth check to complete
src/utils/googleMapsLoader.ts:          // Additional safety check for required objects
src/utils/googleMapsLoader.ts:    // Handle script loading errors
src/utils/googleMapsLoader.ts:      // Try fallback if available
src/utils/googleMapsLoader.ts:        promise = null; // Reset promise to allow a new attempt
src/utils/googleMapsLoader.ts:    // Add script to document
src/utils/googleMapsLoader.ts:/**
src/utils/googleMapsLoader.ts:    // If Maps API is already loaded, just set state accordingly
src/utils/googleMapsLoader.ts:        // Final check for auth errors before confirming load
src/utils/googleMapsLoader.ts:        // Check for specific error types
src/utils/offlineOperations.ts:/**
src/utils/offlineOperations.ts:      // We're online - attempt to save directly to Firestore
src/utils/offlineOperations.ts:      // Also update the cache with the latest data
src/utils/offlineOperations.ts:      // If online save fails, fall through to offline behavior
src/utils/offlineOperations.ts:  // We're offline or the save failed - queue the operation for later
src/utils/offlineOperations.ts:  // Cache the data locally so it appears in queries
src/utils/offlineOperations.ts:/**
src/utils/offlineOperations.ts:  // Try to get from cache first regardless of online status
src/utils/offlineOperations.ts:      // We're online - attempt to get from Firestore
src/utils/offlineOperations.ts:        // Cache the data for offline use
src/utils/offlineOperations.ts:      // If online fetch fails, fall back to cache
src/utils/offlineOperations.ts:  // Return cached data if we're offline or if the fetch failed
src/utils/offlineOperations.ts:/**
src/utils/offlineOperations.ts:      // We're online - attempt to delete from Firestore
src/utils/offlineOperations.ts:      // If online delete fails, fall through to offline behavior
src/utils/offlineOperations.ts:  // Queue the delete operation for when we're back online
src/utils/offlineOperations.ts:/**
src/utils/offlineOperations.ts:      // If we've tried too many times, give up
src/utils/offlineOperations.ts:        return true; // Return true to remove it from queue
src/utils/offlineOperations.ts:      return false; // Return false to keep in queue for retry
src/utils/offlineOperations.ts:// Initialize offline cache when this module is imported
src/utils/wialonConfig2.ts:/**
src/utils/wialonConfig2.ts:// Base API URL for Wialon requests
src/utils/wialonConfig2.ts:  "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B2944486AC08F8AA3ACAC2D2FD45FF053&lang=en"
src/utils/wialonConfig2.ts:// Direct login URL with token for Wialon hosting
src/utils/wialonConfig2.ts:  "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B2944486AC08F8AA3ACAC2D2FD45FF053&lang=en"
src/utils/wialonConfig2.ts:// Session token for API authentication
src/utils/wialonConfig2.ts:// SDK URL for loading the Wialon JavaScript SDK
src/utils/wialonConfig2.ts:  "https://hst-api.wialon.com/wsdk/script/wialon.js";
src/utils/wialonConfig2.ts:// Helper function to get the Wialon login URL with a specific token
src/utils/wialonConfig2.ts:    return WIALON_LOGIN_URL; // Use default URL with embedded token
src/utils/wialonConfig2.ts:  // Extract base URL without token
src/utils/wialonConfig2.ts:  const baseUrl = "https://hosting.wialon.com/";
src/utils/wialonConfig2.ts:// Helper to open Wialon login in a new tab
src/utils/placesService.ts:/**
src/utils/placesService.ts:/**
src/utils/placesService.ts:/**
src/utils/placesService.ts:    // Add location bias if provided
src/utils/placesService.ts:/**
src/utils/placesService.ts:/**
src/utils/placesService.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:// Sage format interfaces
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/sageDataMapping.ts:/**
src/utils/wialonSensorData.ts:// wialonSensorData.ts - Safe & typed utility for AVL unit sensor parsing
src/utils/wialonSensorData.ts:// Add this at the top if not already declared globally in a .d.ts file:
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:/**
src/utils/wialonSensorData.ts:    // Defensive: check global wialon and required API
src/utils/wialonSensorData.ts:    // Defensive: getItems may not exist or may not return array
src/utils/wialonSensorData.ts:    // Find unit by fleet number
src/utils/wialonSensorData.ts:    // Defensive: getLastMessage may not exist
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:    // Validate the place object has the expected structure
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:/**
src/utils/placesApiGuards.ts:      // Wait and retry
src/utils/chartTheme.ts:// src/utils/chartTheme.ts
src/utils/chartTheme.ts:    foreColor: '#4B5563', // Tailwind gray-600
src/utils/chartTheme.ts:    '#0ea5e9', // primary-500
src/utils/chartTheme.ts:    '#38bdf8', // primary-400
src/utils/chartTheme.ts:    '#facc15', // yellow-400
src/utils/chartTheme.ts:    '#22c55e', // green-500
src/utils/chartTheme.ts:    '#ef4444', // red-500
src/utils/chartTheme.ts:    '#6366f1', // indigo-500
src/utils/chartTheme.ts:  grid: { borderColor: '#E5E7EB' }, // gray-200
src/utils/firestoreConnection.ts:// Ensure firebaseApp is defined
src/utils/firestoreConnection.ts:// Initialize Firestore
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/firestoreConnection.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:/**
src/utils/validation.ts:  // Add more schemas as needed
src/utils/validation.ts:// Add type for valid form types
src/utils/validation.ts:/**
src/utils/validation.ts:// Type guard to check if a string is a valid form type
src/utils/validation.ts:/**
src/utils/validation.ts:      // Format error message
src/utils/validation.ts:/**
src/utils/validation.ts:  // Check for path traversal attempts
src/utils/validation.ts:  // Validate path format (alphanumeric, hyphens, underscores, and forward slashes only)
src/utils/validation.ts:/**
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:    // Original address component formatting logic
src/utils/mapUtils.ts:  // Handle coordinate object
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:  // Earth's radius in kilometers
src/utils/mapUtils.ts:  // Convert latitude and longitude from degrees to radians
src/utils/mapUtils.ts:  // Haversine formula calculation
src/utils/mapUtils.ts:  const distance = R * c; // Distance in kilometers
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:    // Convert to meters if less than 1 km
src/utils/mapUtils.ts:  // Round to 1 decimal place if under 10 km
src/utils/mapUtils.ts:  // Round to whole number if over 10 km
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:  // Calculate time in hours
src/utils/mapUtils.ts:  // Convert to minutes
src/utils/mapUtils.ts:  // Format as hours and minutes
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:  return `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=${zoom}&size=${width}x${height}&markers=color:red%7C${lat},${lng}&key=${apiKey}`;
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:  // Convert radius from kilometers to degrees (approximate)
src/utils/mapUtils.ts:  // Get random distance and angle
src/utils/mapUtils.ts:  // Calculate offset
src/utils/mapUtils.ts:  // Add offset to center coordinates
src/utils/mapUtils.ts:/**
src/utils/mapUtils.ts:/**
src/utils/triphelpers.ts:// -------------------- Utility Functions --------------------
src/utils/triphelpers.ts:// -------------------- ID Generation --------------------
src/utils/triphelpers.ts:// -------------------- Date Formatting --------------------
src/utils/triphelpers.ts:// -------------------- Currency Formatting --------------------
src/utils/triphelpers.ts:// -------------------- Core Trip Calculations --------------------
src/utils/triphelpers.ts:// -------------------- Flag & Compliance Logic --------------------
src/utils/triphelpers.ts:// -------------------- Filtering Functions --------------------
src/utils/triphelpers.ts:// -------------------- Utility Functions --------------------
src/utils/triphelpers.ts:// Check if the user is online
src/utils/triphelpers.ts:// Helper to retry failed operations with exponential backoff
src/utils/triphelpers.ts:        delay *= 2; // Exponential backoff
src/utils/triphelpers.ts:// -------------------- Report Generation --------------------
src/utils/triphelpers.ts:// Generate report for a single trip (used by TripReport component)
src/utils/triphelpers.ts:    // Calculate cost breakdown by category
src/utils/triphelpers.ts:    // Find missing receipts
src/utils/triphelpers.ts:// Placeholder for multiple trips report generation
src/utils/triphelpers.ts:    // TODO: Implement real export
src/utils/triphelpers.ts:    // Calculate basic metrics
src/utils/triphelpers.ts:    // Calculate revenue and expenses for trips in this currency only
src/utils/triphelpers.ts:    // Calculate per-trip averages for the specified currency only
src/utils/triphelpers.ts:    // Client type breakdown
src/utils/triphelpers.ts:    // Investigation metrics
src/utils/triphelpers.ts:    // Calculate average resolution time
src/utils/triphelpers.ts:    // Filter to only use trips in the specified currency
src/utils/triphelpers.ts:          const resolutionTime = (resolvedDate.getTime() - flaggedDate.getTime()) / (1000 * 60 * 60 * 24); // in days
src/utils/triphelpers.ts:    // Driver statistics
src/utils/triphelpers.ts:    // Filter to only use trips in the specified currency
src/utils/triphelpers.ts:    // Create workbook
src/utils/triphelpers.ts:    // Summary sheet
src/utils/triphelpers.ts:    // Driver stats sheet
src/utils/triphelpers.ts:    // Trips detail sheet
src/utils/triphelpers.ts:    // Write file
src/utils/triphelpers.ts:// -------------------- Flagged Costs Extraction --------------------
src/utils/triphelpers.ts:// -------------------- Trip Sorting by Date --------------------
src/utils/triphelpers.ts:  // Group trips by loading date (start date)
src/utils/triphelpers.ts:  // Sort dates in descending order (newest first)
src/utils/triphelpers.ts:  // Create a new object with sorted dates
src/utils/triphelpers.ts:// Format date for display in headers
src/utils/setupEnv.ts:/**
src/utils/setupEnv.ts:// Re-export the checkEnvVariables function for use by other modules
src/utils/setupEnv.ts:// Define interface for environment status
src/utils/setupEnv.ts:/**
src/utils/setupEnv.ts:  // Check Firebase configuration
src/utils/setupEnv.ts:  // Check Google Maps configuration
src/utils/setupEnv.ts:  // Add specific warnings for common issues
src/utils/setupEnv.ts:/**
src/utils/setupEnv.ts:  // Use fancy console styling for better visibility
src/utils/setupEnv.ts:  // Display missing variables
src/utils/setupEnv.ts:  // Display critical issues
src/utils/setupEnv.ts:  // Display warnings
src/utils/setupEnv.ts:  // Display suggestions
src/utils/setupEnv.ts:/**
src/utils/setupEnv.ts:/**
src/utils/tripDebugger.ts:/**
src/utils/tripDebugger.ts:/**
src/utils/tripDebugger.ts:  // Count trips by status
src/utils/tripDebugger.ts:    // Check if status is a string - correct type but might have unexpected values
src/utils/tripDebugger.ts:    // Count all statuses including unexpected ones
src/utils/tripDebugger.ts:  // Identify potential issues
src/utils/tripDebugger.ts:  // Check for case mismatches like "Active" instead of "active"
src/utils/tripDebugger.ts:  // Generate report
src/utils/tripDebugger.ts:/**
src/utils/tripDebugger.ts:    // Fix missing status
src/utils/tripDebugger.ts:    // Fix case sensitivity and map web import statuses
src/utils/tripDebugger.ts:      // Map web import statuses to our standard statuses
src/utils/tripDebugger.ts:        'delivered': 'completed', // Map delivered to completed
src/utils/tripDebugger.ts:        'shipped': 'active', // Map shipped to active
src/utils/tripDebugger.ts:        'in_transit': 'active', // Map in_transit to active
src/utils/tripDebugger.ts:        'pending': 'active', // Map pending to active
src/utils/tripDebugger.ts:        'booked': 'active', // Map booked to active
src/utils/tripDebugger.ts:        'confirmed': 'active' // Map confirmed to active
src/utils/tripDebugger.ts:    // Fix client name mapping for web imports
src/utils/tripDebugger.ts:/**
src/utils/tripDebugger.ts:  // First fix any status issues
src/utils/tripDebugger.ts:  // Then filter by the requested status
src/utils/requireEnv.ts:// src/utils/requireEnv.ts
src/utils/placesService_clean.ts:/**
src/utils/placesService_clean.ts:/**
src/utils/placesService_clean.ts:/**
src/utils/placesService_clean.ts:    // Add location bias if provided
src/utils/placesService_clean.ts:/**
src/utils/placesService_clean.ts:/**
src/utils/placesService_clean.ts:/**
src/utils/mapsService.ts:/**
src/utils/mapsService.ts:// Keep track of health check attempts and status
src/utils/mapsService.ts:const HEALTH_CHECK_COOLDOWN = 30000; // 30 seconds between checks
src/utils/mapsService.ts:/**
src/utils/mapsService.ts:  // It's safer to return an empty string if the variable is not set.
src/utils/mapsService.ts:/**
src/utils/mapsService.ts:  // Skip health check in development environments - always assume it's unavailable
src/utils/mapsService.ts:  // This avoids unnecessary network requests and errors in dev
src/utils/mapsService.ts:  // If we recently checked and it's not forced, return cached result
src/utils/mapsService.ts:  // Update last check time
src/utils/mapsService.ts:  // Check network state first - no point in checking if we're offline
src/utils/mapsService.ts:  // A common health check endpoint is `/health` or `/status`.
src/utils/mapsService.ts:    // Increased timeout from 3s to 5s for more resilience
src/utils/mapsService.ts:      signal: AbortSignal.timeout(5000), // 5-second timeout
src/utils/mapsService.ts:      cache: "no-store", // Ensure we don't get a cached response
src/utils/mapsService.ts:    // A successful response (e.g., status 200 OK) means the service is healthy.
src/utils/mapsService.ts:      healthCheckAttempts = 0; // Reset attempts counter on success
src/utils/mapsService.ts:      // Log the error with the proper severity based on attempts
src/utils/mapsService.ts:    // Determine error type for better logging
src/utils/mapsService.ts:    // Log the error with appropriate category and severity
src/utils/mapsService.ts:/**
src/utils/mapsService.ts:  // If service is healthy, we can use it
src/utils/mapsService.ts:  // If we're offline, we shouldn't try to use Google Maps
src/utils/mapsService.ts:  // If we've never checked or it's been a while, assume we can try
src/utils/mapsService.ts:  // Otherwise, we can't use it
src/utils/wialonAuth2.ts:/**
src/utils/wialonAuth2.ts:// Placeholder for the Wialon SDK object, which would be globally available after loading.
src/utils/wialonAuth2.ts:// In a real scenario, you'd likely get this from `window.wialon` or similar after the SDK script loads.
src/utils/wialonAuth2.ts:/**
src/utils/wialonAuth2.ts:    // Prevent multiple SDK loads
src/utils/wialonAuth2.ts:    // Assuming WIALON_SDK_URL is defined and accessible, e.g., imported from wialonConfig.
src/utils/wialonAuth2.ts:    // For this example, we'll hardcode it, but you should import it.
src/utils/wialonAuth2.ts:    script.src = "https://sdk.wialon.com/wialon/sdk/current/wialon.js"; // Example SDK URL
src/utils/wialonAuth2.ts:/**
src/utils/wialonAuth2.ts:        // Success
src/utils/wialonAuth2.ts:        // Corrected: Changed .get="user"() to .getUser()
src/utils/wialonAuth2.ts:        // Error
src/utils/wialonAuth2.ts:/**
src/utils/wialonAuth2.ts:/**
src/utils/wialonAuth2.ts:  // Corrected: Changed .get="user"() to .getUser()
src/utils/wialonAuth2.ts:  // Corrected: Changed .get="user"() to .getUser()
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:  return uuidv4().substring(0, 12); // Create a shorter unique ID for QR codes
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:  // Add query parameters if provided
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:    // First, check if this is a URL
src/utils/qrCodeUtils.ts:      // If it's one of our workshop URLs
src/utils/qrCodeUtils.ts:        // Extract query parameters
src/utils/qrCodeUtils.ts:        // Load entity data based on type
src/utils/qrCodeUtils.ts:            // Generic entity handling
src/utils/qrCodeUtils.ts:      // Not a URL or not our URL format
src/utils/qrCodeUtils.ts:    // If not a URL, look up in QR codes collection
src/utils/qrCodeUtils.ts:      return null; // QR code not found
src/utils/qrCodeUtils.ts:      return null; // Document not found
src/utils/qrCodeUtils.ts:    // Update scan count and last scanned timestamp
src/utils/qrCodeUtils.ts:    // Load the associated entity
src/utils/qrCodeUtils.ts:      // Add more types as needed
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:    // Update the stock item with QR code
src/utils/qrCodeUtils.ts:    // Register QR code in the dedicated collection
src/utils/qrCodeUtils.ts:/**
src/utils/qrCodeUtils.ts:    // Check if it's a URL
src/utils/qrCodeUtils.ts:    // Parse our app URLs
src/utils/qrCodeUtils.ts:    // It's a URL but not our format
src/utils/qrCodeUtils.ts:    // Not a URL, could be a direct QR value or data
src/utils/taskHistory.ts:/**
src/utils/taskHistory.ts:/**
src/utils/taskHistory.ts:/**
src/utils/taskHistory.ts:      callback([]); // Return empty array on error
src/utils/taskHistory.ts:// Helper functions for common task history actions
src/utils/unitIconUtils.ts:// You can expand this as you add more vehicle types
src/utils/unitIconUtils.ts:    "https://cdn-icons-png.flaticon.com/512/61/61168.png"; // Default
src/utils/wialonDiagnostics.ts:/**
src/utils/wialonDiagnostics.ts:/**
src/utils/wialonDiagnostics.ts:  // 1. Check environment variables
src/utils/wialonDiagnostics.ts:  // 2. Check API URL format
src/utils/wialonDiagnostics.ts:  // 3. Check network connectivity to Wialon
src/utils/wialonDiagnostics.ts:  // Log summary
src/utils/wialonDiagnostics.ts:};/**
src/utils/wialonDiagnostics.ts:/**
src/utils/wialonDiagnostics.ts:        'The default URL is https://hst-api.wialon.com'
src/utils/wialonDiagnostics.ts:        details: 'URL must start with http:// or https://',
src/utils/wialonDiagnostics.ts:          'Update VITE_WIALON_API_URL to include protocol (https://)',
src/utils/wialonDiagnostics.ts:          'Standard format is https://hst-api.wialon.com'
src/utils/wialonDiagnostics.ts:        'Standard format is https://hst-api.wialon.com'
src/utils/wialonDiagnostics.ts:/**
src/utils/wialonDiagnostics.ts:  const apiUrl = import.meta.env.VITE_WIALON_API_URL || 'https://hst-api.wialon.com';
src/utils/wialonDiagnostics.ts:    // Use the SDK URL as a probe since it should always be available
src/utils/wialonDiagnostics.ts:    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
src/utils/fleetGeoJson.ts:/**
src/utils/fleetGeoJson.ts:// Type definitions for Wialon fleet data structure
src/utils/fleetGeoJson.ts:  // Additional Wialon properties as needed
src/utils/fleetGeoJson.ts:// GeoJSON types
src/utils/fleetGeoJson.ts:    coordinates: [number, number]; // [longitude, latitude]
src/utils/fleetGeoJson.ts:    [key: string]: any; // Allow additional properties
src/utils/fleetGeoJson.ts:/**
src/utils/fleetGeoJson.ts:/**
src/utils/fleetGeoJson.ts:/**
src/utils/fleetGeoJson.ts:/**
src/utils/fleetGeoJson.ts:  defaultCenter: [number, number] = [17.0832, -22.5597] // Default to Windhoek, Namibia
src/utils/fleetGeoJson.ts:    // Extract common properties from profile
src/utils/fleetGeoJson.ts:    // Generate a random position around Windhoek for demo purposes
src/utils/fleetGeoJson.ts:    // In a real application, this would come from real-time GPS data
src/utils/fleetGeoJson.ts:        coordinates: [randomLng, randomLat] // [longitude, latitude]
src/utils/fleetGeoJson.ts:/**
src/utils/sidebar-validator.ts:/**
src/utils/sidebar-validator.ts:// Get all TSX files in pages directory recursively
src/utils/sidebar-validator.ts:// Check if a page is in the sidebar
src/utils/sidebar-validator.ts:    // Check if this item matches
src/utils/sidebar-validator.ts:    // Check children recursively
src/utils/sidebar-validator.ts:// Find all pages not in the sidebar
src/utils/sidebar-validator.ts:    // Convert absolute path to relative path format used in sidebar
src/utils/sidebar-validator.ts:      .replace(/.*\/src\//, '')
src/utils/sidebar-validator.ts:// Generate suggested sidebar entries for missing pages
src/utils/sidebar-validator.ts:  // Group by directory for better organization
src/utils/sidebar-validator.ts:  // Generate sidebar suggestions
src/utils/sidebar-validator.ts:  let suggestionOutput = '// Suggested sidebar entries for missing pages\n\n';
src/utils/sidebar-validator.ts:    suggestionOutput += `// === ${dir.toUpperCase()} ===\n`;
src/utils/sidebar-validator.ts:      const routePath = `/${page.componentPath.replace(/^pages\//, '')}`;
src/utils/webhookSenders.ts:// Use Firebase Cloud Function URLs instead of direct Google Sheets access
src/utils/webhookSenders.ts:const TRIP_WEBHOOK_URL = 'https://us-central1-mat1-9e6b3.cloudfunctions.net/importTripsWebhook';
src/utils/webhookSenders.ts:const DRIVER_BEHAVIOR_WEBHOOK_URL = 'https://us-central1-mat1-9e6b3.cloudfunctions.net/importDriverBehaviorWebhook';
src/utils/webhookSenders.ts:// Get Firebase ID token for authentication - this should be replaced with actual auth mechanism
src/utils/webhookSenders.ts:        // This is a placeholder - in production, you should get this from Firebase Auth
src/utils/webhookSenders.ts:        // return await firebase.auth().currentUser?.getIdToken() || null;
src/utils/webhookSenders.ts:/**
src/utils/webhookSenders.ts:        // Get auth token
src/utils/webhookSenders.ts:        // Ensure payload is wrapped in a trips array as expected by the server
src/utils/webhookSenders.ts:        // If payload already has a trips property that is an array, use it as is
src/utils/webhookSenders.ts:        // If payload is an array, wrap it in an object with trips property
src/utils/webhookSenders.ts:        // Otherwise, treat the payload as a single trip and wrap it in an array inside trips property
src/utils/webhookSenders.ts:        // Log the formatted payload for debugging
src/utils/webhookSenders.ts:        // Make the request with retry logic
src/utils/webhookSenders.ts:                    // If we can't read the response body, just use the status
src/utils/webhookSenders.ts:        // Try to parse JSON response, but handle text responses too
src/utils/webhookSenders.ts:        // Re-throw with more diagnostic info
src/utils/webhookSenders.ts:/**
src/utils/webhookSenders.ts:        // Get auth token
src/utils/webhookSenders.ts:        // Ensure payload is wrapped in an events array as expected by the server
src/utils/webhookSenders.ts:        // If payload already has an events property that is an array, use it as is
src/utils/webhookSenders.ts:        // If payload is an array, wrap it in an object with events property
src/utils/webhookSenders.ts:        // Otherwise, treat the payload as a single event and wrap it in an array inside events property
src/utils/webhookSenders.ts:        // Log the formatted payload for debugging
src/utils/webhookSenders.ts:        // Make the request with retry logic
src/utils/webhookSenders.ts:                    // If we can't read the response body, just use the status
src/utils/webhookSenders.ts:        // Try to parse JSON response, but handle text responses too
src/utils/webhookSenders.ts:        // Re-throw with more diagnostic info
src/utils/webhookSenders.ts:// Utility function to retry a webhook call with exponential backoff
src/utils/webhookSenders.ts:                delay *= 2; // Exponential backoff
src/utils/pdfGenerators.ts:// Extend the jsPDF type to include autoTable
src/utils/pdfGenerators.ts:// Types from the form component
src/utils/pdfGenerators.ts:// Define types for company details
src/utils/pdfGenerators.ts:// Company details based on entity
src/utils/pdfGenerators.ts:/**
src/utils/pdfGenerators.ts:  // Create a new PDF document
src/utils/pdfGenerators.ts:  // Set font for the entire document
src/utils/pdfGenerators.ts:  // Get the correct company details based on entity
src/utils/pdfGenerators.ts:  // Set page margins
src/utils/pdfGenerators.ts:  const margin = 20; // 20mm margin
src/utils/pdfGenerators.ts:  // Helper for text wrapping
src/utils/pdfGenerators.ts:    // Ensure all lines are strings, filter out any undefined values
src/utils/pdfGenerators.ts:  // Start Y position
src/utils/pdfGenerators.ts:  // Add header with company details
src/utils/pdfGenerators.ts:  // Add remaining company details based on entity
src/utils/pdfGenerators.ts:  // Add horizontal line
src/utils/pdfGenerators.ts:  // Add document title
src/utils/pdfGenerators.ts:  // Reset to normal font
src/utils/pdfGenerators.ts:  // Add form data in sections
src/utils/pdfGenerators.ts:  // Customer/Transporter section
src/utils/pdfGenerators.ts:  // Make customer details section
src/utils/pdfGenerators.ts:  // Add date information
src/utils/pdfGenerators.ts:  // Load reference
src/utils/pdfGenerators.ts:  // Vehicle details
src/utils/pdfGenerators.ts:  // Driver
src/utils/pdfGenerators.ts:  // Addresses
src/utils/pdfGenerators.ts:  // Cargo details
src/utils/pdfGenerators.ts:  // Payment details
src/utils/pdfGenerators.ts:  // Special instructions
src/utils/pdfGenerators.ts:  // Contact information
src/utils/pdfGenerators.ts:  // Add a declaration and acceptance section
src/utils/pdfGenerators.ts:  // Signature sections
src/utils/pdfGenerators.ts:  // Add footer
src/utils/pdfGenerators.ts:  // Return the PDF as a blob
src/utils/pdfGenerators.ts:// Define inspection types to avoid import issues from TSX files
src/utils/pdfGenerators.ts:  // Add a title
src/utils/pdfGenerators.ts:  // Add report metadata
src/utils/pdfGenerators.ts:  // Add inspection items table
src/utils/pdfGenerators.ts:  // Add notes if any
src/utils/pdfGenerators.ts:  // Save the PDF
src/utils/locationPermissions.ts:/**
src/utils/locationPermissions.ts:  /**
src/utils/locationPermissions.ts:    // For web platform
src/utils/locationPermissions.ts:        // Try to get current position to trigger permission request
src/utils/locationPermissions.ts:    // For native platforms
src/utils/locationPermissions.ts:  /**
src/utils/locationPermissions.ts:  /**
src/utils/envUtils.ts:/**
src/utils/envUtils.ts:/**
src/utils/envUtils.ts:    // Prefer variables initialized on the window by initBrowserEnv
src/utils/envUtils.ts:/**
src/utils/envChecker.ts:/**
src/utils/envChecker.ts:/**
src/utils/envChecker.ts:  // Create a safe preview (first 4 chars + length info for sensitive values)
src/utils/envChecker.ts:      // Handle sensitive values
src/utils/envChecker.ts:      // Non-sensitive values
src/utils/envChecker.ts:/**
src/utils/envChecker.ts:  // Define critical environment variables
src/utils/envChecker.ts:  // Check each critical variable
src/utils/envChecker.ts:  // Get all available environment variables
src/utils/envChecker.ts:  // Find missing critical variables
src/utils/envChecker.ts:/**
src/utils/envChecker.ts:  // Check basic existence
src/utils/envChecker.ts:  // Check API key validity if it exists
src/utils/envChecker.ts:    // Check API key length (valid keys are usually >30 characters)
src/utils/envChecker.ts:  // Check if iframeUrl is valid when present
src/utils/envChecker.ts:    // Check if iframeUrl contains valid Google Maps URL
src/utils/envChecker.ts:    // Check for unresolved template variables
src/utils/envChecker.ts:/**
src/utils/envChecker.ts:/**
src/utils/useTyreStores.tsx:// Define the context type
src/utils/useTyreStores.tsx:// Create the context with default values
src/utils/useTyreStores.tsx:// Props type for the provider
src/utils/inspectionUtils.ts:/**
src/utils/inspectionUtils.ts:/**
src/utils/inspectionUtils.ts:  // Look for common repair indicators
src/utils/inspectionUtils.ts:  // Look for common replacement indicators
src/utils/firebaseConnectionHandler.ts:// Initialize Firestore
src/utils/firebaseConnectionHandler.ts:// --- HEALTH CHECK HELPERS (leave as-is) ---
src/utils/firebaseConnectionHandler.ts:    // We don't need the response as we're just checking if the request succeeds
src/utils/firebaseConnectionHandler.ts:    await fetch(`http://${host}:${port}`, {
src/utils/firebaseConnectionHandler.ts:// --- CONNECT TO EMULATOR (keep fallback, don't break prod) ---
src/utils/firebaseConnectionHandler.ts:      setConnectionStatus("connected"); // Continue to prod
src/utils/firebaseConnectionHandler.ts:// --- STATUS MANAGEMENT ---
src/utils/firebaseConnectionHandler.ts:// --- INITIALIZE MONITORING ---
src/utils/firebaseConnectionHandler.ts:  // Try emulator, but doesn't error if fails
src/utils/firebaseConnectionHandler.ts:// --- ENHANCED ERROR HANDLING (robust against WebChannel 'transport' issues) ---
src/utils/firebaseConnectionHandler.ts:  // Identify if this is a WebChannel/transport error
src/utils/firebaseConnectionHandler.ts:  // WebChannel-specific & network retry logic with exponential backoff
src/utils/firebaseConnectionHandler.ts:    // Log detailed diagnostics about the specific error
src/utils/firebaseConnectionHandler.ts:      // Exponential backoff: 2s, 4s, 8s
src/utils/firebaseConnectionHandler.ts:        // Notify any listeners that we're attempting to reconnect
src/utils/firebaseConnectionHandler.ts:        // Disconnect, wait with backoff, then reconnect
src/utils/firebaseConnectionHandler.ts:        // Check if we're actually connected
src/utils/firebaseConnectionHandler.ts:      // Display a user-friendly message about connection issues
src/utils/firebaseConnectionHandler.ts:      // Reset retry counter to allow future attempts when network conditions change
src/utils/firebaseConnectionHandler.ts:    // Not a network error, but still an error
src/utils/firebaseConnectionHandler.ts:// Helper function to show a user-friendly error message about connection issues
src/utils/firebaseConnectionHandler.ts:  // This could be implemented with a toast notification or other UI component
src/utils/firebaseConnectionHandler.ts:  // For now, we'll just log to console, but in a production app this would show UI feedback
src/utils/firebaseConnectionHandler.ts:  // You could dispatch an event that UI components could listen for:
src/utils/firebaseConnectionHandler.ts:// --- ENHANCED CONNECTION HEALTH MONITOR ---
src/utils/firebaseConnectionHandler.ts:  // Monitor online/offline status
src/utils/firebaseConnectionHandler.ts:    attemptReconnect(); // Actively try to reconnect when network is restored
src/utils/firebaseConnectionHandler.ts:  // Periodic health checks to detect and recover from silent failures
src/utils/firebaseConnectionHandler.ts:    // Only attempt reconnection if we're in error state or disconnected but browser reports online
src/utils/firebaseConnectionHandler.ts:  // Listen for visibility changes to handle laptop lid close/open scenarios
src/utils/firebaseConnectionHandler.ts:  // Initial connection attempt
src/utils/firestoreUtils.ts:// If you need Timestamp, import it from 'firebase/firestore' (modular SDK v9+)
src/utils/firestoreUtils.ts:/**
src/utils/firestoreUtils.ts:/**
src/utils/firestoreUtils.ts:/**
src/utils/firestoreUtils.ts:  // Handle Firestore Timestamp objects
src/utils/firestoreUtils.ts:    // Also check for a toDate() method to handle different Timestamp implementations
src/utils/firestoreUtils.ts:    // Return the original object if conversion fails
src/utils/firestoreUtils.ts:    // Safely convert array items
src/utils/firestoreUtils.ts:    // Handle regular objects
src/utils/firestoreUtils.ts:/**
src/utils/wialonService.ts:/**
src/utils/wialonService.ts:      this.session.initSession("https://hst-api.wialon.com");
src/utils/wialonService.ts:  /**
src/utils/wialonService.ts:    // Get latest message (AVL data)
src/utils/wialonService.ts:    // Find value by sensor's parameter (assuming "p" property as sensor key)
src/utils/wialonService.ts:  /**
src/utils/wialonService.ts:    // Listen for changePosition (new AVL messages)
src/utils/wialonService.ts:    // Initial call
src/utils/wialonService.ts:    // Return unsubscribe function
src/utils/wialonService.ts:  /**
src/utils/wialonService.ts:      // Get the unit
src/utils/wialonService.ts:      // Prepare fuel math parameters
src/utils/wialonService.ts:      // Update unit parameters using Wialon API
src/utils/wialonService.ts:// You can use env var or config for token
src/utils/wialonUnitUtils.ts:/*#__PURE__*/
src/utils/wialonConfig.tsx:// Define the types needed for the application
src/utils/wialonConfig.tsx:// Mocked utility functions to replace the external imports
src/utils/wialonConfig.tsx:// In a real application, these would handle actual API calls and validation logic.
src/utils/wialonConfig.tsx:/**
src/utils/wialonConfig.tsx: * It checks if the URL starts with 'https://' and is a valid format.
src/utils/wialonConfig.tsx:  if (!url.startsWith('https://')) {
src/utils/wialonConfig.tsx:    return { isValid: false, message: 'URL must start with "https://".' };
src/utils/wialonConfig.tsx:/**
src/utils/wialonConfig.tsx:  // This is a simple mock, a real implementation would check for specific token patterns
src/utils/wialonConfig.tsx:// Mocked Wialon API service functions
src/utils/wialonConfig.tsx:/**
src/utils/wialonConfig.tsx:/**
src/utils/wialonConfig.tsx:      // Simulate successful login for a specific token
src/utils/wialonConfig.tsx:      // The token has been hardcoded in the component to the user's provided token
src/utils/wialonConfig.tsx:        // Simulate a specific error
src/utils/wialonConfig.tsx:/**
src/utils/wialonConfig.tsx:      // Return a mock list of units
src/utils/wialonConfig.tsx:  // Simulate the VITE environment variable
src/utils/wialonConfig.tsx:  const wialonLoginUrl = 'https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0d4F999A33B2E4F3B4BE3FA15BFC665617D906C0F0&lang=en';
src/utils/wialonConfig.tsx:  // Form state
src/utils/wialonConfig.tsx:    'https://hst-api.wialon.com'
src/utils/wialonConfig.tsx:  // Validation state
src/utils/wialonConfig.tsx:  // Test connection state
src/utils/wialonConfig.tsx:  // Effect to validate inputs when they change
src/utils/wialonConfig.tsx:  // Save settings
src/utils/wialonConfig.tsx:    // Save to localStorage
src/utils/wialonConfig.tsx:    // Show success message in the UI
src/utils/wialonConfig.tsx:  // Test connection
src/utils/wialonConfig.tsx:      // Step 1: Initialize API
src/utils/wialonConfig.tsx:      // Step 2: Login with token
src/utils/wialonConfig.tsx:      // Step 3: Fetch units to verify full access
src/utils/wialonConfig.tsx:      // For a user-facing login flow, you would typically open this URL in a new window
src/utils/wialonConfig.tsx:              placeholder="https://hst-api.wialon.com"
src/utils/wialonConfig.tsx:              href="https://sdk.wialon.com/wiki/en/sidebar/remoteapi/apiref/apiref"
src/utils/wialonInit.ts:// src/utils/wialonInit.ts
src/utils/wialonInit.ts:// NOTE:
src/utils/wialonInit.ts:// Do NOT redeclare window.wialon or window.W here — they are already
src/utils/wialonInit.ts:// declared in src/types/wialon-sdk.d.ts. Re-declaring causes TS2687/2717.
src/utils/wialonInit.ts:  apiUrl?: string; // defaults to import.meta.env.VITE_WIALON_API_URL
src/utils/wialonInit.ts:  token?: string;  // defaults to import.meta.env.VITE_WIALON_SESSION_TOKEN
src/utils/wialonInit.ts:      // Enhanced diagnostic
src/utils/wialonInit.ts:/**
src/utils/wialonInit.ts:  // Add clear console debug for what will be attempted
src/utils/wialonInit.ts:    token: token.slice(0, 6) + "…" + token.slice(-4), // redact for logs
src/utils/wialonInit.ts:        // Enhanced error: link to doc, list common issues
src/utils/wialonInit.ts:          `• See Wialon error code docs: https://sdk.wialon.com/wiki/en/sidebar/remoteapi/errors\n`;
src/utils/wialonInit.ts:        // Log to console
src/utils/tyreTypeConverter.ts:/**
src/utils/tyreTypeConverter.ts:// Helper function to determine if a tyre comes from the tyreData.ts module vs tyre.ts
src/utils/tyreTypeConverter.ts:  // Check for properties that are specific to one implementation
src/utils/tyreTypeConverter.ts:/**
src/utils/tyreTypeConverter.ts:  // Already in correct format
src/utils/tyreTypeConverter.ts:  // Special case for TyreDashboard format
src/utils/tyreTypeConverter.ts:  // Create a base object with common properties
src/utils/tyreTypeConverter.ts:  // Handle size property
src/utils/tyreTypeConverter.ts:  // Handle type-specific conversions
src/utils/tyreTypeConverter.ts:    // Converting from tyreData.ts to tyre.ts format
src/utils/tyreTypeConverter.ts:      // Add other conversions as needed
src/utils/tyreTypeConverter.ts:    // Converting from tyre.ts to tyreData.ts format
src/utils/tyreTypeConverter.ts:      // Add other conversions as needed
src/utils/tyreTypeConverter.ts:/**
src/utils/tyreTypeConverter.ts:  // Current date for missing fields
src/utils/tyreTypeConverter.ts:    treadDepth: tyre.treadDepth || 10, // Default value
src/utils/tyreTypeConverter.ts:    // If we have installation data, extract vehicle and position
src/utils/tyreTypeConverter.ts:/**
src/utils/formIntegration.ts:// src/utils/formIntegration.ts
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:        // Queue operation for offline mode
src/utils/formIntegration.ts:        // Queue operation for offline mode
src/utils/formIntegration.ts:// Types
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:      // Apply filter if specified
src/utils/formIntegration.ts:      // Apply sort if specified
src/utils/formIntegration.ts:      // Apply limit if specified
src/utils/formIntegration.ts:  // Load options when the component mounts or dependencies change
src/utils/formIntegration.ts:      // Handle offline scenario
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:  // Add filter for vehicle type if specified
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:        // Remove unused docRef
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:  // Add filter for store name if specified
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:        // Online submission
src/utils/formIntegration.ts:          // Update existing document
src/utils/formIntegration.ts:          // Create new document
src/utils/formIntegration.ts:        // Queue operation for offline mode - not implemented yet
src/utils/formIntegration.ts:        // Store in localStorage for potential future implementation
src/utils/formIntegration.ts:/**
src/utils/formIntegration.ts:    // Check required fields
src/utils/formIntegration.ts:    // Skip other validations if value is empty and not required
src/utils/formIntegration.ts:    // Validate min/max for strings (length) or numbers
src/utils/formIntegration.ts:    // Validate pattern (regex)
src/utils/formIntegration.ts:    // Custom validation
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:      // Always throw Error instances, not plain objects
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:      // Your Firestore save logic here
src/utils/errorHandlingExamples.ts:        // Rethrow with context instead of creating new error
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:  // Use safeAsyncEntry for event handlers to prevent unhandled promise rejections
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:      // Assert Maps API is available
src/utils/errorHandlingExamples.ts:            // Provide detailed error context
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:    // Input validation
src/utils/errorHandlingExamples.ts:    // API call with error handling
src/utils/errorHandlingExamples.ts:    // Log with context but still throw for caller to handle
src/utils/errorHandlingExamples.ts:      formData: formData, // This will be safely serialized
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:      // First, fetch current user to validate
src/utils/errorHandlingExamples.ts:      // Merge updates with current data
src/utils/errorHandlingExamples.ts:      // Save with error handling
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:  // This will be caught by the ErrorBoundary and properly logged
src/utils/errorHandlingExamples.ts:/**
src/utils/errorHandlingExamples.ts:// Re-export commonly used utilities for convenience
src/components/RealtimeSensorTable.tsx:/* ✔️  now supplied by firebase.ts */
src/components/RealtimeSensorTable.tsx:const SENSORS_PATH = "sensors";             // RTDB node
src/components/RealtimeSensorTable.tsx:const pathRef = dbRef(SENSORS_PATH);        // single-arg helper
src/components/RealtimeSensorTable.tsx:    // subscribe
src/components/RealtimeSensorTable.tsx:    // clean-up
src/components/RealtimeSensorTable.tsx:      unsubscribe();         // safety – detach listener
src/components/WialonLoginTest.tsx:    detailed: true,  // Get detailed unit information
src/components/WialonLoginTest.tsx:    autoFetch: true  // Auto-fetch when logged in
src/components/WialonLoginTest.tsx:        {/* Login Status */}
src/components/WialonLoginTest.tsx:        {/* Units Display */}
src/components/maps/FleetMapComponent.tsx:// Minimal placeholder implementation. Replace with real map logic.
src/components/Inventory Management/receive-parts.tsx:    // Basic validation
src/components/Inventory Management/receive-parts.tsx:      // Simulate API call to record received parts
src/components/Inventory Management/receive-parts.tsx:      await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate network delay
src/components/Inventory Management/receive-parts.tsx:        // Reset form
src/components/GoogleMapWrapper.tsx:/**
src/components/GoogleMapWrapper.tsx:    // If already loaded, don't do anything
src/components/GoogleMapWrapper.tsx:        // Global variable to store the API key from environment
src/components/GoogleMapWrapper.tsx:        // Check if Map constructor exists and is a function
src/components/GoogleMapWrapper.tsx:  // If there was an error loading the API
src/components/GoogleMapWrapper.tsx:  // If still loading, show fallback
src/components/GoogleMapWrapper.tsx:  // API is loaded, render children
src/components/Tyremanagement/TyreInventoryFilters.tsx:  // Added filters for status, condition, vehicle
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Search field */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Add button */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Brand filter */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Location filter */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Status filter */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Condition filter */}
src/components/Tyremanagement/TyreInventoryFilters.tsx:        {/* Vehicle filter */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:// Color palette for charts
src/components/Tyremanagement/TyrePerformanceReport.tsx:  const [brandFilter] = useState<string>("all"); // reserved for future dynamic filtering
src/components/Tyremanagement/TyrePerformanceReport.tsx:  const [vehicleFilter] = useState<string>("all"); // reserved for future dynamic filtering
src/components/Tyremanagement/TyrePerformanceReport.tsx:        // Mock data for demonstration
src/components/Tyremanagement/TyrePerformanceReport.tsx:        // In a real app, you'd fetch this data from Firestore
src/components/Tyremanagement/TyrePerformanceReport.tsx:      {/* Key Performance Indicators */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:      {/* Charts Row 1 */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Brand Comparison */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Wear Patterns */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:      {/* Charts Row 2 */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Cost Analysis */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Position Analysis */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:      {/* Charts Row 3 */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Vehicle Comparison */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:        {/* Failure Reasons */}
src/components/Tyremanagement/TyrePerformanceReport.tsx:      {/* Recommendations */}
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Mock data for initial load
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Load tyres on component mount
src/components/Tyremanagement/TyreInventoryDashboard.tsx:    // Simulate API fetch
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Filter and sort tyres
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Toggle sort direction
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Calculate summary statistics
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Get unique manufacturers for filter dropdown
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Generate condition class
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Generate status class
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Calculate tread percentage
src/components/Tyremanagement/TyreInventoryDashboard.tsx:  // Format numbers
src/components/Tyremanagement/TyreInventoryDashboard.tsx:      {/* Header and Summary Stats */}
src/components/Tyremanagement/TyreInventoryDashboard.tsx:      {/* Summary Cards */}
src/components/Tyremanagement/TyreInventoryDashboard.tsx:      {/* Filters and Search */}
src/components/Tyremanagement/TyreInventoryDashboard.tsx:      {/* Tyre Inventory Table */}
src/components/Tyremanagement/TyreIntegration.tsx:// @ts-nocheck
src/components/Tyremanagement/TyreIntegration.tsx:// src/components/Tyres/TyreIntegration.tsx
src/components/Tyremanagement/TyreIntegration.tsx:import TyreInspectionModal from "../Models/Tyre/TyreInspectionModal"; // existing modal
src/components/Tyremanagement/TyreIntegration.tsx:      {/* 1) Full dashboard */}
src/components/Tyremanagement/TyreIntegration.tsx:      {/* 2) Voorraad dashboard */}
src/components/Tyremanagement/TyreIntegration.tsx:      {/* 3) Management View */}
src/components/Tyremanagement/TyreIntegration.tsx:      {/* 4) Inspection modal – real data */}
src/components/Tyremanagement/TyreIntegration.tsx:          tyrePosition={"N/A"} // supply from DB if you want
src/components/Tyremanagement/TyreIntegration.tsx:            // call addInspection here or pass down from props
src/components/Tyremanagement/TyreIntegration.tsx:      {/* Optional: show current inspections list */}
src/components/Tyremanagement/TyreInventoryManager.tsx:// Corrected Tyre interface to align with component logic
src/components/Tyremanagement/TyreInventoryManager.tsx:  purchaseDate?: string; // Made optional
src/components/Tyremanagement/TyreInventoryManager.tsx:  // Offline cache + op queue keys
src/components/Tyremanagement/TyreInventoryManager.tsx:      /* ignore */
src/components/Tyremanagement/TyreInventoryManager.tsx:  // ACTION HANDLERS
src/components/Tyremanagement/TyreInventoryManager.tsx:  // Export data
src/components/Tyremanagement/TyreInventoryManager.tsx:      {/* Add/Edit Form */}
src/components/Tyremanagement/TyreInventoryManager.tsx:      {/* Search and Filters */}
src/components/Tyremanagement/TyreInventoryManager.tsx:        {/* Status summary */}
src/components/Tyremanagement/TyreInventoryManager.tsx:        {/* Tyres Table */}
src/components/Tyremanagement/TyreInventoryManager.tsx:        {/* Pagination */}
src/components/Tyremanagement/TyreReferenceManager.tsx:// Tab management for the different sections
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Brand form state
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Size form state
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Pattern form state
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Vehicle Position form state
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Handle refreshing data
src/components/Tyremanagement/TyreReferenceManager.tsx:  // --- BRAND MANAGEMENT ---
src/components/Tyremanagement/TyreReferenceManager.tsx:  // --- SIZE MANAGEMENT ---
src/components/Tyremanagement/TyreReferenceManager.tsx:  // --- PATTERN MANAGEMENT ---
src/components/Tyremanagement/TyreReferenceManager.tsx:  // --- VEHICLE POSITION MANAGEMENT ---
src/components/Tyremanagement/TyreReferenceManager.tsx:    // Generate a temporary ID for the new position
src/components/Tyremanagement/TyreReferenceManager.tsx:    // Reset the new position input
src/components/Tyremanagement/TyreReferenceManager.tsx:  // Tab navigation
src/components/Tyremanagement/TyreReferenceManager.tsx:        {/* Tab navigation */}
src/components/Tyremanagement/TyreReferenceManager.tsx:        {/* Error display */}
src/components/Tyremanagement/TyreReferenceManager.tsx:        {/* Tab content */}
src/components/Tyremanagement/TyreAnalytics.tsx:// Simple mock analytics components - would be replaced with actual chart components in production
src/components/Tyremanagement/TyreAnalytics.tsx:  // Count tyres by brand
src/components/Tyremanagement/TyreAnalytics.tsx:  // Group by wear levels
src/components/Tyremanagement/TyreAnalytics.tsx:  // Calculate analytics data
src/components/Tyremanagement/TyreAnalytics.tsx:      // Top brands
src/components/Tyremanagement/TyreAnalytics.tsx:      // Cost calculations
src/components/Tyremanagement/TyreAnalytics.tsx:      // Tyre life calculation
src/components/Tyremanagement/TyreAnalytics.tsx:      {/* Performance Metrics */}
src/components/Tyremanagement/TyreAnalytics.tsx:      {/* Charts Row */}
src/components/Tyremanagement/TyreAnalytics.tsx:      {/* Top Performing Brands */}
src/components/Tyremanagement/TyreAnalytics.tsx:                    // Calculate brand-specific metrics
src/components/Tyremanagement/TyreManagementSystem.tsx:// Placeholder for missing module
src/components/Tyremanagement/TyreManagementSystem.tsx:// Replace hardcoded values with TYRE_REFERENCE_DATA
src/components/Tyremanagement/TyreManagementSystem.tsx:// const TYRE_PATTERNS = TYRE_REFERENCE_DATA.patterns;
src/components/Tyremanagement/TyreManagementSystem.tsx:// const TYRE_SIZES = TYRE_REFERENCE_DATA.sizes;
src/components/Tyremanagement/TyreManagementSystem.tsx:// Add the provided tyre reference list
src/components/Tyremanagement/TyreManagementSystem.tsx:  // Add more entries as needed
src/components/Tyremanagement/TyreManagementSystem.tsx:    const kmRun = tyre.kmRun * 1.60934; // Convert miles to km
src/components/Tyremanagement/TyreManagementSystem.tsx:    const minimumTread = 3; // Legal minimum
src/components/Tyremanagement/TyreManagementSystem.tsx:    const newTyreDepth = 20; // Assume new tyre starts at 20mm
src/components/Tyremanagement/TyreManagementSystem.tsx:      // Replace with UI-based error display
src/components/Tyremanagement/TyreManagementSystem.tsx:    // Deep-merge defaults to avoid any string | undefined issues
src/components/Tyremanagement/TyreManagementSystem.tsx:    // Reset form
src/components/Tyremanagement/TyreManagementSystem.tsx:    // Replace with UI-based success message
src/components/Tyremanagement/TyreManagementSystem.tsx:          {/* Filters */}
src/components/Tyremanagement/TyreManagementSystem.tsx:          {/* Tyre Inventory Table */}
src/components/Tyremanagement/TyreManagementSystem.tsx:          {/* Cost Analytics */}
src/components/Tyremanagement/TyreManagementSystem.tsx:      {/* Add Tyre Modal */}
src/components/Tyremanagement/TyreInspection.tsx:// Import tyre reference data
src/components/Tyremanagement/TyreInspection.tsx:// Thresholds for tyre condition assessment
src/components/Tyremanagement/TyreInspection.tsx:    good: 5.0, // 5mm or more is good
src/components/Tyremanagement/TyreInspection.tsx:    worn: 3.0, // Between 3mm and 5mm is worn
src/components/Tyremanagement/TyreInspection.tsx:    // Below 3mm is urgent
src/components/Tyremanagement/TyreInspection.tsx:    // For standard passenger tyres (would vary by tyre type in production)
src/components/Tyremanagement/TyreInspection.tsx:    min: 30, // PSI
src/components/Tyremanagement/TyreInspection.tsx:    max: 40, // PSI
src/components/Tyremanagement/TyreInspection.tsx:// Sidewall condition options
src/components/Tyremanagement/TyreInspection.tsx:// Function to parse tyre size from string (e.g., '315/80R22.5')
src/components/Tyremanagement/TyreInspection.tsx:// Helper function to format tyre size as string
src/components/Tyremanagement/TyreInspection.tsx:// Interface for the inspection form data
src/components/Tyremanagement/TyreInspection.tsx:  photos: string[]; // This would store URLs in production
src/components/Tyremanagement/TyreInspection.tsx:  // New fields for tyre references
src/components/Tyremanagement/TyreInspection.tsx:  // Size breakdown
src/components/Tyremanagement/TyreInspection.tsx:  // Cost tracking
src/components/Tyremanagement/TyreInspection.tsx:// Define TyreConditionStatus
src/components/Tyremanagement/TyreInspection.tsx:// Define TyreInspectionData
src/components/Tyremanagement/TyreInspection.tsx:  // Selected tyre for inspection
src/components/Tyremanagement/TyreInspection.tsx:  // Filtered tyre options based on selections
src/components/Tyremanagement/TyreInspection.tsx:  // Track available positions for the selected fleet
src/components/Tyremanagement/TyreInspection.tsx:  // Form data state
src/components/Tyremanagement/TyreInspection.tsx:    // New fields
src/components/Tyremanagement/TyreInspection.tsx:    // Size breakdown
src/components/Tyremanagement/TyreInspection.tsx:    // Cost tracking
src/components/Tyremanagement/TyreInspection.tsx:  // Form submission state
src/components/Tyremanagement/TyreInspection.tsx:  // Add state for new tyre option
src/components/Tyremanagement/TyreInspection.tsx:  // Update position options when fleet number changes
src/components/Tyremanagement/TyreInspection.tsx:  // Update tyre size when size string changes
src/components/Tyremanagement/TyreInspection.tsx:  // Calculate cost per km when both cost and estimated lifespan are provided
src/components/Tyremanagement/TyreInspection.tsx:  // Handling tyre selection from VehicleTyreView
src/components/Tyremanagement/TyreInspection.tsx:  // Handle form input changes
src/components/Tyremanagement/TyreInspection.tsx:      // Auto-detect issues based on thresholds when these values change
src/components/Tyremanagement/TyreInspection.tsx:      // Handle brand change to update pattern options
src/components/Tyremanagement/TyreInspection.tsx:      // Handle size change to update brand options
src/components/Tyremanagement/TyreInspection.tsx:        // Also update the tyre size structure
src/components/Tyremanagement/TyreInspection.tsx:  // Toggle new tyre fields
src/components/Tyremanagement/TyreInspection.tsx:  // Toggle inspection history
src/components/Tyremanagement/TyreInspection.tsx:  // Handle photo upload (placeholder for real implementation)
src/components/Tyremanagement/TyreInspection.tsx:    // In a real implementation, this would handle the file upload process
src/components/Tyremanagement/TyreInspection.tsx:    // Mock adding a photo URL to demonstrate the UI flow
src/components/Tyremanagement/TyreInspection.tsx:  // Handle form submission
src/components/Tyremanagement/TyreInspection.tsx:    // Validate required fields
src/components/Tyremanagement/TyreInspection.tsx:      // Determine overall status based on detected issues
src/components/Tyremanagement/TyreInspection.tsx:      // Create inspection entry
src/components/Tyremanagement/TyreInspection.tsx:        temperature: 0, // Required field with default value
src/components/Tyremanagement/TyreInspection.tsx:        condition: status, // Required field
src/components/Tyremanagement/TyreInspection.tsx:        notes: formData.remarks ?? "", // Required field
src/components/Tyremanagement/TyreInspection.tsx:        // sidewallCondition: formData.sidewallCondition, // Removed, not in TyreInspectionEntry
src/components/Tyremanagement/TyreInspection.tsx:        images: [], // Optional field
src/components/Tyremanagement/TyreInspection.tsx:      // Prepare inspection record for Firestore
src/components/Tyremanagement/TyreInspection.tsx:        // If we have a selected tyre, include its ID for reference
src/components/Tyremanagement/TyreInspection.tsx:      // In a real app, this would save to Firestore
src/components/Tyremanagement/TyreInspection.tsx:      // await createOrUpdateDoc('tyreInspections', `inspection_${Date.now()}`, inspectionRecord);
src/components/Tyremanagement/TyreInspection.tsx:      // If selected tyre exists, update its inspection history
src/components/Tyremanagement/TyreInspection.tsx:          // Add the new inspection to history
src/components/Tyremanagement/TyreInspection.tsx:        // In a real app, update the tyre in Firestore
src/components/Tyremanagement/TyreInspection.tsx:        // await createOrUpdateDoc('tyres', selectedTyre.id, updatedTyre);
src/components/Tyremanagement/TyreInspection.tsx:      // Check if a fault or job card should be created
src/components/Tyremanagement/TyreInspection.tsx:        // In a real app, this would create a job card or add to fault list
src/components/Tyremanagement/TyreInspection.tsx:        // await createOrUpdateDoc('faults', `fault_${Date.now()}`, {
src/components/Tyremanagement/TyreInspection.tsx:        //   type: 'tyre',
src/components/Tyremanagement/TyreInspection.tsx:        //   severity: 'critical',
src/components/Tyremanagement/TyreInspection.tsx:        //   description: `Urgent tyre replacement needed: ${formData.fleetNumber} - ${formData.tyrePosition}`,
src/components/Tyremanagement/TyreInspection.tsx:        //   inspectionId: inspectionEntry.id,
src/components/Tyremanagement/TyreInspection.tsx:        //   status: 'open',
src/components/Tyremanagement/TyreInspection.tsx:        //   timestamp: new Date().toISOString(),
src/components/Tyremanagement/TyreInspection.tsx:        // });
src/components/Tyremanagement/TyreInspection.tsx:      // Simulate successful save
src/components/Tyremanagement/TyreInspection.tsx:        // Reset form after a delay
src/components/Tyremanagement/TyreInspection.tsx:            inspector: formData.inspector, // Keep the inspector name
src/components/Tyremanagement/TyreInspection.tsx:  // Determine if there are any detected issues
src/components/Tyremanagement/TyreInspection.tsx:      {/* Success Message */}
src/components/Tyremanagement/TyreInspection.tsx:      {/* Error Message */}
src/components/Tyremanagement/TyreInspection.tsx:        {/* Left Column - Vehicle Selection */}
src/components/Tyremanagement/TyreInspection.tsx:          {/* Inspection Form - Only shown when a tyre is selected */}
src/components/Tyremanagement/TyreInspection.tsx:                // Inspection History View
src/components/Tyremanagement/TyreInspection.tsx:                  {/* Tread Depth Chart */}
src/components/Tyremanagement/TyreInspection.tsx:                      {/* Inspection Table */}
src/components/Tyremanagement/TyreInspection.tsx:                // Inspection Form
src/components/Tyremanagement/TyreInspection.tsx:                  {/* Tyre Details Section */}
src/components/Tyremanagement/TyreInspection.tsx:                  {/* Photo Upload (Placeholder) */}
src/components/Tyremanagement/TyreInspection.tsx:                    {/* Uploaded Photos Preview */}
src/components/Tyremanagement/TyreInspection.tsx:                  {/* Issues Warning */}
src/components/Tyremanagement/TyreInspection.tsx:                  {/* Submit Button */}
src/components/Tyremanagement/TyreInspection.tsx:        {/* Right Column - Vehicle Tyre Diagram */}
src/components/Tyremanagement/TyreInspection.tsx:// Removed incorrect VehicleTyreViewProps interface
src/components/Tyremanagement/TyreInspection.tsx:// interface VehicleTyreViewProps {
src/components/Tyremanagement/TyreInspection.tsx://   vehicleId: string;
src/components/Tyremanagement/TyreInspection.tsx://   onTyreSelect: (tyre: Tyre | null) => void;
src/components/Tyremanagement/TyreInspection.tsx:// }
src/components/Tyremanagement/TyreInspection.tsx:// Correct the TyreInspectionData interface
src/components/Tyremanagement/TyreInspection.tsx:    treadDepth: "", // Default to empty string
src/components/Tyremanagement/TyreInspection.tsx:    pressure: "", // Default to empty string
src/components/Tyremanagement/TyreInspection.tsx:    condition: "good", // Default to 'good'
src/components/Tyremanagement/TyreInspection.tsx:    // Reset form
src/components/Tyremanagement/TyreCostAnalysis.tsx:  // DEBUG ONLY - Log import diagnostics
src/components/Tyremanagement/TyreCostAnalysis.tsx:    // Check UI component imports
src/components/Tyremanagement/TyreCostAnalysis.tsx:    // Check data imports
src/components/Tyremanagement/TyreCostAnalysis.tsx:    // Log expected vs actual names
src/components/Tyremanagement/TyreCostAnalysis.tsx:      {/* Filters */}
src/components/Tyremanagement/TyreCostAnalysis.tsx:      {/* Summary Stats */}
src/components/Tyremanagement/TyreCostAnalysis.tsx:      {/* Cost Analysis Table */}
src/components/Tyremanagement/TyreCostAnalysis.tsx:      {/* Cost per KM Analysis - DEBUG ONLY */}
src/components/Tyremanagement/TyreManagementView.tsx:// Import type utilities from the tyreConstants file
src/components/Tyremanagement/TyreManagementView.tsx:// Mock data
src/components/Tyremanagement/TyreManagementView.tsx:  // Inventory form modal state
src/components/Tyremanagement/TyreManagementView.tsx:  // TyreStores modal state
src/components/Tyremanagement/TyreManagementView.tsx:  // Filter tyres based on the selected filters
src/components/Tyremanagement/TyreManagementView.tsx:  // Total values for the inventory
src/components/Tyremanagement/TyreManagementView.tsx:  // Button click handlers
src/components/Tyremanagement/TyreManagementView.tsx:    // Add export functionality here
src/components/Tyremanagement/TyreManagementView.tsx:  // Toggle expanded view for a tyre
src/components/Tyremanagement/TyreManagementView.tsx:  // Handlers for inventory and inspection
src/components/Tyremanagement/TyreManagementView.tsx:  // Get unique brands from the tyre constants
src/components/Tyremanagement/TyreManagementView.tsx:  // Get unique sizes from tyres
src/components/Tyremanagement/TyreManagementView.tsx:    // Support 'ZAR', 'USD', or 'ZAR/USD' for display
src/components/Tyremanagement/TyreManagementView.tsx:    // Format with 2 decimals, thousands separator
src/components/Tyremanagement/TyreManagementView.tsx:      // Show both ZAR and USD (mock conversion, e.g. 1 USD = 18 ZAR)
src/components/Tyremanagement/TyreManagementView.tsx:          {/* Inventory Summary Cards */}
src/components/Tyremanagement/TyreManagementView.tsx:          {/* Filters */}
src/components/Tyremanagement/TyreManagementView.tsx:          {/* Tyre Inventory Table */}
src/components/Tyremanagement/TyreManagementView.tsx:                        {/* Expanded View */}
src/components/Tyremanagement/TyreManagementView.tsx:          {/* VehicleTyreStore Live Entries */}
src/components/Tyremanagement/TyreManagementView.tsx:          {/* Move Modal */}
src/components/Tyremanagement/TyreManagementView.tsx:      {/* Add Tyre Inventory Form Modal */}
src/components/Tyremanagement/TyreManagementView.tsx:      {/* Tyre Inspection Modal */}
src/components/Tyremanagement/VehiclePositionDiagram.tsx:  // Simple rendering for now - in a real implementation, you'd have SVG diagrams for each vehicle type
src/components/Tyremanagement/VehiclePositionDiagram.tsx:  // Choose diagram based on vehicle type
src/components/Tyremanagement/TyreInventory.tsx:  // Convert Tyre array to TyreStock format for compatibility with existing components
src/components/Tyremanagement/TyreInventory.tsx:    // Group tyres by brand, model, pattern, and size
src/components/Tyremanagement/TyreInventory.tsx:      // Create a unique key for grouping
src/components/Tyremanagement/TyreInventory.tsx:    // Convert grouped tyres to TyreStock
src/components/Tyremanagement/TyreInventory.tsx:      // Safety check to ensure firstTyre exists
src/components/Tyremanagement/TyreInventory.tsx:        minStock: 5, // Default minimum stock level
src/components/Tyremanagement/TyreInventory.tsx:  // Extract unique locations and brands for filter options
src/components/Tyremanagement/TyreReports.tsx:  // Adjust transformation logic to derive `totalDistance` and `totalCost`
src/components/Tyremanagement/TyreReports.tsx:    totalDistance: tyre.installation?.mileageAtInstallation || 0, // Derived from installation data
src/components/Tyremanagement/TyreReports.tsx:    totalCost: tyre.purchaseDetails.cost || 0, // Derived from purchase details
src/components/Tyremanagement/TyreReports.tsx:  // Note: Performance form component is not present in this version.
src/components/Tyremanagement/TyreReports.tsx:        {/* Brand Filter */}
src/components/Tyremanagement/TyreReports.tsx:        {/* Pattern Filter */}
src/components/Tyremanagement/TyreReports.tsx:        {/* Size Filter */}
src/components/Tyremanagement/TyreReportGenerator.tsx:    // Call the provided callback function
src/components/Tyremanagement/TyreReportGenerator.tsx:      "All Brands" // In a real implementation, this would be a selected brand
src/components/Tyremanagement/TyreReportGenerator.tsx:    // Simulate report generation with timeout
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add header
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add company info
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add line
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add vehicle information
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add tyre details
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add notes
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add inspector info
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add signature if available
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add photo if available
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Add footer with page numbers
src/components/Tyremanagement/TyreInspectionPDFGenerator.tsx:    // Save the PDF
src/components/DieselManagement/FuelTheftDetection.tsx:  // State for expansion of anomaly details
src/components/DieselManagement/FuelTheftDetection.tsx:  // Mock data for demonstration purposes
src/components/DieselManagement/FuelTheftDetection.tsx:  // Format date for display
src/components/DieselManagement/FuelTheftDetection.tsx:  // Toggle anomaly details expansion
src/components/DieselManagement/FuelLogs.tsx:  // State for fuel logs
src/components/DieselManagement/FuelLogs.tsx:  // Handle export button click
src/components/DieselManagement/FuelLogs.tsx:    // Export logic would go here
src/components/DieselManagement/FuelLogs.tsx:  // Mock data for demo purposes
src/components/DieselManagement/FuelLogs.tsx:    // In a real implementation, this would fetch from Firestore
src/components/DieselManagement/FuelLogs.tsx:  // Filter logs when search term or filters change
src/components/DieselManagement/FuelLogs.tsx:    // Apply search term filter
src/components/DieselManagement/FuelLogs.tsx:    // Apply date filter
src/components/DieselManagement/FuelLogs.tsx:    // Apply fleet filter
src/components/DieselManagement/FuelLogs.tsx:  // Format date for display
src/components/DieselManagement/FuelLogs.tsx:  // Get unique fleet numbers for filter
src/components/DieselManagement/FuelLogs.tsx:  // View handler (placeholder; integrate with modal or navigation later)
src/components/DieselManagement/FuelLogs.tsx:      {/* Header / Actions */}
src/components/DieselManagement/FuelLogs.tsx:      {/* Filters */}
src/components/DieselManagement/FuelLogs.tsx:      {/* Fuel Logs Table */}
src/components/DieselManagement/DieselDashboardComponent.tsx:/**
src/components/DieselManagement/DieselDashboardComponent.tsx:  // State for the selected date range filter
src/components/DieselManagement/DieselDashboardComponent.tsx:  // Mock data
src/components/DieselManagement/DieselDashboardComponent.tsx:    fuelEfficiency: 8.7, // km/L
src/components/DieselManagement/DieselDashboardComponent.tsx:    averagePerVehicle: 525.1, // L
src/components/DieselManagement/DieselDashboardComponent.tsx:    carbonEmissions: 64.2, // tons
src/components/DieselManagement/DieselDashboardComponent.tsx:  // Chart data placeholders
src/components/DieselManagement/DieselDashboardComponent.tsx:  // Recent fuel entries (mock data)
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Date Range Selector */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Stats Overview Cards */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Fuel Consumption & Cost Charts */}
src/components/DieselManagement/DieselDashboardComponent.tsx:          {/* Chart placeholder */}
src/components/DieselManagement/DieselDashboardComponent.tsx:          {/* Chart placeholder */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Fuel Efficiency Metrics */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Quick Actions */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Recent Fuel Entries */}
src/components/DieselManagement/DieselDashboardComponent.tsx:      {/* Vehicle Efficiency Ranking */}
src/components/RealtimeSensorList.tsx:  /* initial load + realtime listener */
src/components/RealtimeSensorList.tsx:      /* 1️⃣  initial data */
src/components/RealtimeSensorList.tsx:      /* 2️⃣  live updates */
src/components/RealtimeSensorList.tsx:    /* cleanup on unmount */
src/components/RealtimeSensorList.tsx:  /* ------------- UI --------------------------------------------------- */
src/components/DataLoader.tsx:/**
src/components/DataLoader.tsx:  // Default loading state
src/components/DataLoader.tsx:  // Default error state
src/components/DataLoader.tsx:  // Default empty state
src/components/Adminmangement/CARReportDetails.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/Adminmangement/CARReportDetails.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Adminmangement/CARReportDetails.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Adminmangement/CARReportDetails.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Adminmangement/CARReportDetails.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/Adminmangement/CARReportDetails.tsx:  // Check if report is overdue
src/components/Adminmangement/CARReportDetails.tsx:  // Get severity class
src/components/Adminmangement/CARReportDetails.tsx:  // Get status class
src/components/Adminmangement/CARReportDetails.tsx:  // Handle download PDF
src/components/Adminmangement/CARReportDetails.tsx:  // Handle download Excel
src/components/Adminmangement/CARReportDetails.tsx:  // View attachment helper
src/components/Adminmangement/CARReportDetails.tsx:        {/* Report Header */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Key Information */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Client Report */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Problem Identification */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Primary Cause Analysis */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Root Cause Analysis */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Actions */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Financial Impact and Comments */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Attachments */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Completion Information */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Overdue Warning */}
src/components/Adminmangement/CARReportDetails.tsx:        {/* Actions */}
src/components/Adminmangement/ActionItemDetails.tsx:  // Calculate overdue status
src/components/Adminmangement/ActionItemDetails.tsx:  // Handle adding a comment
src/components/Adminmangement/ActionItemDetails.tsx:  // Handle adding overdue reason
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Header */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Details */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Overdue Reason */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Overdue Reason Input for items overdue by 10+ days */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Attachments */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Comments */}
src/components/Adminmangement/ActionItemDetails.tsx:          {/* Add Comment */}
src/components/Adminmangement/ActionItemDetails.tsx:        {/* Actions */}
src/components/UnitsTable.tsx:  // Filtering and sorting logic
src/components/UnitsTable.tsx:      // Search filter by name or id
src/components/UnitsTable.tsx:      // Online filter (has valid position)
src/components/UnitsTable.tsx:    // Sorting
src/components/UnitsTable.tsx:  // Format position for display
src/components/UnitsTable.tsx:  // Google Maps link
src/components/UnitsTable.tsx:      ? `https://maps.google.com/maps?q=${pos.lat},${pos.lng}`
src/components/UnitsTable.tsx:  // Handle sort change
src/components/HybridWialonSession.tsx:/**
src/components/HybridWialonSession.tsx:  // Client-side authentication (token-based)
src/components/HybridWialonSession.tsx:  // Server-side session
src/components/HybridWialonSession.tsx:  // Units fetching (works with either session type)
src/components/HybridWialonSession.tsx:      {/* Mode Selector */}
src/components/HybridWialonSession.tsx:      {/* Session Status */}
src/components/HybridWialonSession.tsx:      {/* Login Interface */}
src/components/HybridWialonSession.tsx:      {/* Logout Button */}
src/components/HybridWialonSession.tsx:      {/* Units Display */}
src/components/SystemCostGenerator.tsx:  // Get the latest system cost rates from the admin configuration (safe access)
src/components/SystemCostGenerator.tsx:  // Find the most recent trip with system costs to get the latest rates
src/components/SystemCostGenerator.tsx:      // Sort by date to get the most recent
src/components/SystemCostGenerator.tsx:          // Extract rate information from the calculation details
src/components/SystemCostGenerator.tsx:            // This is a simplified approach - in a real app, you'd store the actual rates
src/components/SystemCostGenerator.tsx:            // For now, we'll use the default rates but in a real implementation,
src/components/SystemCostGenerator.tsx:            // you would extract the actual rates from the system costs
src/components/SystemCostGenerator.tsx:  // Use effective date logic to determine which rates to apply
src/components/SystemCostGenerator.tsx:    // If trip starts on or after the rate effective date, use current rates
src/components/SystemCostGenerator.tsx:    // Otherwise, use historical rates (for now, we'll use current rates as fallback)
src/components/SystemCostGenerator.tsx:    // In a real system, you'd store historical rate versions
src/components/SystemCostGenerator.tsx:    // For demo purposes, return current rates
src/components/SystemCostGenerator.tsx:    // In production, you'd fetch historical rates based on trip start date
src/components/SystemCostGenerator.tsx:  // Calculate trip duration in days
src/components/SystemCostGenerator.tsx:  // Calculate per-KM costs
src/components/SystemCostGenerator.tsx:  // Calculate per-day costs
src/components/SystemCostGenerator.tsx:      {/* System Cost Overview */}
src/components/SystemCostGenerator.tsx:      {/* Rate Version Information */}
src/components/SystemCostGenerator.tsx:      {/* Trip Calculation Parameters */}
src/components/SystemCostGenerator.tsx:      {/* Per-KM Costs */}
src/components/SystemCostGenerator.tsx:      {/* Per-Day Costs */}
src/components/SystemCostGenerator.tsx:      {/* Total System Costs */}
src/components/SystemCostGenerator.tsx:      {/* Warning for Missing Distance */}
src/components/SystemCostGenerator.tsx:      {/* Generate Button */}
src/components/SensorList.tsx:  // ⬇️  use the hook that already handles loading / error / data
src/components/layout/Navigation.tsx:// src/components/layout/Navigation.tsx
src/components/layout/Navigation.tsx:/** Optional external context; falls back to mock if not provided */
src/components/layout/Navigation.tsx:  /** Show a mobile hamburger that calls this when clicked */
src/components/layout/Navigation.tsx:  /** Optional unread notifications badge */
src/components/layout/Navigation.tsx:  /** Called when the search form submits */
src/components/layout/Navigation.tsx:  /** Optional current user display name */
src/components/layout/Navigation.tsx:  // Build breadcrumb from URL
src/components/layout/Navigation.tsx:    // Default behavior if no handler supplied: navigate to a search route
src/components/layout/Navigation.tsx:        {/* Left: Brand + Breadcrumb + Mobile menu */}
src/components/layout/Navigation.tsx:          {/* Mobile burger (hidden on lg; delegate to Sidebar if provided) */}
src/components/layout/Navigation.tsx:          {/* Breadcrumb */}
src/components/layout/Navigation.tsx:        {/* Middle: Search */}
src/components/layout/Navigation.tsx:        {/* Right: Status + Actions */}
src/components/layout/AppLayout.tsx:// src/components/layout/AppLayout.tsx
src/components/layout/AppLayout.tsx:/**
src/components/layout/Sidebar.tsx:// Define a type for the sidebar items for better code organization
src/components/layout/Sidebar.tsx:// NavItemComponent to handle nested navigation items
src/components/layout/Sidebar.tsx:  // Check if this item or any of its children are active
src/components/layout/Sidebar.tsx:  // Check if this item should be expanded based on current path
src/components/layout/Sidebar.tsx:  // Auto-expand if a child is active
src/components/layout/Sidebar.tsx:          onClick={closeSidebar} // Close sidebar on click for mobile
src/components/layout/Sidebar.tsx:// Update SidebarProps to receive the isOpen state and a function to close it.
src/components/layout/Sidebar.tsx:      {/* The mobile toggle button is now handled by the Navigation component */}
src/components/layout/Sidebar.tsx:      {/* Backdrop for mobile */}
src/components/layout/Sidebar.tsx:      {/* Sidebar Content */}
src/components/layout/Sidebar.tsx:        {/* Sidebar Header */}
src/components/layout/Sidebar.tsx:        {/* User Info */}
src/components/layout/Sidebar.tsx:        {/* Navigation Menu */}
src/components/layout/Sidebar.tsx:        {/* Sidebar Footer */}
src/components/layout/Footer.tsx:// src/components/layout/Footer.tsx
src/components/layout/Footer.tsx:/**
src/components/layout/Layout.tsx:import type { Trip } from "../../types"; // canonical Trip from your barrel
src/components/layout/Layout.tsx:// Define the props for Layout. The state management for the sidebar
src/components/layout/Layout.tsx:// has been moved here to allow communication between Navigation and Sidebar.
src/components/layout/Layout.tsx:/** Only enforce presence of additionalCosts; do NOT assume other fields (e.g., name) exist. */
src/components/layout/Layout.tsx:    ...(t as Trip), // keep whatever the caller provides
src/components/layout/Layout.tsx:    additionalCosts: t.additionalCosts ?? [], // ensure required field
src/components/layout/Layout.tsx:  // State to manage the selected trip
src/components/layout/Layout.tsx:  // State to manage the mobile sidebar's open/close status
src/components/layout/Layout.tsx:      {/* Sidebar now receives the isOpen state and a function to close it */}
src/components/layout/Layout.tsx:      {/* Main content area. The left margin matches the sidebar's width on large screens. */}
src/components/layout/Layout.tsx:      {/* The Navigation component can now toggle the sidebar. */}
src/components/layout/Layout.tsx:// This component seems to be a bridge for legacy state management and might not be
src/components/layout/Layout.tsx:// needed long-term, but for now, we will keep it as is.
src/components/layout/Layout.tsx:    if (!selectedTrip /* first time */) {
src/components/UIConnector.tsx:// Types
src/components/UIConnector.tsx:/**
src/components/UIConnector.tsx:  // Apply styles when component mounts
src/components/UIConnector.tsx:    // Create style element for highlighting UI elements
src/components/UIConnector.tsx:    // CSS to highlight different UI elements
src/components/UIConnector.tsx:    // Analyze the UI
src/components/UIConnector.tsx:    // Cleanup function
src/components/UIConnector.tsx:  // Function to analyze the UI and apply highlights
src/components/UIConnector.tsx:    // Remove existing highlights
src/components/UIConnector.tsx:    // Track statistics
src/components/UIConnector.tsx:    // Find all buttons
src/components/UIConnector.tsx:    // Find all forms
src/components/UIConnector.tsx:    // Find all inputs
src/components/UIConnector.tsx:    // Update status
src/components/UIConnector.tsx:  // Helper function to check for click handlers
src/components/UIConnector.tsx:  // Helper function to check for submit handlers
src/components/UIConnector.tsx:  // Helper function to check for change handlers
src/components/UIConnector.tsx:  // Helper function to get event listeners (simplified implementation)
src/components/UIConnector.tsx:    // This is a simplified approach that won't catch all handlers
src/components/UIConnector.tsx:    // In a real implementation, we'd need to use browser devtools APIs
src/components/UIConnector.tsx:    // or monkey-patch addEventListener
src/components/UIConnector.tsx:    // Check for onclick attribute
src/components/UIConnector.tsx:    // Check for onsubmit attribute
src/components/UIConnector.tsx:    // Check for onchange attribute
src/components/UIConnector.tsx:    // For React components, check for special properties
src/components/UIConnector.tsx:    // This is a heuristic approach and won't catch all React handlers
src/components/UIConnector.tsx:  // Helper function to add tag to element
src/components/UIConnector.tsx:  // Remove all highlights
src/components/UIConnector.tsx:  // Calculate the connection percentage
src/components/wialon/WialonDriverManager.tsx:  // Set initial resource selection if available
src/components/wialon/WialonDriverManager.tsx:  // Create a session with resource_id for the drivers hook
src/components/wialon/WialonDriverManager.tsx:  // Basic driver form state
src/components/wialon/WialonDriverManager.tsx:  // CRUD ops (Create/Update/Delete)
src/components/wialon/WialonDriverManager.tsx:      // Safety check - ensure window.wialon is available
src/components/wialon/WialonDriverManager.tsx:      // Check if createDriver method exists
src/components/wialon/WialonDriverManager.tsx:              // Reset form after successful creation
src/components/wialon/WialonDriverManager.tsx:      {/* Display session errors */}
src/components/wialon/WialonDriverManager.tsx:      {/* Display form-specific errors */}
src/components/wialon/WialonDriverManager.tsx:      {/* SDK Status */}
src/components/wialon/WialonDriverManager.tsx:      {/* Resource selector */}
src/components/wialon/WialonDriverManager.tsx:      {/* Drivers List */}
src/components/wialon/WialonDriverManager.tsx:      {/* Driver Create Form */}
src/components/wialon/WialonUnitsList.tsx:// This import path is correct if WialonUnitsList.tsx is in src/components/Map/wialon/
src/components/wialon/WialonUnitsList.tsx:import { ExtendedWialonUnit } from "../../hooks/useWialon"; // Import ExtendedWialonUnit from the new hook
src/components/wialon/WialonUnitsList.tsx:  /** The list of Wialon units to display */
src/components/wialon/WialonUnitsList.tsx:  /** Loading state from the Wialon hook */
src/components/wialon/WialonUnitsList.tsx:  /** Error state from the Wialon hook */
src/components/wialon/WialonUnitsList.tsx:  /** Optional filter for units by name */
src/components/wialon/WialonUnitsList.tsx:  /** Optional filter for units by type/class */
src/components/wialon/WialonUnitsList.tsx:  /** Optional max units to display */
src/components/wialon/WialonUnitsList.tsx:  /** Callback when a unit is selected */
src/components/wialon/WialonUnitsList.tsx:/**
src/components/wialon/WialonUnitsList.tsx:  units, // Now a prop
src/components/wialon/WialonUnitsList.tsx:  loading, // Now a prop
src/components/wialon/WialonUnitsList.tsx:  error, // Now a prop
src/components/wialon/WialonUnitsList.tsx:  // Effect to filter and sort units whenever the 'units' prop, filters, or sort config change
src/components/wialon/WialonUnitsList.tsx:      setFilteredUnits([]); // Clear units if not available
src/components/wialon/WialonUnitsList.tsx:    let currentFiltered = [...units]; // Start with the units received as props
src/components/wialon/WialonUnitsList.tsx:    // Apply name search filter
src/components/wialon/WialonUnitsList.tsx:    // Apply type filter
src/components/wialon/WialonUnitsList.tsx:          // Check for both cls_id (number) and type (string) for filtering
src/components/wialon/WialonUnitsList.tsx:    // Apply sorting
src/components/wialon/WialonUnitsList.tsx:      // Safely access properties for sorting, handling potential undefined values
src/components/wialon/WialonUnitsList.tsx:      // Handle numerical sorting specifically for 'last_message'
src/components/wialon/WialonUnitsList.tsx:        // Default string comparison for other keys
src/components/wialon/WialonUnitsList.tsx:    // Apply limit if specified
src/components/wialon/WialonUnitsList.tsx:  }, [units, searchQuery, selectedType, sortConfig, limit]); // Re-run when these dependencies change
src/components/wialon/WialonUnitsList.tsx:  // Get unique unit types for the filter dropdown
src/components/wialon/WialonUnitsList.tsx:        .filter(Boolean) // Remove any null or undefined types
src/components/wialon/WialonUnitsList.tsx:          id: String(type), // Use the string representation as the option value
src/components/wialon/WialonUnitsList.tsx:          name: type as string, // Display name
src/components/wialon/WialonUnitsList.tsx:  // Display loading, error, or no units messages
src/components/wialon/WialonMap.tsx:// Fix for default marker icons in Leaflet with webpack/vite
src/components/wialon/WialonMap.tsx:// You'll need to add these icon files to your public folder
src/components/wialon/WialonMap.tsx:// Custom vehicle icon
src/components/wialon/WialonMap.tsx:  center?: [number, number]; // Default center if no units
src/components/wialon/WialonMap.tsx:  center = [0, 0], // Default center (will be overridden if units available)
src/components/wialon/WialonMap.tsx:  // Update map center when selected unit changes
src/components/wialon/WialonMap.tsx:  // Handle unit selection
src/components/wialon/WialonMap.tsx:  // Calculate initial map center based on available units
src/components/wialon/WialonMap.tsx:      // Try to find a unit with position
src/components/wialon/WialonMap.tsx:          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
src/components/wialon/WialonMap.tsx:          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
src/components/wialon/WialonIntegration.tsx:  /** The Wialon token to use for authentication */
src/components/wialon/WialonIntegration.tsx:  /** Button label text */
src/components/wialon/WialonIntegration.tsx:  /** Whether to open in a new tab or use an iframe */
src/components/wialon/WialonIntegration.tsx:  /** Height of the iframe (only used when displayMode is 'iframe') */
src/components/wialon/WialonIntegration.tsx:  /** Language to use for the Wialon interface */
src/components/wialon/WialonIntegration.tsx:  /** Additional URL parameters to pass to Wialon */
src/components/wialon/WialonIntegration.tsx:/**
src/components/wialon/WialonIntegration.tsx:  return `https://hosting.wialon.com/?${params.toString()}`;
src/components/wialon/WialonIntegration.tsx:    // Build URL dynamically from props
src/components/wialon/WialonIntegration.tsx:    // Check if iframe is supported (only if we're in iframe mode)
src/components/wialon/WialonIntegration.tsx:    // Only re-run if any of these dependencies change
src/components/wialon/WialonIntegration.tsx:    // eslint-disable-next-line
src/components/wialon/WialonIntegration.tsx:      // Try to fetch the headers to check X-Frame-Options
src/components/wialon/WialonIntegration.tsx:      // If DENY or SAMEORIGIN is present, iframe embedding is not allowed
src/components/wialon/WialonIntegration.tsx:  // Button display mode
src/components/wialon/WialonConfigDisplay.tsx:/**
src/components/wialon/WialonFeulsettings.tsx:// Use a placeholder for the API host and a dummy session ID for the example.
src/components/wialon/WialonFeulsettings.tsx:// Replace these with your actual values.
src/components/wialon/WialonFeulsettings.tsx:const API_HOST = 'https://hst-api.wialon.com';
src/components/wialon/WialonFeulsettings.tsx:// --- Type Definitions ---
src/components/wialon/WialonFeulsettings.tsx:// Define the structure of the API responses and request parameters for better type safety.
src/components/wialon/WialonFeulsettings.tsx:// --- Custom Hook for a generic API Call ---
src/components/wialon/WialonFeulsettings.tsx:// This hook encapsulates the logic for making API requests and managing state.
src/components/wialon/WialonFeulsettings.tsx:// It handles loading, success, and error states for any given service call.
src/components/wialon/WialonFeulsettings.tsx:    // Construct the API URL.
src/components/wialon/WialonFeulsettings.tsx:      // Check for errors in the response body (common in some APIs).
src/components/wialon/WialonFeulsettings.tsx:// --- Custom Hook for Fuel Settings ---
src/components/wialon/WialonFeulsettings.tsx:// This hook specifically handles the get_fuel_settings API call.
src/components/wialon/WialonFeulsettings.tsx:// --- React App Component ---
src/components/wialon/WialonFeulsettings.tsx:  const [itemId, setItemId] = useState<number>(123456789); // Placeholder itemId
src/components/wialon/WialonFeulsettings.tsx:  // States for the fuel filling form
src/components/wialon/WialonFeulsettings.tsx:    x: -74.0060, // Longitude
src/components/wialon/WialonFeulsettings.tsx:    y: 40.7128,  // Latitude
src/components/wialon/WialonFeulsettings.tsx:  // Use the custom hook for each API call
src/components/wialon/WialonFeulsettings.tsx:        {/* --- Fuel Filling Registration Form --- */}
src/components/wialon/WialonFeulsettings.tsx:        {/* --- Fuel Settings Display --- */}
src/components/wialon/WialonUnitDetails.tsx:  unit?: ExtendedWialonUnit | null; // Optional override for selected unit
src/components/wialon/WialonUnitDetails.tsx:  // Format timestamp to readable date/time
src/components/wialon/WialonUnitDetails.tsx:  // Determine connection status
src/components/wialon/WialonUnitDetails.tsx:  // Format speed
src/components/wialon/WialonUnitDetails.tsx:              // Navigate to history view or open modal
src/components/wialon/WialonUnitDetails.tsx:              // Implementation depends on your application structure
src/components/wialon/WialonLoginPanel.tsx:// Corrected: Import path now points to 'wialonAuth2' as specified.
src/components/wialon/WialonLoginPanel.tsx:// Corrected: Import path now points to 'wialonConfig2' as specified.
src/components/wialon/WialonLoginPanel.tsx:// Use the token from environment variables or fallback to default
src/components/wialon/WialonLoginPanel.tsx:  // Load Wialon SDK on component mount
src/components/wialon/WialonLoginPanel.tsx:        // Ensure loadWialonSDK is properly defined and handles potential errors
src/components/wialon/WialonLoginPanel.tsx:        // Check if already logged in
src/components/wialon/WialonLoginPanel.tsx:        // Add type annotation for err
src/components/wialon/WialonLoginPanel.tsx:  }, []); // Empty dependency array means this effect runs once on mount
src/components/wialon/WialonLoginPanel.tsx:  /**
src/components/wialon/WialonLoginPanel.tsx:  /**
src/components/wialon/WialonLoginPanel.tsx:      // Ensure loginWialon returns a string message or handles errors appropriately
src/components/wialon/WialonLoginPanel.tsx:      // Add type annotation for err
src/components/wialon/WialonLoginPanel.tsx:  /**
src/components/wialon/WialonLoginPanel.tsx:      // Ensure logoutWialon returns a string message or handles errors appropriately
src/components/wialon/WialonLoginPanel.tsx:      // Add type annotation for err
src/components/wialon/WialonLoginPanel.tsx:  /**
src/components/wialon/WialonLoginPanel.tsx:  /**
src/components/wialon/WialonLoginPanel.tsx:    // Ensure openWialonLogin correctly handles opening a new window/tab
src/components/wialon/WialonGeofenceManager.tsx:// Default map center (Johannesburg)
src/components/wialon/WialonGeofenceManager.tsx:/**
src/components/wialon/WialonGeofenceManager.tsx:  // SDK and session management
src/components/wialon/WialonGeofenceManager.tsx:  // Component state
src/components/wialon/WialonGeofenceManager.tsx:  // Geofence hook with enhanced error handling
src/components/wialon/WialonGeofenceManager.tsx:  // New geofence state
src/components/wialon/WialonGeofenceManager.tsx:  // Custom selectResource handler to update local state
src/components/wialon/WialonGeofenceManager.tsx:  // Aggregate errors from different sources
src/components/wialon/WialonGeofenceManager.tsx:  // Map click handler for circle creation
src/components/wialon/WialonGeofenceManager.tsx:            radius: 500 // Default radius
src/components/wialon/WialonGeofenceManager.tsx:  /**
src/components/wialon/WialonGeofenceManager.tsx:    // Clear previous errors
src/components/wialon/WialonGeofenceManager.tsx:      // Validate required inputs
src/components/wialon/WialonGeofenceManager.tsx:      // Validate window.wialon is available
src/components/wialon/WialonGeofenceManager.tsx:      // Get resource object
src/components/wialon/WialonGeofenceManager.tsx:      // Validate resource object
src/components/wialon/WialonGeofenceManager.tsx:      // Validate createZone method exists
src/components/wialon/WialonGeofenceManager.tsx:      // Create the zone with proper error handling
src/components/wialon/WialonGeofenceManager.tsx:          t: 3, // circle type
src/components/wialon/WialonGeofenceManager.tsx:          f: 0, // flags
src/components/wialon/WialonGeofenceManager.tsx:          c: 2566914048, // color
src/components/wialon/WialonGeofenceManager.tsx:              // Get error text if available
src/components/wialon/WialonGeofenceManager.tsx:              // Success case
src/components/wialon/WialonGeofenceManager.tsx:              setNewCircle(null); // Reset selection
src/components/wialon/WialonGeofenceManager.tsx:              setName(""); // Clear name field
src/components/wialon/WialonGeofenceManager.tsx:      {/* Status indicators */}
src/components/wialon/WialonGeofenceManager.tsx:      {/* Error display */}
src/components/wialon/WialonGeofenceManager.tsx:      {/* Resource selector */}
src/components/wialon/WialonGeofenceManager.tsx:      {/* Map display */}
src/components/wialon/WialonGeofenceManager.tsx:            attribution='&copy; <a href="https://osm.org">OpenStreetMap</a>'
src/components/wialon/WialonGeofenceManager.tsx:            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
src/components/wialon/WialonGeofenceManager.tsx:          {/* Render existing geofences with safety checks */}
src/components/wialon/WialonGeofenceManager.tsx:            // Validate zone before rendering
src/components/wialon/WialonGeofenceManager.tsx:              // Circle type geofence
src/components/wialon/WialonGeofenceManager.tsx:              // Polygon type geofence
src/components/wialon/WialonGeofenceManager.tsx:              // Polyline type geofence
src/components/wialon/WialonGeofenceManager.tsx:          {/* Show new circle being created */}
src/components/wialon/WialonGeofenceManager.tsx:      {/* Geofence creation form */}
src/components/wialon/WialonGeofenceManager.tsx:// Provide both named and default exports
src/components/wialon/WialonGeofenceManager.tsx:// This component manages Wialon geofences with defensive coding patterns to prevent property access errors
src/components/wialon/WialonConfigPage.tsx:/**
src/components/wialon/WialonStatus.tsx:    // We assume the useWialonConnection hook provides a token or a `isReady` state.
src/components/wialon/WialonStatus.tsx:    // The status object should be updated to include the token.
src/components/wialon/WialonStatus.tsx:    // Pass the token from the connection status to the useWialonUnits hook
src/components/wialon/WialonStatus.tsx:    // We use a conditional call to avoid fetching units until the token is available.
src/components/wialon/WialonConfig.tsx:  /** Optional company ID to load/save config for a specific company */
src/components/wialon/WialonConfig.tsx:/**
src/components/wialon/WialonConfig.tsx:    baseUrl: "https://hosting.wialon.com/",
src/components/wialon/WialonConfig.tsx:  // Languages supported by Wialon
src/components/wialon/WialonConfig.tsx:  // Load configuration from Firestore
src/components/wialon/WialonConfig.tsx:        // Dynamically import Firebase modules
src/components/wialon/WialonConfig.tsx:  // Save configuration to Firestore
src/components/wialon/WialonConfig.tsx:      // Validate required fields
src/components/wialon/WialonConfig.tsx:      // Format base URL to ensure it ends with '/'
src/components/wialon/WialonConfig.tsx:      // Dynamically import Firebase modules
src/components/wialon/WialonConfig.tsx:      // Reset success message after 3 seconds
src/components/wialon/WialonConfig.tsx:  // Add a handler for toggling token visibility
src/components/wialon/WialonConfig.tsx:          placeholder="https://hosting.wialon.com/"
src/components/wialon/WialonConfig.tsx:          The base URL for your Wialon instance (e.g., https://hosting.wialon.com/)
src/components/Models/maps/RouteDrawer.tsx:/**
src/components/Models/maps/RouteDrawer.tsx:  // Default route options
src/components/Models/maps/RouteDrawer.tsx:  // Merge default and provided options
src/components/Models/maps/RouteDrawer.tsx:  // Effect to calculate route when inputs change
src/components/Models/maps/RouteDrawer.tsx:    // Convert waypoints to Google Maps waypoint format
src/components/Models/maps/RouteDrawer.tsx:    // Create directions request
src/components/Models/maps/RouteDrawer.tsx:    // Call DirectionsService with proper type annotation
src/components/Models/maps/RouteDrawer.tsx:  // Render the route on the map
src/components/Models/maps/RouteDrawer.tsx:            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
src/components/Models/Diesel/DieselNormsModal.tsx:  litresPerHour?: number; // For reefer units
src/components/Models/Diesel/DieselNormsModal.tsx:  // Load norms from localStorage when modal opens
src/components/Models/Diesel/DieselNormsModal.tsx:        // Truck norms
src/components/Models/Diesel/DieselNormsModal.tsx:        // Reefer norms
src/components/Models/Diesel/DieselEditModal.tsx:  // Find the diesel record
src/components/Models/Diesel/DieselEditModal.tsx:  // Initialize form with record data
src/components/Models/Diesel/DieselEditModal.tsx:  // Helper function to handle events from form controls
src/components/Models/Diesel/DieselEditModal.tsx:    // Clear errors
src/components/Models/Diesel/DieselEditModal.tsx:    // Auto-calculate when relevant fields change
src/components/Models/Diesel/DieselEditModal.tsx:    // Validate numbers
src/components/Models/Diesel/DieselEditModal.tsx:    // For reefer units, validate hours operated
src/components/Models/Diesel/DieselEditModal.tsx:      // For regular units, validate KM reading
src/components/Models/Diesel/DieselEditModal.tsx:      // Validate KM readings
src/components/Models/Diesel/DieselEditModal.tsx:      // Calculate derived values
src/components/Models/Diesel/DieselEditModal.tsx:      // Prepare the updated record
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Header Info */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Auto-Calculate Toggle */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Form Fields */}
src/components/Models/Diesel/DieselEditModal.tsx:            disabled={record.tripId !== undefined} // Disable if linked to trip
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Calculation Preview */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Reefer Unit Calculation Preview */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Trip Linkage Info */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Validation Warnings */}
src/components/Models/Diesel/DieselEditModal.tsx:        {/* Actions */}
src/components/Models/Diesel/DieselImportModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Diesel/DieselImportModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Diesel/DieselImportModal.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Models/Diesel/DieselImportModal.tsx:// MOCK DATA AND TYPES INSTEAD OF EXTERNAL FILE
src/components/Models/Diesel/DieselImportModal.tsx:// Preview rows parsed from CSV
src/components/Models/Diesel/DieselImportModal.tsx:  // Using mock context since the real one is not available
src/components/Models/Diesel/DieselImportModal.tsx:  // Handler for downloading template (invokes generator below)
src/components/Models/Diesel/DieselImportModal.tsx:  // Full import handler implemented below (renamed from handleUpload)
src/components/Models/Diesel/DieselImportModal.tsx:          setPreviewData(data.slice(0, 3)); // Show first 3 rows
src/components/Models/Diesel/DieselImportModal.tsx:      // Convert to app diesel records with normalized types/derived fields
src/components/Models/Diesel/DieselImportModal.tsx:        // Parse numbers safely
src/components/Models/Diesel/DieselImportModal.tsx:        // Derived values
src/components/Models/Diesel/DieselImportModal.tsx:        // Probe
src/components/Models/Diesel/DieselImportModal.tsx:        // Currency normalization to union
src/components/Models/Diesel/DieselImportModal.tsx:        // Fix: Use a safe fallback for row.date, and handle potential undefined (THIS IS THE FIX!)
src/components/Models/Diesel/DieselImportModal.tsx:      // Import records using context function
src/components/Models/Diesel/DieselImportModal.tsx:      // Close modal after a short delay
src/components/Models/Diesel/DieselImportModal.tsx:        {/* Connection Status Warning */}
src/components/Models/Diesel/DieselImportModal.tsx:          {/* Data Preview */}
src/components/Models/Diesel/DieselDebriefModal.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/Models/Diesel/DieselDebriefModal.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Models/Diesel/DieselDebriefModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Diesel/DieselDebriefModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Diesel/DieselDebriefModal.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Create a new PDF document
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Add title
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Add summary
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Individual record pages
src/components/Models/Diesel/DieselDebriefModal.tsx:      // Check if we need a new page
src/components/Models/Diesel/DieselDebriefModal.tsx:      // Record header
src/components/Models/Diesel/DieselDebriefModal.tsx:      // Record details
src/components/Models/Diesel/DieselDebriefModal.tsx:      // Efficiency metrics
src/components/Models/Diesel/DieselDebriefModal.tsx:      // Debrief information
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Save the PDF
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Check if all records have notes and dates
src/components/Models/Diesel/DieselDebriefModal.tsx:    // Here you would typically save the debrief data to Firebase
src/components/Models/Diesel/DieselDebriefModal.tsx:    // For now, we'll just close the modal to simulate completion
src/components/Models/Diesel/DieselDebriefModal.tsx:        {/* Summary Cards */}
src/components/Models/Diesel/DieselDebriefModal.tsx:        {/* Records */}
src/components/Models/Diesel/DieselDebriefModal.tsx:        {/* Footer */}
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Calculate discrepancy when probe reading changes
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Determine if the vehicle has a probe system
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Validation function
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Handle form submission
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:      // Determine if the reading is verified based on discrepancy
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:      // If discrepancy is less than 5%, consider it verified
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:      // Update the diesel record
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:      // Upload photo evidence if available
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        // In a real app, we would upload the file to storage here
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        // For now, we'll just create an object URL as a placeholder
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:      // Add audit log
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        performedBy: "Current User", // You would get this from auth
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Handle file upload
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:  // Get status class based on discrepancy percentage
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        {/* Header information */}
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        {/* Probe verification form */}
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:                  accept="image/*"
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        {/* Information box */}
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        {/* Submit error message */}
src/components/Models/Diesel/EnhancedProbeVerificationModal.tsx:        {/* Action buttons */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Reset form when modal opens or selected record changes
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // These utility functions are commented out as they're not currently in use
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // but may be needed for future UI enhancements
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  /* Functions removed as they're not currently being used:
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Handle form submission
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        debriefSignedBy: "Current User", // In a real app, use the logged-in user
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Reset form for the next record
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Remove the completed record from the list if there are more
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Generate PDF report
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Create a new PDF document
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Add title
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Add summary section
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Create table data for records
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        // Calculate performance indicators
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Add table
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Individual records with debrief information
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        // Check if we need a new page
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:            // Split long notes into multiple lines
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        yPos += 10; // Add some space between records
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Save the PDF
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Generate CSV export
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Create header row
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Add data rows
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        // Format notes and escape commas
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:      // Create download link
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Root cause options
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:  // Action taken options
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        {/* Success Message */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:        {/* Error Message */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:            {/* Record Selection */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:            {/* Summary Stats */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:            {/* Export Options */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:                {/* Record Details */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:                  {/* Performance Analysis */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:                {/* Debrief Form */}
src/components/Models/Diesel/EnhancedDieselDebriefModal.tsx:                {/* Suggested Improvements */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:// ─── // ─── UI Components ───────────────────────────────────────────────────
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    tripId: "", // Link to trip
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    currency: "ZAR" as "USD" | "ZAR", // Add currency field with default value
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    isReeferUnit: false, // Add flag for reefer units
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    linkedHorseId: "", // For reefer units
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    hoursOperated: "", // For reefer units - hours of operation
src/components/Models/Diesel/ManualDieselEntryModal.tsx:  // Get available trips for the selected fleet
src/components/Models/Diesel/ManualDieselEntryModal.tsx:  // Get available horses for reefer units
src/components/Models/Diesel/ManualDieselEntryModal.tsx:  // Check for possible duplicates when fields change
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Find records with the same fleet and date
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    // Clear errors
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    // Auto-calculate when relevant fields change
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    // Validate numbers
src/components/Models/Diesel/ManualDieselEntryModal.tsx:    // For reefer units, validate hours operated
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // For regular units, validate KM reading
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Validate KM readings
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Calculate derived values
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Create a unique ID for the diesel record
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Prepare the record data
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Add trip ID for regular diesel or linked horse ID for reefer units
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Prepare success message
src/components/Models/Diesel/ManualDieselEntryModal.tsx:          // If the horse is linked to a trip, mention that costs will be allocated
src/components/Models/Diesel/ManualDieselEntryModal.tsx:      // Reset form
src/components/Models/Diesel/ManualDieselEntryModal.tsx:  // Update isReeferUnit when fleet number changes
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Header Info */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Auto-Calculate Toggle */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Reefer Unit Toggle */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Form Fields */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:            filterType={formData.isReeferUnit ? "Reefer" : "Truck"} // Filter by vehicle type
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Calculation Preview */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Reefer Unit Calculation Preview */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Reefer Unit Info */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Possible Duplicates Warning */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Trip Linkage Info */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Horse Linkage Info */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Validation Warnings */}
src/components/Models/Diesel/ManualDieselEntryModal.tsx:        {/* Actions */}
src/components/Models/Diesel/DieselModal.tsx:// src/components/Models/Diesel/DieselModal.tsx
src/components/Models/Diesel/DieselModal.tsx:// If you have a UI kit barrel, swap these for your components
src/components/Models/Diesel/DieselModal.tsx:  /** If provided -> edit mode. If omitted -> create mode. */
src/components/Models/Diesel/DieselModal.tsx:    // prefer Timestamp (initial.date), fall back to initial.dateISO
src/components/Models/Diesel/DieselModal.tsx:    // If initial changes while open, sync (rare)
src/components/Models/Diesel/DieselModal.tsx:        // send both, service will normalize to Timestamp
src/components/Models/Diesel/DieselModal.tsx:        // optional metadata left undefined unless you capture them in the UI
src/components/Models/Diesel/DieselModal.tsx:/** Tiny label + control wrapper */
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // States for real-time sensor data
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Removed: const [useSensorData, setUseSensorData] = useState(true);
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Find the diesel record
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Fetch sensor data when modal opens
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // eslint-disable-next-line react-hooks/exhaustive-deps
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Reset form when modal opens with new record
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // If we have sensor data and it's recent, use it as the default
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        // Add note about using sensor data
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        // Otherwise use existing probe reading if available
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Calculate discrepancy if probe reading exists
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // eslint-disable-next-line react-hooks/exhaustive-deps
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Update discrepancy when probe reading changes
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // eslint-disable-next-line react-hooks/exhaustive-deps
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Check if this fleet has a probe
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Fetch real-time sensor data from Wialon
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // If the data is not recent, show a warning
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Update discrepancy calculation
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Handle probe reading change
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // Clear error for this field
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Handle witness name change
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // Clear error for this field
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Handle verification notes change
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // Clear error for this field
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Toggle between sensor data and manual entry
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Switching to manual mode
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Switching back to sensor data
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        // Update notes
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Validate form
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // If discrepancy is large (more than 10%), require notes and witness
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Handle form submission
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Add information about sensor data to notes if it was used
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Update the diesel record
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        probeVerifiedBy: "Current User", // In a real app, use the logged-in user
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        // In a real implementation, you would upload the photo evidence and store the URL
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        probePhotoUrl: photoEvidence ? "https://example.com/photo-evidence.jpg" : undefined,
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        // Add information about sensor data if it was used
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Add audit log for serious discrepancies
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:          user: "Current User", // Use logged-in user in real app
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:      // Close modal and notify user
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:  // Get status class based on discrepancy
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:    // Percentage discrepancy
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Diesel Record Details */}
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Real-time Sensor Data Section */}
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Verification Form */}
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:                accept="image/*"
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Verification Guidelines */}
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Form Errors */}
src/components/Models/Diesel/AutomaticProbeVerificationModal.tsx:        {/* Form Actions */}
src/components/Models/Driver/PredictiveModels.tsx:// Define types
src/components/Models/Driver/PredictiveModels.tsx:  // Fetch predictive models from Firestore
src/components/Models/Driver/PredictiveModels.tsx:        // If models exist, select the first one by default and fetch its data
src/components/Models/Driver/PredictiveModels.tsx:            setSelectedModel(firstModel); // <-- no undefined passed
src/components/Models/Driver/PredictiveModels.tsx:            await fetchPredictions(firstModel.id); // <-- safe: firstModel is defined
src/components/Models/Driver/PredictiveModels.tsx:            await fetchInsights(firstModel.id);    // <-- safe: firstModel is defined
src/components/Models/Driver/PredictiveModels.tsx:            // Defensive: satisfy setter contract if index access ever changed
src/components/Models/Driver/PredictiveModels.tsx:  // Fetch predictions for selected model
src/components/Models/Driver/PredictiveModels.tsx:      // Update the selected model with predictions
src/components/Models/Driver/PredictiveModels.tsx:  // Fetch insights for selected model
src/components/Models/Driver/PredictiveModels.tsx:  // Handle model selection change
src/components/Models/Driver/PredictiveModels.tsx:      // Defensively satisfy the setter contract if not found
src/components/Models/Driver/PredictiveModels.tsx:  // Format predictions for chart display
src/components/Models/Driver/PredictiveModels.tsx:  // Format predictions for accuracy analysis
src/components/Models/Driver/PredictiveModels.tsx:  // Mock data for demonstration
src/components/Models/Driver/PredictiveModels.tsx:    // Find the insight element
src/components/Models/Driver/PredictiveModels.tsx:    // Find the matching insight
src/components/Models/Driver/PredictiveModels.tsx:    // In a real implementation, this would navigate to a detailed view
src/components/Models/Driver/PredictiveModels.tsx:    // or open a modal with action plan details
src/components/Models/Driver/PredictiveModels.tsx:    // For now, we'll implement a simple action based on the insight type
src/components/Models/Driver/PredictiveModels.tsx:      // Create a dynamic action based on insight severity
src/components/Models/Driver/PredictiveModels.tsx:          // High priority - navigate to dedicated page (would use react-router in real implementation)
src/components/Models/Driver/PredictiveModels.tsx:          // Medium priority - fetch and display additional data
src/components/Models/Driver/PredictiveModels.tsx:          // Low priority - just show info in a toast/notification system
src/components/Models/Driver/PredictiveModels.tsx:      // Track the user interaction for analytics
src/components/Models/Driver/PredictiveModels.tsx:  // Helper functions that would be implemented elsewhere in the component
src/components/Models/Driver/PredictiveModels.tsx:    // In a real implementation, this would fetch data from Firebase
src/components/Models/Driver/PredictiveModels.tsx:    // Simulate an API call
src/components/Models/Driver/PredictiveModels.tsx:      // This would typically update some state to show a modal or details panel
src/components/Models/Driver/PredictiveModels.tsx:    // In a real implementation, this would use a proper notification system
src/components/Models/Driver/PredictiveModels.tsx:    // Basic notification
src/components/Models/Driver/PredictiveModels.tsx:    // Remove after 3 seconds
src/components/Models/Driver/PredictiveModels.tsx:    // In a real implementation, this would send data to an analytics service
src/components/Models/Driver/PredictiveModels.tsx:          {/* Model Overview */}
src/components/Models/Driver/PredictiveModels.tsx:          {/* Insights Panel */}
src/components/Models/Driver/PredictiveModels.tsx:          {/* Prediction Charts */}
src/components/Models/Driver/PredictiveModels.tsx:            {/* Predictions Chart */}
src/components/Models/Driver/PredictiveModels.tsx:            {/* Prediction Accuracy */}
src/components/Models/Driver/PredictiveModels.tsx:          {/* Predictions Table */}
src/components/Models/Tyre/TyreFormModal.tsx:// Use canonical shared tyre types (string unions + enum for store location)
src/components/Models/Tyre/TyreFormModal.tsx:  TyrePosition, // Add this import
src/components/Models/Tyre/TyreFormModal.tsx:// Local typed value arrays for selects and validation
src/components/Models/Tyre/TyreFormModal.tsx:  // Reference data (brands, sizes, patterns)
src/components/Models/Tyre/TyreFormModal.tsx:  // Helper function to get current date string
src/components/Models/Tyre/TyreFormModal.tsx:    return dateStr || new Date().toLocaleDateString("en-CA"); // fallback
src/components/Models/Tyre/TyreFormModal.tsx:  // Serialiseer init size na string (bv. "295/80R22.5") as daar initialData is
src/components/Models/Tyre/TyreFormModal.tsx:  // Form state
src/components/Models/Tyre/TyreFormModal.tsx:  // Section management
src/components/Models/Tyre/TyreFormModal.tsx:  // Patterns update
src/components/Models/Tyre/TyreFormModal.tsx:  // Positions update
src/components/Models/Tyre/TyreFormModal.tsx:      // Corrected: Ensure formData.type is cast to TyreType as expected by getPositionsForVehicleType
src/components/Models/Tyre/TyreFormModal.tsx:  // Size parse
src/components/Models/Tyre/TyreFormModal.tsx:  // Handlers
src/components/Models/Tyre/TyreFormModal.tsx:    // Handle string to enum conversion for specific fields if necessary
src/components/Models/Tyre/TyreFormModal.tsx:    // This is important for Select components where the 'value' will be a string
src/components/Models/Tyre/TyreFormModal.tsx:            [child as string]: parsedValue, // Use parsedValue here
src/components/Models/Tyre/TyreFormModal.tsx:        [name as string]: parsedValue, // Use parsedValue here
src/components/Models/Tyre/TyreFormModal.tsx:  // Validation
src/components/Models/Tyre/TyreFormModal.tsx:      // <-- Use enum member
src/components/Models/Tyre/TyreFormModal.tsx:  // Submission
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Section Navigation */}
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Basic Section */}
src/components/Models/Tyre/TyreFormModal.tsx:                value={safeString(formData.brand)} // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:                value={safeString(selectedSize)} // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:                value={safeString(formData.pattern)} // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:                name="type" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:              name="location" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Technical Section */}
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Installation Section */}
src/components/Models/Tyre/TyreFormModal.tsx:                name="mountStatus" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:                    name="installation.position" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Condition & Status Section */}
src/components/Models/Tyre/TyreFormModal.tsx:                name="status" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:                name="condition.status" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:              name="notes" // Added name prop
src/components/Models/Tyre/TyreFormModal.tsx:        {/* Actions */}
src/components/Models/Tyre/MoveTyreModal.tsx:    // Clone entry
src/components/Models/Tyre/MoveTyreModal.tsx:    // Append history
src/components/Models/Invoice/InvoiceGenerationModal.tsx:  const [taxRate, setTaxRate] = useState(15); // Default tax rate (%)
src/components/Models/Invoice/InvoiceGenerationModal.tsx:  // Calculate totals
src/components/Models/Invoice/InvoiceGenerationModal.tsx:  // Initialize invoice items when modal opens
src/components/Models/Invoice/InvoiceGenerationModal.tsx:      // Add parts as invoice items
src/components/Models/Invoice/InvoiceGenerationModal.tsx:      // Add labor as invoice items
src/components/Models/Invoice/InvoiceGenerationModal.tsx:  // Handle form submission
src/components/Models/Invoice/InvoiceGenerationModal.tsx:  // Update tax rate
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:  // Calculate timeline discrepancies
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:    // Single update to avoid race conditions; auto-calc due date when invoiceDate changes
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:    // Check for required documents
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Trip Summary */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Financial Summary */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Timeline Validation */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Delay Reasons Summary */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Additional Costs */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Invoice Details */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Required Documents */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Submission Summary */}
src/components/Models/Invoice/InvoiceSubmissionModal.tsx:        {/* Actions */}
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:// ─── Utils ───────────────────────────────────────────────────────
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:      followUpDate: formData.followUpDate!, // Add non-null assertion since we validate it
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:        {/* Invoice Summary */}
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:        {/* Previous Follow-ups */}
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:        {/* Follow-up Form */}
src/components/Models/Invoice/InvoiceFollowUpModal.tsx:        {/* Actions */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/Models/Invoice/PaymentUpdateModal.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Models/Invoice/PaymentUpdateModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Invoice/PaymentUpdateModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Invoice/PaymentUpdateModal.tsx:// ─── Utils ───────────────────────────────────────────────────────
src/components/Models/Invoice/PaymentUpdateModal.tsx:        {/* Invoice Summary */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:        {/* Current Payment Status */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:        {/* Payment Update Form */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:              {/* Payment Summary */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:              {/* Status Indicators */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:        {/* Follow-up History Preview */}
src/components/Models/Invoice/PaymentUpdateModal.tsx:        {/* Actions */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:        {/* Trip Summary */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:        {/* Status Update Info */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:        {/* Notes */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:        {/* Error Message */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:        {/* Actions */}
src/components/Models/Trips/TripStatusUpdateModal.tsx:  shippedAt?: string; // ISO date string or undefined if not shipped yet
src/components/Models/Trips/TripStatusUpdateModal.tsx:  // add other properties as needed
src/components/Models/Trips/AddTripModal.tsx:// Interface definitions from your original code
src/components/Models/Trips/AddTripModal.tsx:  // Form state
src/components/Models/Trips/AddTripModal.tsx:  // Data from Firestore
src/components/Models/Trips/AddTripModal.tsx:  // Fetch data from Firestore
src/components/Models/Trips/AddTripModal.tsx:        // Fetch clients
src/components/Models/Trips/AddTripModal.tsx:        // Fetch drivers
src/components/Models/Trips/AddTripModal.tsx:        // Fetch fleet
src/components/Models/Trips/AddTripModal.tsx:        // Fetch routes
src/components/Models/Trips/AddTripModal.tsx:  // Update distance when route changes
src/components/Models/Trips/AddTripModal.tsx:            {/* Client Type */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Fleet Number */}
src/components/Models/Trips/AddTripModal.tsx:            {/* External Client - Only show if client type is External */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Client */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Driver */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Route */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Start Date */}
src/components/Models/Trips/AddTripModal.tsx:            {/* End Date */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Distance (KM) - Auto-populated based on route selection */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Base Revenue */}
src/components/Models/Trips/AddTripModal.tsx:            {/* Revenue Currency */}
src/components/Models/Trips/AddTripModal.tsx:          {/* Trip Notes */}
src/components/Models/Trips/AddTripModal.tsx:          {/* Trip Description */}
src/components/Models/Trips/AddTripModal.tsx:          {/* Buttons */}
src/components/Models/Trips/CompletedTripEditModal.tsx:    // Check if any changes were made
src/components/Models/Trips/CompletedTripEditModal.tsx:    // Identify changed fields
src/components/Models/Trips/CompletedTripEditModal.tsx:    // Create edit records for each change
src/components/Models/Trips/CompletedTripEditModal.tsx:        editedBy: "Current User", // In real app, use actual user
src/components/Models/Trips/CompletedTripEditModal.tsx:      // Update trip with new data and edit history
src/components/Models/Trips/CompletedTripEditModal.tsx:        {/* Warning Alert */}
src/components/Models/Trips/CompletedTripEditModal.tsx:        {/* Edit Reason - Required */}
src/components/Models/Trips/CompletedTripEditModal.tsx:        {/* Trip Data Form */}
src/components/Models/Trips/CompletedTripEditModal.tsx:        {/* Existing Edit History */}
src/components/Models/Trips/CompletedTripEditModal.tsx:        {/* Actions */}
src/components/Models/Trips/SystemCostsModal.tsx:  // Calculate trip duration in days
src/components/Models/Trips/SystemCostsModal.tsx:    return diffDays || 1; // Ensure at least 1 day
src/components/Models/Trips/SystemCostsModal.tsx:  // Per-kilometer costs
src/components/Models/Trips/SystemCostsModal.tsx:  // Per-day fixed costs
src/components/Models/Trips/SystemCostsModal.tsx:  // Calculate total system costs
src/components/Models/Trips/SystemCostsModal.tsx:      // Prepare cost entries
src/components/Models/Trips/SystemCostsModal.tsx:        // Per-kilometer costs
src/components/Models/Trips/SystemCostsModal.tsx:              // Provide calculation & context in notes for auditing
src/components/Models/Trips/SystemCostsModal.tsx:        // Per-day costs
src/components/Models/Trips/SystemCostsModal.tsx:      // Submit the costs
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Rate Information */}
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Trip Details */}
src/components/Models/Trips/SystemCostsModal.tsx:                xmlns="http://www.w3.org/2000/svg"
src/components/Models/Trips/SystemCostsModal.tsx:                xmlns="http://www.w3.org/2000/svg"
src/components/Models/Trips/SystemCostsModal.tsx:                xmlns="http://www.w3.org/2000/svg"
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Per-Kilometer Costs */}
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Per-Day Fixed Costs */}
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Total System Costs */}
src/components/Models/Trips/SystemCostsModal.tsx:        {/* Action Buttons */}
src/components/Models/Trips/TripDeletionModal.tsx:// ─── React & State ───────────────────────────────────────────────
src/components/Models/Trips/TripDeletionModal.tsx:// ─── Types & Constants ───────────────────────────────────────────
src/components/Models/Trips/TripDeletionModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Trips/TripDeletionModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Trips/TripDeletionModal.tsx:      deletedBy: "Current User", // In real app, use actual user
src/components/Models/Trips/TripDeletionModal.tsx:  // Check if user has permission to delete
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Critical Warning */}
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Trip Summary */}
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Deletion Reason */}
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Confirmation */}
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Data Retention Notice */}
src/components/Models/Trips/TripDeletionModal.tsx:        {/* Actions */}
src/components/Models/Trips/TripCostEntryModal.tsx:// Internal form state uses a fully-required shape for controlled inputs
src/components/Models/Trips/TripCostEntryModal.tsx:  // Available cost categories
src/components/Models/Trips/TripCostEntryModal.tsx:  // Sub-types will depend on the selected category
src/components/Models/Trips/TripCostEntryModal.tsx:    // Clear any error for this field
src/components/Models/Trips/TripCostEntryModal.tsx:      // Clear missing doc reason if files are provided
src/components/Models/Trips/TripCostEntryModal.tsx:    // Required fields
src/components/Models/Trips/TripCostEntryModal.tsx:    // Document requirements
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Cost Category */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Sub-Cost Type */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Currency */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Amount */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Reference Number */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Date */}
src/components/Models/Trips/TripCostEntryModal.tsx:        {/* Notes */}
src/components/Models/Trips/TripCostEntryModal.tsx:        {/* Document Attachment */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Missing Documentation Reason */}
src/components/Models/Trips/TripCostEntryModal.tsx:          {/* Manual Flag */}
src/components/Models/Trips/TripCostEntryModal.tsx:        {/* Action Buttons */}
src/components/Models/Trips/LoadImportModal.tsx:// Fleet vehicles data used for registration -> fleet number mapping
src/components/Models/Trips/LoadImportModal.tsx:  // Add more mappings as needed
src/components/Models/Trips/LoadImportModal.tsx:// Create a fleet master mapping object for quick lookups
src/components/Models/Trips/LoadImportModal.tsx:    // Generate preview
src/components/Models/Trips/LoadImportModal.tsx:      // Create a preview format that's easier to display
src/components/Models/Trips/LoadImportModal.tsx:  // Parse CSV with position-based mapping instead of header-based
src/components/Models/Trips/LoadImportModal.tsx:    // Skip the first row (headers) as requested
src/components/Models/Trips/LoadImportModal.tsx:      // Parse CSV values with respect to quotes
src/components/Models/Trips/LoadImportModal.tsx:      values.push(currentValue.trim()); // Don't forget the last value
src/components/Models/Trips/LoadImportModal.tsx:      // Only add if we have enough values
src/components/Models/Trips/LoadImportModal.tsx:      // Create fleet master mapping (using defined fleet vehicles)
src/components/Models/Trips/LoadImportModal.tsx:      // Track mapping results
src/components/Models/Trips/LoadImportModal.tsx:        // Map fields according to the position-based mapping provided
src/components/Models/Trips/LoadImportModal.tsx:        // Column 3 (index position) contains the registration number (AGZ1963)
src/components/Models/Trips/LoadImportModal.tsx:        // Look up fleet number in the mapping
src/components/Models/Trips/LoadImportModal.tsx:          // Try to get the fleet number from the mapping
src/components/Models/Trips/LoadImportModal.tsx:            // Use registration as fallback if no fleet number is found
src/components/Models/Trips/LoadImportModal.tsx:        // Build route from columns 12, 13, 14
src/components/Models/Trips/LoadImportModal.tsx:        // Handle load description
src/components/Models/Trips/LoadImportModal.tsx:        // Format dates to YYYY-MM-DD if they're in DD/MM/YYYY format
src/components/Models/Trips/LoadImportModal.tsx:          // Check if it's in DD/MM/YYYY format
src/components/Models/Trips/LoadImportModal.tsx:          return dateStr; // Return as is if not in expected format
src/components/Models/Trips/LoadImportModal.tsx:          clientName: row[6] || "", // Client name from column 6
src/components/Models/Trips/LoadImportModal.tsx:          baseRevenue: parseFloat(row[19] || "0"), // Revenue from column 19
src/components/Models/Trips/LoadImportModal.tsx:          revenueCurrency: "USD" as "USD" | "ZAR", // Always USD as specified, properly typed
src/components/Models/Trips/LoadImportModal.tsx:          startDate: formatDate(row[9] || ""), // Start date from column 9
src/components/Models/Trips/LoadImportModal.tsx:          endDate: formatDate(row[10] || ""), // End date from column 10
src/components/Models/Trips/LoadImportModal.tsx:          driverName: row[5] || "", // Driver name from column 5
src/components/Models/Trips/LoadImportModal.tsx:          distanceKm: parseFloat(row[17] || "0"), // Distance from column 17
src/components/Models/Trips/LoadImportModal.tsx:          clientType: "external" as "external" | "internal", // Explicitly type as union literal
src/components/Models/Trips/LoadImportModal.tsx:          status: "active" as const, // Ensure trips are set to active status
src/components/Models/Trips/LoadImportModal.tsx:          // Add metadata for tracking web-imported trips
src/components/Models/Trips/LoadImportModal.tsx:          loadRef: row[0] || "", // Load reference from web booking system
src/components/Models/Trips/LoadImportModal.tsx:      // Set mapping results
src/components/Models/Trips/LoadImportModal.tsx:      // Close modal after a short delay
src/components/Models/Trips/LoadImportModal.tsx:      // Close modal after a short delay if successful
src/components/Models/Trips/LoadImportModal.tsx:    // Create a sample row based on the required format
src/components/Models/Trips/LoadImportModal.tsx:      "LO1978/4765", // Load ref
src/components/Models/Trips/LoadImportModal.tsx:      "10215", // Field 2
src/components/Models/Trips/LoadImportModal.tsx:      "", // Field 3
src/components/Models/Trips/LoadImportModal.tsx:      "AGZ1963", // Registration
src/components/Models/Trips/LoadImportModal.tsx:      "AGK6951", // Field 5
src/components/Models/Trips/LoadImportModal.tsx:      "Enock Mukonyerwa", // Driver
src/components/Models/Trips/LoadImportModal.tsx:      "MARKETING", // Client
src/components/Models/Trips/LoadImportModal.tsx:      "1035/TPT/ADM/001", // Field 8
src/components/Models/Trips/LoadImportModal.tsx:      "Load Delivered", // Status
src/components/Models/Trips/LoadImportModal.tsx:      "07/06/2025", // Start date
src/components/Models/Trips/LoadImportModal.tsx:      "09/06/2025", // End date
src/components/Models/Trips/LoadImportModal.tsx:      "", // Field 12
src/components/Models/Trips/LoadImportModal.tsx:      "REZENDE - BV (BACK LOAD)", // Route part 1
src/components/Models/Trips/LoadImportModal.tsx:      "Harare", // Route part 2
src/components/Models/Trips/LoadImportModal.tsx:      "BV", // Route part 3
src/components/Models/Trips/LoadImportModal.tsx:      "65775", // Field 16
src/components/Models/Trips/LoadImportModal.tsx:      "66109", // Field 17
src/components/Models/Trips/LoadImportModal.tsx:      "334", // Distance (km)
src/components/Models/Trips/LoadImportModal.tsx:      "Per Km", // Field 19
src/components/Models/Trips/LoadImportModal.tsx:      "731.4600", // Revenue (USD)
src/components/Models/Trips/LoadImportModal.tsx:      "0.00", // Field 21
src/components/Models/Trips/LoadImportModal.tsx:      "1350 crates 30 bins", // Description
src/components/Models/Trips/LoadImportModal.tsx:      "Tanaka Mboto", // Field 23
src/components/Models/Trips/LoadImportModal.tsx:    // Create a header row (will be skipped during import, but useful for reference)
src/components/Models/Trips/LoadImportModal.tsx:        {/* Connection Status Warning */}
src/components/Models/Trips/LoadImportModal.tsx:        {/* Error Message */}
src/components/Models/Trips/LoadImportModal.tsx:        {/* Success Message */}
src/components/Models/Trips/LoadImportModal.tsx:        {/* Mapping Results */}
src/components/Models/Trips/LoadImportModal.tsx:        {/* Webhook Import Section */}
src/components/Models/Trips/LoadImportModal.tsx:          {/* Data Preview */}
src/components/Models/Trips/FleetFormModal.tsx:  // Initialize form state with either the provided fleet or default values
src/components/Models/Trips/FleetFormModal.tsx:  // Vehicle type options
src/components/Models/Trips/FleetFormModal.tsx:  // Status options
src/components/Models/Trips/FleetFormModal.tsx:  // Handle form field changes
src/components/Models/Trips/FleetFormModal.tsx:    // Clear any error for this field
src/components/Models/Trips/FleetFormModal.tsx:  // Validate the form before submission
src/components/Models/Trips/FleetFormModal.tsx:    // Required fields
src/components/Models/Trips/FleetFormModal.tsx:  // Handle form submission
src/components/Models/Trips/FleetFormModal.tsx:      // Create a full fleet object for saving
src/components/Models/Trips/FleetFormModal.tsx:      // Close the modal after successful save
src/components/Models/Trips/FleetFormModal.tsx:        {/* Form introduction */}
src/components/Models/Trips/FleetFormModal.tsx:        {/* Form fields */}
src/components/Models/Trips/FleetFormModal.tsx:        {/* Submission error message */}
src/components/Models/Trips/FleetFormModal.tsx:        {/* Form actions */}
src/components/Models/Trips/TripFormModal.tsx:// Define sensor result interface locally since it's not exported from wialon-sensors
src/components/Models/Trips/TripFormModal.tsx:        // Update existing trip
src/components/Models/Trips/TripFormModal.tsx:        // Add new trip
src/components/Models/Trips/TripFormModal.tsx:          additionalCosts: [], // Initialize additionalCosts as empty array
src/components/Models/Trips/TripFormModal.tsx:      // Close the modal after successful submission
src/components/Models/Trips/TripFormModal.tsx:      {/* Add sensor data fields to form */}
src/components/Models/Trips/TripLinkageModal.tsx:  // Get the diesel record
src/components/Models/Trips/TripLinkageModal.tsx:  // Check if it's a reefer unit
src/components/Models/Trips/TripLinkageModal.tsx:  // Get available trips for the selected fleet (for non-reefer units)
src/components/Models/Trips/TripLinkageModal.tsx:  // Get available horse diesel records (for reefer units)
src/components/Models/Trips/TripLinkageModal.tsx:  // Check if already linked
src/components/Models/Trips/TripLinkageModal.tsx:  // Reset selection when modal opens or diesel record changes
src/components/Models/Trips/TripLinkageModal.tsx:        // Regular diesel record - link to trip
src/components/Models/Trips/TripLinkageModal.tsx:        // Reefer unit - link to horse
src/components/Models/Trips/TripLinkageModal.tsx:        // Update the diesel record with the linked horse ID
src/components/Models/Trips/TripLinkageModal.tsx:        // If the horse is linked to a trip, create a cost entry
src/components/Models/Trips/TripLinkageModal.tsx:        // Remove trip linkage
src/components/Models/Trips/TripLinkageModal.tsx:        // Update the diesel record to remove the linked horse ID
src/components/Models/Trips/TripLinkageModal.tsx:        // If the horse is linked to a trip, remove the cost entry
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Diesel Record Info */}
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Current Linkage Status - For Regular Diesel */}
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Current Linkage Status - For Reefer Diesel */}
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Trip Selection - For Regular Diesel */}
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Horse Selection - For Reefer Diesel */}
src/components/Models/Trips/TripLinkageModal.tsx:        {/* Actions */}
src/components/Models/Trips/TripModel.ts:// TripModel.ts - Domain model for Trip Management
src/components/Models/Trips/TripModel.ts:// Re-export the types
src/components/Models/Trips/TripModel.ts:// Import Firebase functions related to trips
src/components/Models/Trips/TripModel.ts:// Re-export the functions
src/components/Models/Trips/TripModel.ts:// Additional helper methods for the domain
src/components/Models/Trips/TripModel.ts:  // Calculate estimated trip duration
src/components/Models/Trips/TripModel.ts:    // Placeholder: assume a nominal 300 km trip and estimate time by avgSpeed,
src/components/Models/Trips/TripModel.ts:    // with a small random jitter; clamp result between 2 and 8 hours.
src/components/Models/Trips/TripModel.ts:    const jitter = (Math.random() - 0.5); // +/- 0.5 hours
src/components/Models/Trips/TripModel.ts:  // Format trip duration from minutes to hours and minutes
src/components/Models/Trips/TripModel.ts:  // Calculate estimated fuel consumption
src/components/Models/Trips/TripModel.ts:    // avgConsumption in liters per 100km
src/components/Models/Trips/TripModel.ts:  // Generate a new trip number
src/components/Models/wialon/WialonLoginModal.tsx:      // Store login data
src/components/Models/wialon/WialonLoginModal.tsx:      // Call success callback if provided
src/components/Models/wialon/WialonLoginModal.tsx:          {/* Display user information */}
src/components/Models/wialon/useWialonVehicles.ts:// Add type imports if needed
src/components/Models/wialon/useWialonVehicles.ts:// import type { WialonUnit } from '@/types/wialon';
src/components/Models/wialon/useWialonVehicles.ts:  // Return vehicle tracking related functionality
src/components/Models/wialon/useWialonVehicles.ts:        // Implement location update logic
src/components/Models/wialon/GeofenceModal.tsx:  // Optional: Reset when opened/closed
src/components/Models/Flags/FlagResolutionModal.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/Models/Flags/FlagResolutionModal.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/Models/Flags/FlagResolutionModal.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/Models/Flags/FlagResolutionModal.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/Models/Flags/FlagResolutionModal.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/Models/Flags/FlagResolutionModal.tsx:            fileUrl: URL.createObjectURL(file), // TODO: Replace with actual upload URL
src/components/Models/Flags/FlagResolutionModal.tsx:        resolvedBy: "Current User", // Replace with actual user context
src/components/Models/Flags/FlagResolutionModal.tsx:        {/* Flagged Cost Summary */}
src/components/Models/Flags/FlagResolutionModal.tsx:        {/* Current Attachments */}
src/components/Models/Flags/FlagResolutionModal.tsx:        {/* Resolution Actions */}
src/components/Models/Flags/FlagResolutionModal.tsx:          {/* Amount Correction */}
src/components/Models/Flags/FlagResolutionModal.tsx:          {/* Notes Update */}
src/components/Models/Flags/FlagResolutionModal.tsx:          {/* Document Upload */}
src/components/Models/Flags/FlagResolutionModal.tsx:          {/* Resolution Comment */}
src/components/Models/Flags/FlagResolutionModal.tsx:        {/* Resolution Summary */}
src/components/Models/Flags/FlagResolutionModal.tsx:        {/* Actions */}
src/components/Models/Workshop/JobCardDetailModal.tsx:import { doc, setDoc } from "firebase/firestore"; // Import doc and setDoc
src/components/Models/Workshop/JobCardDetailModal.tsx:import { db } from "../../../firebase"; // Import Firestore
src/components/Models/Workshop/JobCardDetailModal.tsx:    // Save to Firestore
src/components/Models/Workshop/JobCardDetailModal.tsx:      onSave(updatedData); // Call parent save handler
src/components/Models/Workshop/JobCardDetailModal.tsx:      // Handle error, e.g., show a toast notification
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* General Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Tasks Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Parts Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Labor Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Additional Costs Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Attachments Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Remarks Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Time Log Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:            {/* Audit Log Tab */}
src/components/Models/Workshop/JobCardDetailModal.tsx:      {/* RCA Modal */}
src/components/Models/Workshop/RCAModal.tsx:  userName: string; // autofill for RCA Conducted By
src/components/Models/Workshop/InspectionDetailsModal.tsx:      // If you prefer, show a toast here
src/components/Models/Workshop/InspectionDetailsModal.tsx:        {/* Header */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:          {/* Top summary */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:          {/* Workflow */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:          {/* Notes */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:          {/* Defects */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:          {/* Footer actions */}
src/components/Models/Workshop/InspectionDetailsModal.tsx:/* ---------- Small helpers to keep JSX clean ---------- */
src/components/Models/Workshop/PurchaseOrderModal.tsx:  // Edit logic handlers
src/components/Models/Workshop/PurchaseOrderModal.tsx:  // Add/Edit/Delete line items
src/components/Models/Workshop/PurchaseOrderModal.tsx:    // Added an explicit check to handle potential undefined items
src/components/Models/Workshop/PurchaseOrderModal.tsx:    // Recalculate total cost if quantity or unit cost changes
src/components/Models/Workshop/PurchaseOrderModal.tsx:    // Create a new POItem with all required properties explicitly defined
src/components/Models/Workshop/PurchaseOrderModal.tsx:  // Attachment logic (placeholder)
src/components/Models/Workshop/PurchaseOrderModal.tsx:    // Upload logic here
src/components/Models/Workshop/PurchaseOrderModal.tsx:  // Save/Cancel
src/components/Models/Workshop/PurchaseOrderModal.tsx:                {/* ...add all other fields as inputs */}
src/components/Models/Workshop/PurchaseOrderModal.tsx:                {/* ...add all other fields as text */}
src/components/ErrorBoundary.tsx:    // Use enhanced error logging with detailed context
src/components/ErrorBoundary.tsx:    // Also log to existing system for compatibility
src/components/ErrorBoundary.tsx:    // Call the onError prop if provided
src/components/ErrorBoundary.tsx:    // Reset the error boundary when specified props change
src/components/ErrorBoundary.tsx:      // Use custom render function if provided
src/components/ErrorBoundary.tsx:      // Use custom fallback if provided
src/components/ErrorBoundary.tsx:      // Default fallback UI
src/components/ErrorBoundary.tsx:/**
src/components/ErrorBoundary.tsx:  // Set display name for better debugging
src/components/lists/CARReportList.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── Context ─────────────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── Custom Components ───────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/lists/CARReportList.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/lists/CARReportList.tsx:  // Apply filters
src/components/lists/CARReportList.tsx:  // Sort reports: newest first
src/components/lists/CARReportList.tsx:  // Handle filter changes
src/components/lists/CARReportList.tsx:  // Clear filters
src/components/lists/CARReportList.tsx:  // Handle view report details
src/components/lists/CARReportList.tsx:  // Handle edit report
src/components/lists/CARReportList.tsx:  // Find linked driver behavior events
src/components/lists/CARReportList.tsx:  // Handle delete report
src/components/lists/CARReportList.tsx:  // Download report as PDF
src/components/lists/CARReportList.tsx:  // Get status badge class
src/components/lists/CARReportList.tsx:  // Get severity badge class
src/components/lists/CARReportList.tsx:  // Calculate summary statistics
src/components/lists/CARReportList.tsx:  // Get unique responsible persons for filter
src/components/lists/CARReportList.tsx:      {/* Header */}
src/components/lists/CARReportList.tsx:      {/* Summary Cards */}
src/components/lists/CARReportList.tsx:      {/* Filters */}
src/components/lists/CARReportList.tsx:      {/* Reports List */}
src/components/lists/CARReportList.tsx:                          {/* Show reference event if available */}
src/components/lists/CARReportList.tsx:                        {/* Attachments count */}
src/components/lists/CARReportList.tsx:      {/* CAR Report Form Modal */}
src/components/lists/CARReportList.tsx:      {/* CAR Report Details Modal */}
src/components/lists/InspectionList.tsx:    // Use status prop if provided, otherwise use filterStatus from local state
src/components/lists/WebBookTripsList.tsx:  // Convert WebBookTrip to Trip format expected by CompletedTripEditModal
src/components/lists/WebBookTripsList.tsx:      // Base trip details
src/components/lists/WebBookTripsList.tsx:      driverName: "Unknown", // Default value as WebBookTrip doesn't have driverName
src/components/lists/WebBookTripsList.tsx:      clientType: "external", // Default value
src/components/lists/WebBookTripsList.tsx:      // Required fields with default values
src/components/lists/WebBookTripsList.tsx:      baseRevenue: 0, // Default value
src/components/lists/WebBookTripsList.tsx:      revenueCurrency: "ZAR", // Default value
src/components/lists/WebBookTripsList.tsx:      costs: [], // Empty array as default
src/components/lists/WebBookTripsList.tsx:      additionalCosts: [], // Empty array as default
src/components/lists/WebBookTripsList.tsx:      // Optional fields we can set
src/components/lists/WebBookTripsList.tsx:      distanceKm: webTrip.tripDurationHours ? webTrip.tripDurationHours * 60 : 0, // Rough estimate
src/components/lists/WebBookTripsList.tsx:      // Keep original web book data
src/components/lists/WebBookTripsList.tsx:      // Payment fields (required by type but can be defaulted)
src/components/lists/WebBookTripsList.tsx:      // Metadata
src/components/lists/WebBookTripsList.tsx:      createdAt: webTrip.updatedAt, // Use updateAt as fallback
src/components/lists/WebBookTripsList.tsx:      // Empty arrays for references that might be used
src/components/lists/WebBookTripsList.tsx:      // Refresh trips would happen automatically if real-time listeners are used
src/components/lists/WebBookTripsList.tsx:      {/* Summary Cards */}
src/components/lists/WebBookTripsList.tsx:      {/* Information Banner */}
src/components/lists/WebBookTripsList.tsx:      {/* Trips Table */}
src/components/lists/WebBookTripsList.tsx:      {/* Edit Modal */}
src/components/TripManagement/ActiveTrips.tsx:// No initial mock data
src/components/TripManagement/ActiveTrips.tsx:  // Real-time trips (Firestore, etc)
src/components/TripManagement/ActiveTrips.tsx:  // Web Book trips (external system)
src/components/TripManagement/ActiveTrips.tsx:  // State for user-added/manual trips, and webhook trips
src/components/TripManagement/ActiveTrips.tsx:  // UI and modal state
src/components/TripManagement/ActiveTrips.tsx:  // Normalize all trips for consistent structure
src/components/TripManagement/ActiveTrips.tsx:  // Unified trip list
src/components/TripManagement/ActiveTrips.tsx:  // Filtered for table/stats
src/components/TripManagement/ActiveTrips.tsx:  // Stats
src/components/TripManagement/ActiveTrips.tsx:  // Fetch webhook trips (replace with actual API in prod)
src/components/TripManagement/ActiveTrips.tsx:  // Editing
src/components/TripManagement/ActiveTrips.tsx:  // File upload
src/components/TripManagement/ActiveTrips.tsx:  // Download template
src/components/TripManagement/ActiveTrips.tsx:  // Refresh webhook trips
src/components/TripManagement/ActiveTrips.tsx:  // Add Trip
src/components/TripManagement/ActiveTrips.tsx:      {/* Filters */}
src/components/TripManagement/ActiveTrips.tsx:      {/* Stats Cards */}
src/components/TripManagement/ActiveTrips.tsx:        {/* File input (hidden) */}
src/components/TripManagement/ActiveTrips.tsx:        {/* File upload button */}
src/components/TripManagement/ActiveTrips.tsx:        {/* Template download button */}
src/components/TripManagement/ActiveTrips.tsx:              xmlns="http://www.w3.org/2000/svg"
src/components/TripManagement/ActiveTrips.tsx:      {/* Error message */}
src/components/TripManagement/ActiveTrips.tsx:              xmlns="http://www.w3.org/2000/svg"
src/components/TripManagement/ActiveTrips.tsx:      {/* Trip View Modal */}
src/components/TripManagement/ActiveTrips.tsx:      {/* Cost entry modal */}
src/components/TripManagement/ActiveTrips.tsx:      {/* System costs modal */}
src/components/TripManagement/ActiveTrips.tsx:      {/* Status update modal */}
src/components/TripManagement/ActiveTrips.tsx:      {/* Add Trip Modal */}
src/components/TripManagement/LoadingIndicator.tsx:        xmlns="http://www.w3.org/2000/svg" 
src/components/TripManagement/TripDetails.tsx:  // Enhanced handleAddCost with file support
src/components/TripManagement/TripDetails.tsx:      // Show success message with cost details
src/components/TripManagement/TripDetails.tsx:  // Enhanced handleUpdateCost with file support
src/components/TripManagement/TripDetails.tsx:        // Process new files if provided
src/components/TripManagement/TripDetails.tsx:      // Add each system cost entry individually
src/components/TripManagement/TripDetails.tsx:      // Show detailed success message
src/components/TripManagement/TripDetails.tsx:          completedBy: "Current User", // In a real app, this would be the logged-in user
src/components/TripManagement/TripDetails.tsx:  // Handle invoice submission
src/components/TripManagement/TripDetails.tsx:      // Create proof of delivery attachments
src/components/TripManagement/TripDetails.tsx:      // Create signed invoice attachments
src/components/TripManagement/TripDetails.tsx:  // Handle additional cost management
src/components/TripManagement/TripDetails.tsx:  // Check if system costs have been generated
src/components/TripManagement/TripDetails.tsx:  // Calculate timeline discrepancies for display
src/components/TripManagement/TripDetails.tsx:    return diffHours > 1; // More than 1 hour difference
src/components/TripManagement/TripDetails.tsx:      {/* Header with Navigation and Actions */}
src/components/TripManagement/TripDetails.tsx:      {/* Status Alerts */}
src/components/TripManagement/TripDetails.tsx:      {/* Timeline Discrepancy Alert */}
src/components/TripManagement/TripDetails.tsx:      {/* Auto-completion notification */}
src/components/TripManagement/TripDetails.tsx:      {/* System Costs Alert */}
src/components/TripManagement/TripDetails.tsx:      {/* System Costs Summary */}
src/components/TripManagement/TripDetails.tsx:      {/* Trip Status Alerts */}
src/components/TripManagement/TripDetails.tsx:      {/* Trip Summary with Enhanced KPIs */}
src/components/TripManagement/TripDetails.tsx:            {/* Trip Information */}
src/components/TripManagement/TripDetails.tsx:            {/* Financial Summary */}
src/components/TripManagement/TripDetails.tsx:            {/* KPIs and Status */}
src/components/TripManagement/TripDetails.tsx:      {/* Cost Entries Section */}
src/components/TripManagement/TripDetails.tsx:      {/* Modals */}
src/components/TripManagement/LoadPlanningComponent.tsx:  // New cargo item form
src/components/TripManagement/LoadPlanningComponent.tsx:  // Vehicle capacity defaults (would ideally come from vehicle data)
src/components/TripManagement/LoadPlanningComponent.tsx:    weight: 34000, // kg
src/components/TripManagement/LoadPlanningComponent.tsx:    volume: 86, // cubic meters
src/components/TripManagement/LoadPlanningComponent.tsx:    length: 13.6, // meters
src/components/TripManagement/LoadPlanningComponent.tsx:    width: 2.5, // meters
src/components/TripManagement/LoadPlanningComponent.tsx:    height: 2.6, // meters
src/components/TripManagement/LoadPlanningComponent.tsx:  // Fetch trip and load plan data
src/components/TripManagement/LoadPlanningComponent.tsx:        // Check if trip has a load plan
src/components/TripManagement/LoadPlanningComponent.tsx:  // Calculate total weight and volume
src/components/TripManagement/LoadPlanningComponent.tsx:  // Handle adding new cargo item
src/components/TripManagement/LoadPlanningComponent.tsx:      // Update existing load plan
src/components/TripManagement/LoadPlanningComponent.tsx:      // Create new load plan
src/components/TripManagement/LoadPlanningComponent.tsx:        utilisationRate: 0, // Will be calculated later
src/components/TripManagement/LoadPlanningComponent.tsx:        createdBy: "Current User", // In real app, use the logged-in user
src/components/TripManagement/LoadPlanningComponent.tsx:  // Handle deleting a cargo item
src/components/TripManagement/LoadPlanningComponent.tsx:  // Reset new item form
src/components/TripManagement/LoadPlanningComponent.tsx:  // Update a field in the new item form
src/components/TripManagement/LoadPlanningComponent.tsx:    setError(null); // Clear error when user updates a field
src/components/TripManagement/LoadPlanningComponent.tsx:  // Calculate utilization percentages
src/components/TripManagement/LoadPlanningComponent.tsx:    // Overall utilization is the higher of the two, since whichever one maxes out first is the limiting factor
src/components/TripManagement/LoadPlanningComponent.tsx:  // Get utilization class based on percentage
src/components/TripManagement/LoadPlanningComponent.tsx:  // Format number with thousand separators
src/components/TripManagement/LoadPlanningComponent.tsx:          {/* Vehicle Capacity */}
src/components/TripManagement/LoadPlanningComponent.tsx:              {/* Weight Capacity */}
src/components/TripManagement/LoadPlanningComponent.tsx:              {/* Volume Capacity */}
src/components/TripManagement/LoadPlanningComponent.tsx:              {/* Overall Utilization */}
src/components/TripManagement/LoadPlanningComponent.tsx:          {/* Add New Cargo Item Form */}
src/components/TripManagement/LoadPlanningComponent.tsx:          {/* Cargo Items List */}
src/components/TripManagement/LoadPlanningComponent.tsx:                    {/* Totals row */}
src/components/TripManagement/LoadPlanningComponent.tsx:          {/* Load Notes */}
src/components/TripManagement/LoadPlanningComponent.tsx:          {/* Load Analysis and Recommendations */}
src/components/TripManagement/LoadPlanningComponent.tsx:                {/* Utilization summary */}
src/components/TripManagement/LoadPlanningComponent.tsx:                {/* Weight distribution (simplified) */}
src/components/TripManagement/LoadPlanningComponent.tsx:                {/* Hazardous materials warning */}
src/components/TripManagement/LoadPlanningComponent.tsx:                {/* Stackability note */}
src/components/TripManagement/TripReport.tsx:    // @ts-expect-error: react-to-print uses 'content' as a valid option
src/components/TripManagement/TripReport.tsx:        {/* Timeline Visualization */}
src/components/TripManagement/TripReport.tsx:        {/* Delays Section */}
src/components/TripManagement/TripReport.tsx:      {/* Add Delay Modal */}
src/components/TripManagement/TripReport.tsx:      {/* Drilldown Delay Modal */}
src/components/TripManagement/TripReport.tsx:// ---- Timeline Component ----
src/components/TripManagement/TripReport.tsx:// ---- Delay Audit Modal ----
src/components/TripManagement/TripTemplateManager.tsx:  // Event handlers
src/components/TripManagement/TripTemplateManager.tsx:    // In a real implementation, these would perform the actual operations
src/components/TripManagement/TripTemplateManager.tsx:  // Mock data - would be fetched from Firestore in real implementation
src/components/TripManagement/TripTemplateManager.tsx:      {/* Search and Filter Bar */}
src/components/TripManagement/TripTemplateManager.tsx:      {/* Template List */}
src/components/TripManagement/TripTemplateManager.tsx:      {/* Template Details Preview */}
src/components/TripManagement/EditDriver.tsx:// Mock driver data - same as used in DriverDetails.tsx
src/components/TripManagement/EditDriver.tsx:    // Simulate API call
src/components/TripManagement/EditDriver.tsx:    // Simulate API call
src/components/TripManagement/EditDriver.tsx:          {/* Personal Information */}
src/components/TripManagement/EditDriver.tsx:          {/* License & Emergency Contact */}
src/components/TripManagement/EditDriver.tsx:        {/* Banking Details */}
src/components/TripManagement/EditDriver.tsx:        {/* Form Actions */}
src/components/TripManagement/TripRouter.tsx:// import CompletedTripEditModal from "../../components/Models/Trips/CompletedTripEditModal"; // Unused, removed
src/components/TripManagement/TripRouter.tsx:  // const defaultCurrency: SupportedCurrency = "USD"; // Unused, removed
src/components/TripManagement/TripRouter.tsx:                // TODO: Connect to Firebase backend
src/components/TripManagement/TripTimelineLive.tsx:// This is an example component showing how to use the real-time trips 
src/components/TripManagement/TripTimelineLive.tsx:// data for timeline/Gantt chart integration
src/components/TripManagement/TripTimelineLive.tsx:  // Get only active trips from Web Book for timeline display
src/components/TripManagement/TripTimelineLive.tsx:  // Transform trips data for timeline/Gantt usage
src/components/TripManagement/TripTimelineLive.tsx:    // Additional fields for Gantt charts
src/components/TripManagement/TripTimelineLive.tsx:          {/* Timeline Events Data Preview */}
src/components/TripManagement/TripTimelineLive.tsx:          {/* Visual Timeline Preview */}
src/components/TripManagement/TripTimelineLive.tsx:                {/* Progress Bar */}
src/components/TripManagement/TripTimelineLive.tsx:      {/* Integration Guide */}
src/components/TripManagement/Calendar.tsx:// Define TypeScript interfaces for our data
src/components/TripManagement/Calendar.tsx:  start: string; // ISO date string
src/components/TripManagement/Calendar.tsx:  end: string; // ISO date string
src/components/TripManagement/Calendar.tsx:  type: TripEvent["status"]; // Use TripEvent statuses as types
src/components/TripManagement/Calendar.tsx:  color: string; // Tailwind color class
src/components/TripManagement/Calendar.tsx:// Helper function to get the number of days in a month
src/components/TripManagement/Calendar.tsx:// Helper function to get days for a specific week (Thursday to Wednesday)
src/components/TripManagement/Calendar.tsx:  // Adjust to Thursday of the current week (or previous week if currentDate is before Thursday)
src/components/TripManagement/Calendar.tsx:// Helper function to convert TripEvent status to a Tailwind color class
src/components/TripManagement/Calendar.tsx:      return "bg-neutral-300"; // Softer gray for scheduled
src/components/TripManagement/Calendar.tsx:  const [currentDate, setCurrentDate] = useState<Date>(new Date()); // Current date for calendar navigation
src/components/TripManagement/Calendar.tsx:  // Sample trip events for the calendar (from your provided code)
src/components/TripManagement/Calendar.tsx:        status: "active", // Changed to active for visual diversity
src/components/TripManagement/Calendar.tsx:        status: "delayed", // Changed to delayed for visual diversity
src/components/TripManagement/Calendar.tsx:        end: "2025-07-21T12:00:00", // Spans two days
src/components/TripManagement/Calendar.tsx:        status: "completed", // Changed to completed for visual diversity
src/components/TripManagement/Calendar.tsx:        end: "2025-07-28T17:00:00", // Spans multiple days
src/components/TripManagement/Calendar.tsx:        vehicle: "VEH-2001", // Same vehicle as first trip
src/components/TripManagement/Calendar.tsx:  // Transform tripEvents into the Vehicle structure for timeline display
src/components/TripManagement/Calendar.tsx:    // Sort vehicles by name for consistent display
src/components/TripManagement/Calendar.tsx:    // For 'day' view, just return the current day
src/components/TripManagement/Calendar.tsx:        // day
src/components/TripManagement/Calendar.tsx:        // day
src/components/TripManagement/Calendar.tsx:  // Vehicles currently unfiltered (search removed)
src/components/TripManagement/Calendar.tsx:      {/* Top Section: Title and Action Buttons */}
src/components/TripManagement/Calendar.tsx:          {/* <SyncIndicator /> Removed as it's an external component */}
src/components/TripManagement/Calendar.tsx:          {/* Search button removed with search feature */}
src/components/TripManagement/Calendar.tsx:            // disabled={isLoading?.trips} Removed as isLoading is from external context
src/components/TripManagement/Calendar.tsx:      {/* Calendar Controls and View Modes */}
src/components/TripManagement/Calendar.tsx:      {/* Calendar Grid (Timeline View) */}
src/components/TripManagement/Calendar.tsx:          {/* Vehicle List Column */}
src/components/TripManagement/Calendar.tsx:          {/* Timeline Grid */}
src/components/TripManagement/Calendar.tsx:            {/* Day Headers */}
src/components/TripManagement/Calendar.tsx:                    day.getDay() === 0 || day.getDay() === 6 ? "bg-indigo-50" : "bg-white" // Softer weekend styling
src/components/TripManagement/Calendar.tsx:            {/* Event Rows */}
src/components/TripManagement/Calendar.tsx:                        {/* Render events that fall on this day */}
src/components/TripManagement/Calendar.tsx:                          // Check if event overlaps with the current day
src/components/TripManagement/Calendar.tsx:                          // Check if the event spans across the current day
src/components/TripManagement/Calendar.tsx:                            // Calculate position and width based on the visible days and event duration
src/components/TripManagement/Calendar.tsx:                            const totalDayDuration = dayEnd.getTime() - dayStart.getTime(); // Milliseconds in a day
src/components/TripManagement/Calendar.tsx:                            if (visibleEventDuration <= 0) return null; // Event not visible on this day
src/components/TripManagement/Calendar.tsx:                                title={event.label} // Tooltip for full label
src/components/TripManagement/Calendar.tsx:      {/* Upcoming Trips Table (retained from your original code) */}
src/components/TripManagement/Calendar.tsx:                  {/* Added Status column */}
src/components/TripManagement/MissedLoadsTracker.tsx:// ─── React & Utilities ───────────────────────────────────────────
src/components/TripManagement/MissedLoadsTracker.tsx:// ─── Types & Constants ───────────────────────────────────────────
src/components/TripManagement/MissedLoadsTracker.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/TripManagement/MissedLoadsTracker.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/TripManagement/MissedLoadsTracker.tsx:  // Calculate summary metrics
src/components/TripManagement/MissedLoadsTracker.tsx:      {/* Header */}
src/components/TripManagement/MissedLoadsTracker.tsx:      {/* Summary Cards */}
src/components/TripManagement/MissedLoadsTracker.tsx:      {/* Missed Loads List */}
src/components/TripManagement/MissedLoadsTracker.tsx:      {/* Add/Edit Modal */}
src/components/TripManagement/MissedLoadsTracker.tsx:      {/* Resolution Modal */}
src/components/WorkshopManagement/PurchaseOrderForm.tsx:// Extend POItem for form usage
src/components/WorkshopManagement/PurchaseOrderForm.tsx:  total?: number; // for legacy compatibility, but use totalPrice
src/components/WorkshopManagement/PurchaseOrderForm.tsx:// Extend PurchaseOrder for form usage
src/components/WorkshopManagement/PurchaseOrderForm.tsx:// PurchaseOrderItem is imported from types/workshop-job-card
src/components/WorkshopManagement/PurchaseOrderForm.tsx:    // Auto-calculate item total
src/components/WorkshopManagement/PurchaseOrderForm.tsx:    // In a real implementation, you'd upload the file to storage
src/components/WorkshopManagement/JobCard.tsx:import InventoryPanel from '../../components/WorkshopManagement/InventoryPanel'; // To be integrated in phase 2
src/components/WorkshopManagement/JobCard.tsx:import TaskManager from "./TaskManager"; // TaskManager component exists and is now imported
src/components/WorkshopManagement/JobCard.tsx:import QAReviewPanel from '../../components/WorkshopManagement/QAReviewPanel'; // Will be imported from the correct location
src/components/WorkshopManagement/JobCard.tsx:import CompletionPanel from '../../components/WorkshopManagement/CompletionPanel'; // Will be created in phase 2
src/components/WorkshopManagement/JobCard.tsx:// Mock data for a job card
src/components/WorkshopManagement/JobCard.tsx:  faultId: "f123", // Added faultId property
src/components/WorkshopManagement/JobCard.tsx:// Mock tasks for the job card
src/components/WorkshopManagement/JobCard.tsx:// Mock parts with full Part interface
src/components/WorkshopManagement/JobCard.tsx:// Mock notes
src/components/WorkshopManagement/JobCard.tsx:  // Define type for future components data
src/components/WorkshopManagement/JobCard.tsx:    assignedParts: any[]; // Using any[] to avoid type conflicts with mock data
src/components/WorkshopManagement/JobCard.tsx:    handleGenerateInvoice: () => Promise<void>; // Remove optional since it's always assigned
src/components/WorkshopManagement/JobCard.tsx:  // Store components' data in a ref to avoid unused variable warnings
src/components/WorkshopManagement/JobCard.tsx:  // while keeping them ready for when components are implemented
src/components/WorkshopManagement/JobCard.tsx:    handleGenerateInvoice: async () => {} // Placeholder, will be properly assigned below
src/components/WorkshopManagement/JobCard.tsx:  // Handler functions for tasks
src/components/WorkshopManagement/JobCard.tsx:  // These handlers will be used once the TaskManager component is implemented
src/components/WorkshopManagement/JobCard.tsx:    // Log status changes to history
src/components/WorkshopManagement/JobCard.tsx:          jobCard.id, // Using jobCard.id as the main task ID
src/components/WorkshopManagement/JobCard.tsx:    // Log assignment changes
src/components/WorkshopManagement/JobCard.tsx:  // Initialize future handler functions - these will be used when components are implemented
src/components/WorkshopManagement/JobCard.tsx:    // Store handlers in the ref object to avoid unused variable warnings
src/components/WorkshopManagement/JobCard.tsx:  // Log task history entry - now uses Firestore
src/components/WorkshopManagement/JobCard.tsx:  // Initialize the remaining handlers in the useEffect to avoid unused variable warnings
src/components/WorkshopManagement/JobCard.tsx:    // Handler for verifying a task (supervisor only)
src/components/WorkshopManagement/JobCard.tsx:        // Update task in Firestore
src/components/WorkshopManagement/JobCard.tsx:    // Handler for verifying all tasks at once (supervisor only)
src/components/WorkshopManagement/JobCard.tsx:        // Get all completed tasks that haven't been verified
src/components/WorkshopManagement/JobCard.tsx:        // Update each task
src/components/WorkshopManagement/JobCard.tsx:          // Log the verification action
src/components/WorkshopManagement/JobCard.tsx:    // Handler functions for parts
src/components/WorkshopManagement/JobCard.tsx:        // Implementation will be used when component is ready
src/components/WorkshopManagement/JobCard.tsx:        // In a real implementation, this would:
src/components/WorkshopManagement/JobCard.tsx:        // 1. Fetch part details from inventory
src/components/WorkshopManagement/JobCard.tsx:        // 2. Create assignment record in Firestore
src/components/WorkshopManagement/JobCard.tsx:        // 3. Update local state
src/components/WorkshopManagement/JobCard.tsx:        // Mock implementation for now
src/components/WorkshopManagement/JobCard.tsx:        // TODO: Add actual part assignment logic here
src/components/WorkshopManagement/JobCard.tsx:        // Implementation will be used when component is ready
src/components/WorkshopManagement/JobCard.tsx:        // In a real implementation, this would:
src/components/WorkshopManagement/JobCard.tsx:        // 1. Remove assignment record from Firestore
src/components/WorkshopManagement/JobCard.tsx:        // 2. Update local state
src/components/WorkshopManagement/JobCard.tsx:        // Mock implementation for now
src/components/WorkshopManagement/JobCard.tsx:        // TODO: Add actual part removal logic here
src/components/WorkshopManagement/JobCard.tsx:        // Implementation will be used when component is ready
src/components/WorkshopManagement/JobCard.tsx:        // In a real implementation, this would:
src/components/WorkshopManagement/JobCard.tsx:        // 1. Update assignment record in Firestore
src/components/WorkshopManagement/JobCard.tsx:        // 2. Update local state
src/components/WorkshopManagement/JobCard.tsx:        // 3. Recalculate costs
src/components/WorkshopManagement/JobCard.tsx:        // Mock implementation for now
src/components/WorkshopManagement/JobCard.tsx:        // TODO: Add actual quantity update logic here
src/components/WorkshopManagement/JobCard.tsx:  // Handler functions for notes
src/components/WorkshopManagement/JobCard.tsx:      type: type as "technician" | "customer", // Ensure type compatibility
src/components/WorkshopManagement/JobCard.tsx:  // Add completion and invoice handlers to the ref object
src/components/WorkshopManagement/JobCard.tsx:    // Handler for job completion
src/components/WorkshopManagement/JobCard.tsx:        // Update job card status in Firestore
src/components/WorkshopManagement/JobCard.tsx:        // Log the job card completion
src/components/WorkshopManagement/JobCard.tsx:    // Handler for invoice generation
src/components/WorkshopManagement/JobCard.tsx:        // Create an invoice in Firestore
src/components/WorkshopManagement/JobCard.tsx:  // Toggle user role for demo purposes
src/components/WorkshopManagement/JobCard.tsx:      {/* Role toggle for demo */}
src/components/WorkshopManagement/JobCard.tsx:        onBack={() => {}} // No-op for demo
src/components/WorkshopManagement/JobCard.tsx:          {/* TaskManager component now integrated */}
src/components/WorkshopManagement/JobCard.tsx:            taskHistory={[]} // We'll implement this in a future step
src/components/WorkshopManagement/JobCard.tsx:          {/* QA Review Panel for supervisors */}
src/components/WorkshopManagement/JobCard.tsx:          {/* Inventory Panel */}
src/components/WorkshopManagement/JobCard.tsx:          {/* Completion Panel for supervisors */}
src/components/WorkshopManagement/JobCard.tsx:          {/* Task History */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/*                           Types                           */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/*                   Small runtime type-guard                */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/*                         Component                         */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:/* ────────────────────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ---------- routing params ---------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ---------- local state ---------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  // Inspection template state (must be before return)
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ───────── cleanup: safe stopScan ───────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          /* ignore */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ───────── preload any existing doc ───────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ------------------------------------------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /*                Firestore I/O                */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ------------------------------------------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ------------------------------------------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /*               media / helpers               */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ------------------------------------------- */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      // Check if the necessary permissions are available
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:        // Request permissions if we don't have them
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:    // Fallback for non-native environments
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ───────── submit ───────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ──────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /*                    Render                    */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:  /* ──────────────────────────────────────────── */
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      {/* Inspection Template Selection */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      {/* Inspection Items */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      {/* Display existing inspection info */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      {/* ---------- loading spinner ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* ---------- basic data ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:            {/* condition select */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* inspector & notes */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* ---------- action buttons ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:            {/* QR scanning */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:                  // Check permissions properly
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:                    // Request permissions if we don't have them
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:                  // Safe stopping of scanner
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* ---------- previews ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* ---------- QR code for quick link ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:          {/* ---------- submit ---------- */}
src/components/WorkshopManagement/EnhancedTyreInspectionForm.tsx:      {/* ---------- signature modal ---------- */}
src/components/WorkshopManagement/WorkshopIntegration.tsx:/**
src/components/WorkshopManagement/WorkshopIntegration.tsx:  // Sample data for components
src/components/WorkshopManagement/WorkshopIntegration.tsx:      {/* This is a demonstration of all workshop components.
src/components/WorkshopManagement/WorkshopIntegration.tsx:        {/* These components are rendered hidden just to ensure they're properly imported */}
src/components/WorkshopManagement/WorkshopIntegration.tsx:        {/* VendorTable doesn't accept props - it uses internal data */}
src/components/WorkshopManagement/WorkshopIntegration.tsx:        {/* JobCardTable requires specific props */}
src/components/WorkshopManagement/WorkshopIntegration.tsx:      {/* Display sample data for demonstration */}
src/components/WorkshopManagement/QRGenerator.tsx:  // Mock data for dropdowns
src/components/WorkshopManagement/QRGenerator.tsx:  // Generate QR code
src/components/WorkshopManagement/QRGenerator.tsx:        // Enhanced QR code for driver inspections and fault logging
src/components/WorkshopManagement/QRGenerator.tsx:        // Include more data for tyre tracking - fleet, position, and inspection endpoint
src/components/WorkshopManagement/QRGenerator.tsx:        // Link to part details and maintenance history
src/components/WorkshopManagement/QRGenerator.tsx:  // Reset form
src/components/WorkshopManagement/QRGenerator.tsx:  // Handle QR type change
src/components/WorkshopManagement/QRGenerator.tsx:  // Validate form before generation
src/components/WorkshopManagement/QRGenerator.tsx:  // Download QR code as image
src/components/WorkshopManagement/QRGenerator.tsx:    // Create a temporary canvas to generate the PNG
src/components/WorkshopManagement/QRGenerator.tsx:    // Extract button's role from data attributes or text content
src/components/WorkshopManagement/QRGenerator.tsx:      // Share QR code (e.g., copy link to clipboard)
src/components/WorkshopManagement/QRGenerator.tsx:                      includeMargin={true} // Use this instead of marginSize
src/components/WorkshopManagement/TaskManager.tsx:  // Technicians for assignment dropdown
src/components/WorkshopManagement/TaskManager.tsx:  // Task categories
src/components/WorkshopManagement/TaskManager.tsx:  // Get the allowed status transitions based on the current status and user role
src/components/WorkshopManagement/TaskManager.tsx:      // technician
src/components/WorkshopManagement/TaskManager.tsx:  // Handle task status change with history logging
src/components/WorkshopManagement/TaskManager.tsx:    // Determine what fields to update based on the status change
src/components/WorkshopManagement/TaskManager.tsx:    // Add completion information if status is changing to completed
src/components/WorkshopManagement/TaskManager.tsx:      updates.completedBy = "Current Technician"; // Replace with actual user name
src/components/WorkshopManagement/TaskManager.tsx:    // Add verification information if status is changing to verified
src/components/WorkshopManagement/TaskManager.tsx:      updates.verifiedBy = "Current Supervisor"; // Replace with actual user name
src/components/WorkshopManagement/TaskManager.tsx:    // Update the task
src/components/WorkshopManagement/TaskManager.tsx:    // Log the status change
src/components/WorkshopManagement/TaskManager.tsx:    // Get the original task before update
src/components/WorkshopManagement/TaskManager.tsx:    // Check if status is changing
src/components/WorkshopManagement/TaskManager.tsx:    // If status is changing, handle completion or verification info
src/components/WorkshopManagement/TaskManager.tsx:        editForm.completedBy = "Current Technician"; // Replace with actual user name
src/components/WorkshopManagement/TaskManager.tsx:        editForm.verifiedBy = "Current Supervisor"; // Replace with actual user name
src/components/WorkshopManagement/TaskManager.tsx:    // Log task edit
src/components/WorkshopManagement/TaskManager.tsx:    // Since newTask is already Omit<JobCardTask, "id">, we should pass it directly
src/components/WorkshopManagement/TaskManager.tsx:    // and let onTaskAdd handle adding the ID
src/components/WorkshopManagement/TaskManager.tsx:    // Log task creation
src/components/WorkshopManagement/TaskManager.tsx:  // View task history
src/components/WorkshopManagement/TaskManager.tsx:  // Filter history for a specific task
src/components/WorkshopManagement/TaskManager.tsx:  // Calculate completion stats for UI display
src/components/WorkshopManagement/TaskManager.tsx:      {/* Task Completion Stats */}
src/components/WorkshopManagement/TaskManager.tsx:      {/* Task List */}
src/components/WorkshopManagement/TaskManager.tsx:                        {/* Completion details */}
src/components/WorkshopManagement/TaskManager.tsx:      {/* Add Task Form */}
src/components/WorkshopManagement/TaskManager.tsx:      {/* Task History Modal */}
src/components/WorkshopManagement/TaskManager.tsx:              {/* Task details */}
src/components/WorkshopManagement/TaskManager.tsx:              {/* History entries */}
src/components/WorkshopManagement/QRScanner.tsx:// Check if we're running in a Capacitor environment
src/components/WorkshopManagement/QRScanner.tsx:    // Check if running on a mobile device
src/components/WorkshopManagement/QRScanner.tsx:        // Use the device camera API for mobile browsers
src/components/WorkshopManagement/QRScanner.tsx:        // Use a web-based QR scanner for desktop browsers
src/components/WorkshopManagement/QRScanner.tsx:        // Hide the webpage background and start scanning
src/components/WorkshopManagement/QRScanner.tsx:      // For mobile browsers, we'll use the device camera
src/components/WorkshopManagement/QRScanner.tsx:      // Using experimental Shape Detection API if available
src/components/WorkshopManagement/QRScanner.tsx:        // Start the camera
src/components/WorkshopManagement/QRScanner.tsx:        // Scan until we find a QR code
src/components/WorkshopManagement/QRScanner.tsx:        // Fallback to using a mobile-optimized library
src/components/WorkshopManagement/QRScanner.tsx:      // For web, we'll prompt the user to upload a QR code image
src/components/WorkshopManagement/QRScanner.tsx:      input.accept = 'image/*';
src/components/WorkshopManagement/QRScanner.tsx:          // Use a library like jsQR to decode the QR code
src/components/WorkshopManagement/QRScanner.tsx:          // This would typically use a QR code decoding library
src/components/WorkshopManagement/QRScanner.tsx:          // For now, we'll just mock a successful scan
src/components/WorkshopManagement/QRScanner.tsx:          // Clean up
src/components/WorkshopManagement/QRScanner.tsx:    // Process the scanned data - could be a URL or a JSON string
src/components/WorkshopManagement/QRScanner.tsx:      // First check if it's a workshop-related URL
src/components/WorkshopManagement/QRScanner.tsx:        // It's a URL, navigate to it
src/components/WorkshopManagement/QRScanner.tsx:        // It's a JSON string, parse it
src/components/WorkshopManagement/QRScanner.tsx:        // Handle different types of QR data
src/components/WorkshopManagement/QRScanner.tsx:          // Default handling
src/components/WorkshopManagement/QRScanner.tsx:        // Just pass the raw data to the handler
src/components/WorkshopManagement/QRScanner.tsx:      {/* QR Scanner Header */}
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:  // Group job cards by status
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:  // Handle drag-and-drop to change status
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:    // Update locally first for immediate UI feedback
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:    // Then call API if handler provided
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:        // Revert the UI if the API call fails
src/components/WorkshopManagement/JobCardKanbanBoard.tsx:        setCards([...jobCards]); // Use jobCards directly instead of using a function with prevCards
src/components/WorkshopManagement/InspectionHistory.tsx:      // Find the inspection associated with this button
src/components/WorkshopManagement/JobCardNotes.tsx:      // Handle edit/delete based on icon
src/components/WorkshopManagement/JobCardNotes.tsx:        {/* Note List */}
src/components/WorkshopManagement/JobCardNotes.tsx:        {/* Add Note Form */}
src/components/WorkshopManagement/FleetTable.tsx:// Mock fleet data
src/components/WorkshopManagement/FleetTable.tsx:  // Filter the fleet data
src/components/WorkshopManagement/FleetTable.tsx:  // Get unique values for filter dropdowns
src/components/WorkshopManagement/FleetTable.tsx:  // Handle editing a fleet vehicle
src/components/WorkshopManagement/FleetTable.tsx:  // Handle deleting a fleet vehicle
src/components/WorkshopManagement/FleetTable.tsx:  // Handle saving a fleet vehicle
src/components/WorkshopManagement/FleetTable.tsx:    // In a real app, this would save to Firestore
src/components/WorkshopManagement/FleetTable.tsx:      // Update existing fleet
src/components/WorkshopManagement/FleetTable.tsx:      // Add new fleet
src/components/WorkshopManagement/FleetTable.tsx:    // Return a resolved promise for the interface
src/components/WorkshopManagement/FleetTable.tsx:  // Clear all filters
src/components/WorkshopManagement/FleetTable.tsx:  // Export fleet data to CSV
src/components/WorkshopManagement/FleetTable.tsx:    // Create CSV content
src/components/WorkshopManagement/FleetTable.tsx:    // Create download link
src/components/WorkshopManagement/FleetTable.tsx:    // Trigger download
src/components/WorkshopManagement/FleetTable.tsx:    // Clean up
src/components/WorkshopManagement/FleetTable.tsx:      {/* Filters */}
src/components/WorkshopManagement/FleetTable.tsx:      {/* Fleet Table */}
src/components/WorkshopManagement/FleetTable.tsx:      {/* Fleet Form Modal */}
src/components/WorkshopManagement/inspections.tsx:// Define the inspection data type
src/components/WorkshopManagement/inspections.tsx:  // State for managing modals
src/components/WorkshopManagement/inspections.tsx:  // Filter inspections based on search term
src/components/WorkshopManagement/inspections.tsx:      {/* Defect Item Modal */}
src/components/WorkshopManagement/inspections.tsx:      {/* Inspection Details Modal */}
src/components/WorkshopManagement/PurchaseOrderSync.tsx:  // Mock data for demo
src/components/WorkshopManagement/PurchaseOrderSync.tsx:    // In a real implementation, this would fetch from Firestore
src/components/WorkshopManagement/PurchaseOrderSync.tsx:        // Update the local PO list with sync status if needed
src/components/WorkshopManagement/PurchaseOrderSync.tsx:      {/* Sync Result Alert */}
src/components/WorkshopManagement/PurchaseOrderSync.tsx:        {/* Purchase Order List */}
src/components/WorkshopManagement/PurchaseOrderSync.tsx:        {/* Selected PO Details */}
src/components/WorkshopManagement/InspectionManagement.tsx:  // Apply filters and search whenever they change
src/components/WorkshopManagement/InspectionManagement.tsx:    // Apply search term
src/components/WorkshopManagement/InspectionManagement.tsx:    // Apply status filter
src/components/WorkshopManagement/InspectionManagement.tsx:    // Apply date range filter
src/components/WorkshopManagement/InspectionManagement.tsx:  // Handle refresh button click
src/components/WorkshopManagement/InspectionManagement.tsx:  // Toggle expanded state of an inspection
src/components/WorkshopManagement/InspectionManagement.tsx:  // Handle create job card from inspection
src/components/WorkshopManagement/InspectionManagement.tsx:  // Get severity badge color
src/components/WorkshopManagement/InspectionManagement.tsx:  // Get status badge color
src/components/WorkshopManagement/InspectionManagement.tsx:      {/* Header with controls */}
src/components/WorkshopManagement/InspectionManagement.tsx:      {/* Search and filters */}
src/components/WorkshopManagement/InspectionManagement.tsx:      {/* Content area */}
src/components/WorkshopManagement/CompletionPanel.tsx:      {/* Job Status Banner */}
src/components/WorkshopManagement/CompletionPanel.tsx:      {/* Labor Hours Input */}
src/components/WorkshopManagement/CompletionPanel.tsx:      {/* Cost Summary */}
src/components/WorkshopManagement/CompletionPanel.tsx:      {/* Action Buttons */}
src/components/WorkshopManagement/vehicle-inspection.tsx:  // Mock data for initial form values
src/components/WorkshopManagement/vehicle-inspection.tsx:                xmlns="http://www.w3.org/2000/svg"
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:  const [currentCategory, setCurrentCategory] = useState<string>(""); // Always string
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:    // Load template and initialize form
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:  // Set first category as current with explicit type casting
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:    // Get current location if available
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:    // eslint-disable-next-line
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // Recalculate defects and critical issues
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:        // Update item with photo reference
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // Save to Firebase with offline persistence
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // If there are failed items, create faults automatically
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // Store data locally for offline access if needed
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // Navigate back or to next inspection
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      // Store offline if Firebase fails
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:      {/* Header */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:        {/* Progress Stats */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:        {/* Inspector Info */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:        {/* Category Navigation */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:            {/* Inspection Items */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:                      {/* Status Buttons */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:                      {/* Notes and Photos */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:                          {/* Photo Thumbnails */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:            {/* General Notes */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:            {/* Complete Button */}
src/components/WorkshopManagement/MobileWorkshopInspection.tsx:        {/* Completed State */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Apply filters and search whenever they change
src/components/WorkshopManagement/WorkOrderManagement.tsx:    // Apply search term
src/components/WorkshopManagement/WorkOrderManagement.tsx:    // Apply status filter
src/components/WorkshopManagement/WorkOrderManagement.tsx:    // Apply priority filter
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Handle refresh button click
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Toggle expanded state of a work order
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Handle status update
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Get priority badge color
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Get status badge color
src/components/WorkshopManagement/WorkOrderManagement.tsx:  // Calculate completion percentage
src/components/WorkshopManagement/WorkOrderManagement.tsx:      {/* Header with controls */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:      {/* Search and filters */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:      {/* Content area */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:                      {/* Description */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:                      {/* Tasks Progress */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:                      {/* Parts & Labor Summary */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:                      {/* Tags and Metadata */}
src/components/WorkshopManagement/WorkOrderManagement.tsx:                      {/* Action Buttons */}
src/components/WorkshopManagement/InventoryPanel.tsx:// Comprehensive part interface combining both type systems
src/components/WorkshopManagement/InventoryPanel.tsx:// Part assignment interface with full tracking information
src/components/WorkshopManagement/InventoryPanel.tsx:  addedAt: string; // ISO timestamp
src/components/WorkshopManagement/InventoryPanel.tsx:  // Mock function to search parts - in real app would be replaced with API/Firebase call
src/components/WorkshopManagement/InventoryPanel.tsx:      // This is a mock - would be replaced with actual API call
src/components/WorkshopManagement/InventoryPanel.tsx:      // Mock results that conform to the Part interface
src/components/WorkshopManagement/InventoryPanel.tsx:      {/* Search Parts */}
src/components/WorkshopManagement/InventoryPanel.tsx:        {/* Search Results */}
src/components/WorkshopManagement/InventoryPanel.tsx:        {/* Selected Part Addition */}
src/components/WorkshopManagement/InventoryPanel.tsx:      {/* Assigned Parts List */}
src/components/WorkshopManagement/QAReviewPanel.tsx:// Component props using both legacy JobCardTask and new TaskEntry types
src/components/WorkshopManagement/QAReviewPanel.tsx:  tasks: JobCardTask[]; // For backward compatibility
src/components/WorkshopManagement/QAReviewPanel.tsx:  taskItems?: JobCardItem[]; // New type for enhanced functionality
src/components/WorkshopManagement/QAReviewPanel.tsx:  taskEntries?: TaskEntry[]; // Alternative new type
src/components/WorkshopManagement/QAReviewPanel.tsx:/**
src/components/WorkshopManagement/QAReviewPanel.tsx:  // Calculate stats for the panel
src/components/WorkshopManagement/QAReviewPanel.tsx:  // Filter for tasks that need verification
src/components/WorkshopManagement/QAReviewPanel.tsx:        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
src/components/WorkshopManagement/QAReviewPanel.tsx:      {/* QA stats */}
src/components/WorkshopManagement/QAReviewPanel.tsx:      {/* Tasks needing verification */}
src/components/WorkshopManagement/QAReviewPanel.tsx:          {/* Verify all button */}
src/components/WorkshopManagement/JobCardManagement.tsx:  // Apply filters and search whenever relevant states change
src/components/WorkshopManagement/JobCardManagement.tsx:    // Apply search term
src/components/WorkshopManagement/JobCardManagement.tsx:    // Apply status filter
src/components/WorkshopManagement/JobCardManagement.tsx:    // Apply priority filter
src/components/WorkshopManagement/JobCardManagement.tsx:  // Handle refresh click
src/components/WorkshopManagement/JobCardManagement.tsx:      {/* Header with controls */}
src/components/WorkshopManagement/JobCardManagement.tsx:      {/* Search and filters */}
src/components/WorkshopManagement/JobCardManagement.tsx:      {/* Content area */}
src/components/WorkshopManagement/FaultTracking.tsx:// Mock fault data
src/components/WorkshopManagement/FaultTracking.tsx:  // Filter faults based on active filter and search term
src/components/WorkshopManagement/FaultTracking.tsx:    // Apply status filter
src/components/WorkshopManagement/FaultTracking.tsx:    // Apply search term
src/components/WorkshopManagement/FaultTracking.tsx:  // Function to get severity class
src/components/WorkshopManagement/FaultTracking.tsx:  // Function to get status class
src/components/WorkshopManagement/FaultTracking.tsx:  // Count faults by status
src/components/WorkshopManagement/FaultTracking.tsx:  // Count critical faults
src/components/WorkshopManagement/FaultTracking.tsx:      {/* Summary Stats */}
src/components/WorkshopManagement/FaultTracking.tsx:      {/* Filter Controls */}
src/components/WorkshopManagement/FaultTracking.tsx:      {/* Fault List */}
src/components/WorkshopManagement/newjobcardpage.tsx:import { db } from "../../firebase"; // Your Firestore instance
src/components/WorkshopManagement/newjobcardpage.tsx:import { doc, setDoc } from "firebase/firestore"; // Firestore functions
src/components/WorkshopManagement/newjobcardpage.tsx:// Local shape for job card details used in this page
src/components/WorkshopManagement/newjobcardpage.tsx:// Helper function to create an empty job card
src/components/WorkshopManagement/newjobcardpage.tsx:  const userName = "John Doe"; // Get from Auth Context in a real app
src/components/WorkshopManagement/newjobcardpage.tsx:    // Basic validation
src/components/WorkshopManagement/newjobcardpage.tsx:      setActiveTab("general"); // Navigate to the tab with the error
src/components/WorkshopManagement/newjobcardpage.tsx:      // Create a document reference and save the job card to Firestore
src/components/WorkshopManagement/newjobcardpage.tsx:              onLogTaskHistory={() => {}} // Placeholder, could be implemented with Firestore
src/components/WorkshopManagement/receive-parts.tsx:    notes: undefined, // Changed to undefined to match the interface
src/components/WorkshopManagement/receive-parts.tsx:    // Basic validation
src/components/WorkshopManagement/receive-parts.tsx:      // Simulate API call to record received parts
src/components/WorkshopManagement/receive-parts.tsx:      await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate network delay
src/components/WorkshopManagement/receive-parts.tsx:        // Reset form
src/components/WorkshopManagement/receive-parts.tsx:        notes: undefined, // Changed to undefined to match the interface
src/components/WorkshopManagement/receive-parts.tsx:                      notes: undefined, // Correctly set notes to undefined on clear
src/components/WorkshopManagement/QRCodeBatchGenerator.tsx:      {/* Header and Controls */}
src/components/WorkshopManagement/QRCodeBatchGenerator.tsx:        {/* Vehicle Selection */}
src/components/WorkshopManagement/QRCodeBatchGenerator.tsx:      {/* QR Code Grid - Print Layout */}
src/components/WorkshopManagement/QRCodeBatchGenerator.tsx:      {/* Print Instructions */}
src/components/WorkshopManagement/FaultTracker.tsx:  // Fetch faults from Firestore
src/components/WorkshopManagement/FaultTracker.tsx:  // Filter faults based on status, priority, and search query
src/components/WorkshopManagement/FaultTracker.tsx:  // Add new fault to Firestore
src/components/WorkshopManagement/FaultTracker.tsx:      // Refetch faults to update the list
src/components/WorkshopManagement/FaultTracker.tsx:  // Update fault status
src/components/WorkshopManagement/FaultTracker.tsx:      // If marking as completed, add completedAt timestamp
src/components/WorkshopManagement/FaultTracker.tsx:      // Update local state
src/components/WorkshopManagement/FaultTracker.tsx:  // Format timestamp to readable date
src/components/WorkshopManagement/FaultTracker.tsx:      // Reset the form state
src/components/WorkshopManagement/FaultTracker.tsx:      // This is likely the "More" button with the MoreHorizontal icon
src/components/WorkshopManagement/FaultTracker.tsx:      // You could implement additional actions here, like viewing fault details
src/components/WorkshopManagement/FaultTracker.tsx:        {/* Filter and Search controls */}
src/components/WorkshopManagement/FaultTracker.tsx:        {/* Faults Table */}
src/components/WorkshopManagement/request-parts.tsx:/**
src/components/WorkshopManagement/request-parts.tsx:  const { addPurchaseOrder: _addPurchaseOrder } = useWorkshop(); // Unused currently
src/components/WorkshopManagement/request-parts.tsx:      // Use the provided workOrderId and vehicleId
src/components/WorkshopManagement/request-parts.tsx:                xmlns="http://www.w3.org/2000/svg"
src/components/GoogleMap.tsx:/**
src/components/GoogleMap.tsx:  center = { lat: 51.5074, lng: -0.1278 }, // Default to London
src/components/GoogleMap.tsx:  // Initialize the map when the component mounts and Google Maps is loaded
src/components/GoogleMap.tsx:      // Check if Google Maps API is available
src/components/GoogleMap.tsx:      // Use a try-catch to specifically catch constructor errors
src/components/GoogleMap.tsx:        // Create a new map instance with proper handling for the constructor
src/components/GoogleMap.tsx:        // Verify that critical methods exist before setting the map
src/components/mobile/MobileLayout.tsx:// Import NavigationBar conditionally to avoid build errors
src/components/mobile/MobileLayout.tsx:// import { NavigationBar } from '@capacitor/navigation-bar';
src/components/mobile/MobileLayout.tsx:      // Set status bar style
src/components/mobile/MobileLayout.tsx:      // Set navigation bar color on Android
src/components/mobile/MobileLayout.tsx:      // Commented out due to missing @capacitor/navigation-bar package
src/components/mobile/MobileLayout.tsx:      // if (Capacitor.getPlatform() === 'android') {
src/components/mobile/MobileLayout.tsx:      //   await NavigationBar.setColor({
src/components/mobile/MobileLayout.tsx:      //     color: backgroundColor
src/components/mobile/MobileLayout.tsx:      //   });
src/components/mobile/MobileLayout.tsx:      // }
src/components/mobile/MobileLayout.tsx:      // Get device info
src/components/mobile/MobileLayout.tsx:      {/* Safe area handling for iOS */}
src/components/mobile/MobileLayout.tsx:      {/* Title bar */}
src/components/mobile/MobileLayout.tsx:      {/* Main content area */}
src/components/mobile/MobileLayout.tsx:      {/* Safe area handling for iOS */}
src/components/mobile/MobileLayout.tsx:      {/* Mobile-specific styles */}
src/components/mobile/MobileLayout.tsx:          /* iOS safe area support */
src/components/mobile/MobileLayout.tsx:          /* Web fallback */
src/components/mobile/MobileLayout.tsx:        /* Optimize for mobile interactions */
src/components/mobile/MobileLayout.tsx:        /* Prevent zoom on input focus */
src/components/mobile/MobileLayout.tsx:        /* Custom scrollbar for mobile */
src/components/mobile/MobileLayout.tsx:        /* Hide scrollbar when not needed */
src/components/mobile/MobileLayout.tsx:        /* Loading animations */
src/components/mobile/MobileLayout.tsx:        /* Mobile-optimized buttons */
src/components/mobile/MobileLayout.tsx:        /* Large touch targets */
src/components/mobile/MobileLayout.tsx:        /* Prevent text selection on UI elements */
src/components/mobile/MobileNavigation.tsx:      hidden: true // Hidden for now, will be enabled in future release
src/components/mobile/MobileNavigation.tsx:      hidden: true // Hidden for now, will be enabled in future release
src/components/mobile/MobileNavigation.tsx:      {/* Top notification bar (optional) */}
src/components/mobile/MobileNavigation.tsx:      {/* Bottom navigation */}
src/components/mobile/MobileNavigation.tsx:        /* Floating action button style for scan */
src/components/mobile/MobileNavigation.tsx:        /* Responsive adjustments */
src/components/mobile/MobileNavigation.tsx:        /* Dark mode support */
src/components/mobile/tyre/TyreListMobile.tsx:  // Filter tyres based on search and filters
src/components/mobile/tyre/TyreListMobile.tsx:    // Search filter
src/components/mobile/tyre/TyreListMobile.tsx:    // Status filter
src/components/mobile/tyre/TyreListMobile.tsx:    // Condition filter
src/components/mobile/tyre/TyreListMobile.tsx:      // Find tyre by barcode/QR code
src/components/mobile/tyre/TyreListMobile.tsx:        // If not found, search for it
src/components/mobile/tyre/TyreListMobile.tsx:      {/* Header */}
src/components/mobile/tyre/TyreListMobile.tsx:          {/* Search Bar */}
src/components/mobile/tyre/TyreListMobile.tsx:          {/* Filters */}
src/components/mobile/tyre/TyreListMobile.tsx:          {/* Action Buttons */}
src/components/mobile/tyre/TyreListMobile.tsx:      {/* Results Summary */}
src/components/mobile/tyre/TyreListMobile.tsx:      {/* Tyre List */}
src/components/mobile/tyre/TyreListMobile.tsx:      {/* Scanner Modal */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:      {/* Header */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:      {/* Form Content */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:        {/* Tyre Identification */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:        {/* Tread Depth Measurements */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:        {/* Pressure & Conditions */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:        {/* Overall Rating */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:        {/* Photos */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:      {/* Save Button */}
src/components/mobile/tyre/TyreInspectionMobile.tsx:      {/* Scanner Modal */}
src/components/mobile/tyre/TyreScanner.tsx:  // State for dynamically loaded modules
src/components/mobile/tyre/TyreScanner.tsx:  // Store enum values from dynamic imports
src/components/mobile/tyre/TyreScanner.tsx:    // Dynamically load modules
src/components/mobile/tyre/TyreScanner.tsx:        // Load BarcodeScanner module
src/components/mobile/tyre/TyreScanner.tsx:        // Load Camera module and store enums
src/components/mobile/tyre/TyreScanner.tsx:        // Check permissions after modules are loaded
src/components/mobile/tyre/TyreScanner.tsx:        // Handle potentially undefined status.granted
src/components/mobile/tyre/TyreScanner.tsx:        setHasPermission(true); // Web fallback
src/components/mobile/tyre/TyreScanner.tsx:        // Web fallback - show manual input
src/components/mobile/tyre/TyreScanner.tsx:      // Hide background
src/components/mobile/tyre/TyreScanner.tsx:      // Use the dynamically loaded Camera module with properly loaded enums
src/components/mobile/tyre/TyreScanner.tsx:          {/* Scanning Controls */}
src/components/mobile/tyre/TyreScanner.tsx:          {/* Photo Controls */}
src/components/mobile/tyre/TyreScanner.tsx:          {/* Action Buttons */}
src/components/mobile/tyre/TyreScanner.tsx:          {/* Instructions */}
src/components/mobile/tyre/TyreScanner.tsx:      {/* Scanner overlay styles */}
src/components/mobile/tyre/TyreCardMobile.tsx:        {/* Basic Info */}
src/components/mobile/tyre/TyreCardMobile.tsx:        {/* Mount Status & Position */}
src/components/mobile/tyre/TyreCardMobile.tsx:        {/* Additional Info */}
src/components/mobile/tyre/TyreCardMobile.tsx:        {/* Action Buttons */}
src/components/Map/WialonMobileView.tsx:/**
src/components/Map/WialonMobileView.tsx:      {/* Map Container */}
src/components/Map/WialonMobileView.tsx:        {/* Mobile Status Bar */}
src/components/Map/WialonMobileView.tsx:      {/* Mobile Control Panel - Slides up from bottom */}
src/components/Map/GoogleMapComponent.tsx:  center = { lat: -25.7479, lng: 28.2293 }, // Default to Pretoria
src/components/Map/GoogleMapComponent.tsx:  // Use the googleMapsLoader hook to load the API
src/components/Map/GoogleMapComponent.tsx:  // Initialize the map once the API is loaded
src/components/Map/GoogleMapComponent.tsx:      // Create the map instance with responsive options
src/components/Map/GoogleMapComponent.tsx:        mapTypeControl: !isMobile, // Hide map type control on mobile
src/components/Map/GoogleMapComponent.tsx:        streetViewControl: !isMobile, // Hide street view on mobile
src/components/Map/GoogleMapComponent.tsx:          // Position zoom controls on the right side for better mobile UX
src/components/Map/GoogleMapComponent.tsx:      // Add markers if provided
src/components/Map/GoogleMapComponent.tsx:      // Call onMapLoad callback if provided
src/components/Map/GoogleMapComponent.tsx:  // Clean up markers when component unmounts or markers change
src/components/Map/GoogleMapComponent.tsx:  // Predefined styles for different states with responsive height
src/components/Map/FleetMapComponent.tsx:  centerOn?: string; // Vehicle ID to center on
src/components/Map/FleetMapComponent.tsx:/**
src/components/Map/FleetMapComponent.tsx:  initialCenter = { lat: -22.5597, lng: 17.0832 }, // Default to Windhoek, Namibia
src/components/Map/FleetMapComponent.tsx:  // Load fleet data onto the map
src/components/Map/FleetMapComponent.tsx:    // Clear existing markers
src/components/Map/FleetMapComponent.tsx:    // Create info window if it doesn't exist
src/components/Map/FleetMapComponent.tsx:    // Get fleet GeoJSON data
src/components/Map/FleetMapComponent.tsx:    // Create new GeoJSON layer
src/components/Map/FleetMapComponent.tsx:    // Add GeoJSON features to the map
src/components/Map/FleetMapComponent.tsx:    // Set marker styling based on vehicle properties
src/components/Map/FleetMapComponent.tsx:      let iconUrl = "https://maps.google.com/mapfiles/ms/icons/red-dot.png"; // Default
src/components/Map/FleetMapComponent.tsx:      // Choose icon based on vehicle type
src/components/Map/FleetMapComponent.tsx:        iconUrl = "https://maps.google.com/mapfiles/ms/icons/blue-dot.png";
src/components/Map/FleetMapComponent.tsx:        iconUrl = "https://maps.google.com/mapfiles/ms/icons/yellow-dot.png";
src/components/Map/FleetMapComponent.tsx:    // Add click listeners to features
src/components/Map/FleetMapComponent.tsx:      // Show info window with vehicle details
src/components/Map/FleetMapComponent.tsx:        // Create responsive info window content
src/components/Map/FleetMapComponent.tsx:      // Call callback if provided
src/components/Map/FleetMapComponent.tsx:    // If centerOn is provided, find and center on that vehicle
src/components/Map/FleetMapComponent.tsx:        mapInstance.setZoom(15); // Zoom in closer
src/components/Map/FleetMapComponent.tsx:  // Load fleet data when map instance changes
src/components/Map/FleetMapComponent.tsx:  // Update when centerOn changes
src/components/Map/WialonMapComponent.tsx:// Declare global types for external libraries (Wialon SDK, Leaflet, jQuery)
src/components/Map/WialonMapComponent.tsx:// Data Interfaces
src/components/Map/WialonMapComponent.tsx:    s: number; // speed
src/components/Map/WialonMapComponent.tsx:    t: number; // time
src/components/Map/WialonMapComponent.tsx:// Helper component for Unit List Item
src/components/Map/WialonMapComponent.tsx:  // Wialon SDK Access Token
src/components/Map/WialonMapComponent.tsx:  // State for data and UI
src/components/Map/WialonMapComponent.tsx:  // Refs for map instance and elements
src/components/Map/WialonMapComponent.tsx:  // Function to write log messages
src/components/Map/WialonMapComponent.tsx:  // Memoized callback for handling unit clicks
src/components/Map/WialonMapComponent.tsx:  // Initialize the Leaflet map
src/components/Map/WialonMapComponent.tsx:    window.L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
src/components/Map/WialonMapComponent.tsx:      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
src/components/Map/WialonMapComponent.tsx:  // Load Wialon resources and units
src/components/Map/WialonMapComponent.tsx:  // Load geofences for a specific resource
src/components/Map/WialonMapComponent.tsx:  // Display a geofence on the map
src/components/Map/WialonMapComponent.tsx:  // Load sensors for a specific unit
src/components/Map/WialonMapComponent.tsx:  // Helper function to handle resource selection
src/components/Map/WialonMapComponent.tsx:  // Helper function to handle geofence selection
src/components/Map/WialonMapComponent.tsx:  // Main effect to load dependencies and initialize
src/components/Map/WialonMapComponent.tsx:          loadScript("https://code.jquery.com/jquery-latest.min.js"),
src/components/Map/WialonMapComponent.tsx:          loadScript("https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.js"),
src/components/Map/WialonMapComponent.tsx:        await loadScript(`https://hst-api.wialon.com/wsdk/script/wialon.js?v=${Date.now()}`);
src/components/Map/WialonMapComponent.tsx:        window.wialon.core.Session.getInstance().initSession("https://hst-api.wialon.com");
src/components/Map/WialonMapComponent.tsx:    // Cleanup
src/components/Map/WialonMapComponent.tsx:  // Effect to load geofences whenever a new resource is selected
src/components/Map/WialonMapComponent.tsx:  // Placeholder for a detailed info panel for the selected unit
src/components/Map/WialonMapComponent.tsx:      {/* Sidebar */}
src/components/Map/WialonMapComponent.tsx:          {/* Section: Unit Status */}
src/components/Map/WialonMapComponent.tsx:          {/* Section: Selected Unit Info Panel */}
src/components/Map/WialonMapComponent.tsx:          {/* Section: Tracking Orders */}
src/components/Map/WialonMapComponent.tsx:          {/* Section: Geofence Management */}
src/components/Map/WialonMapComponent.tsx:      {/* Main Content (Map and Log) */}
src/components/Map/WialonMapComponent.tsx:        {/* Log Panel */}
src/components/Map/MapsView.tsx:  // Use direct Wialon link with token
src/components/Map/MapsView.tsx:    "https://hosting.wialon.eu/?lang=c1099bc37c906fd0832d8e783b60ae0d8A24EF10D94BC85901A68544D53D01792B377AD3";
src/components/Map/MapsView.tsx:  // Responsive iframe style
src/components/Map/MapsView.tsx:  // Handle iframe load error
src/components/Map/MapsView.tsx:      // Listen for error messages from the iframe
src/components/Map/MapsView.tsx:  // Handler to open Wialon in a new window
src/components/Map/EnhancedMapComponent.tsx:// ———— REMOVE ALL PATCHERS & LOADERS ————
src/components/Map/EnhancedMapComponent.tsx:// Removed: import "../../utils/googleMapsApiPatch";
src/components/Map/EnhancedMapComponent.tsx:// Removed: import { isGoogleMapsAPILoaded, useLoadGoogleMaps } from "../../utils/googleMapsLoader";
src/components/Map/EnhancedMapComponent.tsx:  // Make container style responsive with default height that adapts to screen size
src/components/Map/EnhancedMapComponent.tsx:  // Initialize Places service when map is loaded
src/components/Map/EnhancedMapComponent.tsx:        setPlacesService(service); // Store the actual service instance
src/components/Map/EnhancedMapComponent.tsx:  // Handle search
src/components/Map/EnhancedMapComponent.tsx:        map: mapInstance, // Pass map instance
src/components/Map/EnhancedMapComponent.tsx:      // Fit bounds to results
src/components/Map/EnhancedMapComponent.tsx:  // Handle map load
src/components/Map/EnhancedMapComponent.tsx:  // All visible locations (original + search results)
src/components/Map/EnhancedMapComponent.tsx:  // Determine if we should show routes
src/components/Map/EnhancedMapComponent.tsx:      {/* Places search input */}
src/components/Map/EnhancedMapComponent.tsx:      {/* Google Map */}
src/components/Map/EnhancedMapComponent.tsx:            // Position zoom controls on the right side for better mobile UX
src/components/Map/EnhancedMapComponent.tsx:        {/* Markers */}
src/components/Map/EnhancedMapComponent.tsx:        {/* Routes between locations */}
src/components/Map/EnhancedMapComponent.tsx:        {/* Info window for selected location */}
src/components/Map/EnhancedMapComponent.tsx:      {/* Location detail panel */}
src/components/testing/UIConnector.tsx:// UIConnector.tsx
src/components/testing/UIConnector.tsx:// A component to inject into the app for testing UI interactions
src/components/testing/UIConnector.tsx:    // Find buttons
src/components/testing/UIConnector.tsx:    // Find forms
src/components/testing/UIConnector.tsx:    // Find links
src/components/testing/UIConnector.tsx:    // Analyze buttons
src/components/testing/UIConnector.tsx:      // Check if button has click handler
src/components/testing/UIConnector.tsx:    // Analyze forms
src/components/testing/UIConnector.tsx:      // Check if form has submit handler
src/components/testing/UIConnector.tsx:    // Analyze links
src/components/testing/UIConnector.tsx:    // Remove previous highlights
src/components/testing/UIConnector.tsx:    // Add highlights based on type
src/components/testing/UIConnector.tsx:      // For buttons, check connection status
src/components/testing/UIConnector.tsx:      // For forms, check connection status
src/components/testing/UIConnector.tsx:      // For links, check if href is valid
src/components/testing/UIConnector.tsx:    // Handle toggle open/close
src/components/testing/UIConnector.tsx:    // Handle re-analyze
src/components/testing/UIConnector.tsx:    // Handle remove highlights
src/components/testing/UIConnector.tsx:    // Handle highlight buttons
src/components/testing/GoogleMapsTest.tsx:      // Check Google Maps configuration first
src/components/testing/GoogleMapsTest.tsx:    // Initialize map when API is loaded
src/components/testing/GoogleMapsTest.tsx:          center: { lat: -26.2041, lng: 28.0473 }, // Johannesburg
src/components/testing/GoogleMapsTest.tsx:        // Add a marker
src/components/testing/GoogleMapsTest.tsx:  // Use the environment checker utility
src/components/testing/GoogleMapsTest.tsx:    // Log raw values for debugging
src/components/testing/GoogleMapsTest.tsx:  // API Key info
src/components/testing/GoogleMapsTest.tsx:            {/* Dynamic Google Maps JS API */}
src/components/testing/GoogleMapsTest.tsx:            {/* Google Maps Embed API */}
src/components/testing/GoogleMapsTest.tsx:                  `https://www.google.com/maps/embed/v1/view?key=${apiKey}&center=-26.2041,28.0473&zoom=12`}
src/components/WialonUnitsMapMarkers.tsx:import * as L from 'leaflet'; // Explicitly import Leaflet as a module
src/components/WialonUnitsMapMarkers.tsx:// This file assumes a parent component manages the Leaflet map instance
src/components/WialonUnitsMapMarkers.tsx:// and passes it down as a prop.
src/components/WialonUnitsMapMarkers.tsx:    // Add other relevant data for the popup
src/components/WialonUnitsMapMarkers.tsx:    // Use a Map object to store markers, with number as the key
src/components/WialonUnitsMapMarkers.tsx:        // Cleanup function: remove all markers from the map
src/components/WialonUnitsMapMarkers.tsx:        // Update existing markers and add new ones
src/components/WialonUnitsMapMarkers.tsx:                // Update existing marker position
src/components/WialonUnitsMapMarkers.tsx:                // Create a new marker and add it to the map
src/components/WialonUnitsMapMarkers.tsx:            // Update marker popup content
src/components/WialonUnitsMapMarkers.tsx:        // Remove markers that are no longer in the units list
src/components/WialonUnitsMapMarkers.tsx:    // This component doesn't render anything to the DOM
src/components/diagnostic/WialonDiagnosticTool.tsx:/**
src/components/common/FleetDropdown.tsx:  // Get fleet data from our centralized hook
src/components/common/FleetSelector.tsx:/**
src/components/common/FleetSelector.tsx:  // Update input value when external value changes
src/components/common/FleetSelector.tsx:  // Handle validation
src/components/common/VehicleSelector.tsx:  // Helper to render vehicle details if needed
src/components/GeofenceTable.tsx:  // Load Wialon resources
src/components/GeofenceTable.tsx:  // Load geofences
src/components/MobileQRScanner.tsx:// src/components/MobileQRScanner.tsx
src/components/MobileQRScanner.tsx:      // Check if a result was returned and it's not null before calling onScanComplete
src/components/MobileQRScanner.tsx:      // Using an "as Error" type assertion for better error handling
src/components/DeploymentFallback.tsx:// Simple fallback component for debugging deployment issues
src/components/ui/ConnectionStatusIndicator.tsx:    // Subscribe to connection status changes
src/components/ui/ConnectionStatusIndicator.tsx:      // Check network connectivity first
src/components/ui/ConnectionStatusIndicator.tsx:  // Render different indicators based on status and network quality
src/components/ui/ConnectionStatusIndicator.tsx:    // If network is being checked or reconnecting
src/components/ui/ConnectionStatusIndicator.tsx:    // If network is limited (connected to internet but not to Firebase)
src/components/ui/ConnectionStatusIndicator.tsx:    // If network is offline
src/components/ui/ConnectionStatusIndicator.tsx:    // If Firestore status is used for the rest
src/components/ui/checkbox.tsx:// src/components/ui/checkbox.tsx
src/components/ui/Input.tsx:// Extended to allow number values and pass through native input props (e.g., required, min, step)
src/components/ui/new-job-card.tsx:import { db } from "../../firebase"; // Your Firestore instance
src/components/ui/new-job-card.tsx:import { doc, setDoc } from "firebase/firestore"; // Firestore functions
src/components/ui/new-job-card.tsx:// Local state shape aligned with central JobCardTask
src/components/ui/new-job-card.tsx:// Helper function to create an empty job card
src/components/ui/new-job-card.tsx:  const userName = "John Doe"; // Get from Auth Context in a real app
src/components/ui/new-job-card.tsx:      // Map optional fields to expected shape
src/components/ui/new-job-card.tsx:    // Basic validation
src/components/ui/new-job-card.tsx:      setActiveTab("general"); // Navigate to the tab with the error
src/components/ui/new-job-card.tsx:      // Create a document reference and save the job card to Firestore
src/components/ui/new-job-card.tsx:              onLogTaskHistory={() => {}} // Placeholder, could be implemented with Firestore
src/components/ui/UnitsTable.tsx:  // Main filtering and sorting
src/components/ui/UnitsTable.tsx:      // Search filter (name or id)
src/components/ui/UnitsTable.tsx:      // Online filter (assume position exists means online)
src/components/ui/UnitsTable.tsx:    // Sorting
src/components/ui/UnitsTable.tsx:  // Format position for display
src/components/ui/UnitsTable.tsx:  // Google Maps link
src/components/ui/UnitsTable.tsx:      ? `https://maps.google.com/maps?q=${pos.lat},${pos.lng}`
src/components/ui/UnitsTable.tsx:  // Handle sort change
src/components/ui/FirestoreConnectionError.tsx:  // Optional explicitly passed error (original behavior)
src/components/ui/FirestoreConnectionError.tsx:  // Whether to always show the component, even in connected state (as a status indicator)
src/components/ui/FirestoreConnectionError.tsx:/**
src/components/ui/FirestoreConnectionError.tsx:  // State to track connection status and errors
src/components/ui/FirestoreConnectionError.tsx:  // Listen for connection status changes
src/components/ui/FirestoreConnectionError.tsx:    // Subscribe to connection status changes from our handler
src/components/ui/FirestoreConnectionError.tsx:    // Listen for custom firestore-connection-error events
src/components/ui/FirestoreConnectionError.tsx:  // Handle retry button click
src/components/ui/FirestoreConnectionError.tsx:      // Connection status will be updated via the onConnectionStatusChanged listener
src/components/ui/FirestoreConnectionError.tsx:  // Hide if connected and not set to always show
src/components/ui/FirestoreConnectionError.tsx:  // Different color schemes based on status
src/components/ui/FirestoreConnectionError.tsx:  // Get appropriate title and message based on status
src/components/ui/FirestoreConnectionError.tsx:  // Icon selection based on state
src/components/ui/OfflineBanner.tsx:      // If we're back online, try to sync offline operations
src/components/ui/OfflineBanner.tsx:        // Show the sync results briefly, then hide
src/components/ui/unitTable.tsx:// Assuming this hook returns units based on a Wialon API token.
src/components/ui/unitTable.tsx:// The `useWialonUnits` hook file should be located at `../../hooks/useWialonUnits.ts`
src/components/ui/unitTable.tsx:// and should look something like the example provided below this code block.
src/components/ui/unitTable.tsx:// Define comprehensive types
src/components/ui/unitTable.tsx:    c?: number; // course
src/components/ui/unitTable.tsx:    s?: number; // speed
src/components/ui/unitTable.tsx:    t?: number; // timestamp
src/components/ui/unitTable.tsx:    nm?: string; // unit name
src/components/ui/unitTable.tsx:    cls?: number; // unit class
src/components/ui/unitTable.tsx:    hw?: string; // hardware type
src/components/ui/unitTable.tsx:    ph?: string; // phone number
src/components/ui/unitTable.tsx:    ph2?: string; // phone number 2
src/components/ui/unitTable.tsx:    psw?: string; // password
src/components/ui/unitTable.tsx:    cmds?: any[]; // commands
src/components/ui/unitTable.tsx:    prps?: any; // custom properties
src/components/ui/unitTable.tsx:    flds?: any; // custom fields
src/components/ui/unitTable.tsx:    aflds?: any; // admin fields
src/components/ui/unitTable.tsx:    pflds?: any; // profile fields
src/components/ui/unitTable.tsx:    online?: boolean; // Added for the filter to work
src/components/ui/unitTable.tsx:    // Corrected hook call: Pass the Wialon token instead of the boolean flag.
src/components/ui/unitTable.tsx:    // State for filtering and sorting
src/components/ui/unitTable.tsx:    // Memoized filtered and sorted units
src/components/ui/unitTable.tsx:            // Search filter
src/components/ui/unitTable.tsx:            // Online filter
src/components/ui/unitTable.tsx:                return !!unit.pos; // A unit is "online" if it has a position (last message)
src/components/ui/unitTable.tsx:        // Sorting
src/components/ui/unitTable.tsx:                    aValue = String(a.id || ""); // Ensure ID is a string for sorting
src/components/ui/unitTable.tsx:    // Format position for display
src/components/ui/unitTable.tsx:    // Get coordinates as Google Maps link
src/components/ui/unitTable.tsx:        return `https://maps.google.com/maps?q=${pos.y},${pos.x}`;
src/components/ui/unitTable.tsx:    // Handle sort change
src/components/ui/unitTable.tsx:    // Loading state
src/components/ui/unitTable.tsx:    // Error state
src/components/ui/unitTable.tsx:    // No units state
src/components/ui/unitTable.tsx:            {/* Header */}
src/components/ui/unitTable.tsx:                {/* Filters */}
src/components/ui/unitTable.tsx:            {/* Table */}
src/components/ui/unitTable.tsx:            {/* Footer */}
src/components/ui/UIConnector.tsx:// Types
src/components/ui/UIConnector.tsx:/**
src/components/ui/UIConnector.tsx:  // Apply styles when component mounts
src/components/ui/UIConnector.tsx:    // Create style element for highlighting UI elements
src/components/ui/UIConnector.tsx:    // CSS to highlight different UI elements
src/components/ui/UIConnector.tsx:    // Analyze the UI
src/components/ui/UIConnector.tsx:    // Cleanup function
src/components/ui/UIConnector.tsx:  // Function to analyze the UI and apply highlights
src/components/ui/UIConnector.tsx:    // Remove existing highlights
src/components/ui/UIConnector.tsx:    // Track statistics
src/components/ui/UIConnector.tsx:    // Find all buttons
src/components/ui/UIConnector.tsx:    // Find all forms
src/components/ui/UIConnector.tsx:    // Find all inputs
src/components/ui/UIConnector.tsx:    // Update status
src/components/ui/UIConnector.tsx:  // Helper function to check for click handlers
src/components/ui/UIConnector.tsx:  // Helper function to check for submit handlers
src/components/ui/UIConnector.tsx:  // Helper function to check for change handlers
src/components/ui/UIConnector.tsx:  // Helper function to get event listeners (simplified implementation)
src/components/ui/UIConnector.tsx:    // This is a simplified approach that won't catch all handlers
src/components/ui/UIConnector.tsx:    // In a real implementation, we'd need to use browser devtools APIs
src/components/ui/UIConnector.tsx:    // or monkey-patch addEventListener
src/components/ui/UIConnector.tsx:    // Check for onclick attribute
src/components/ui/UIConnector.tsx:    // Check for onsubmit attribute
src/components/ui/UIConnector.tsx:    // Check for onchange attribute
src/components/ui/UIConnector.tsx:    // For React components, check for special properties
src/components/ui/UIConnector.tsx:    // This is a heuristic approach and won't catch all React handlers
src/components/ui/UIConnector.tsx:  // Helper function to add tag to element
src/components/ui/UIConnector.tsx:  // Remove all highlights
src/components/ui/UIConnector.tsx:  // Toggle the connector on/off
src/components/ui/UIConnector.tsx:  // Toggle the report display
src/components/ui/UIConnector.tsx:  // Calculate the connection percentage
src/components/ui/UIConnector.tsx:  // Handle button clicks based on button text
src/components/ui/AntDesignWrapper.tsx:// Type definition for Ant Design's default export
src/components/ui/AntDesignWrapper.tsx:  // Add other components you need...
src/components/ui/AntDesignWrapper.tsx:// Create a context for Ant Design components
src/components/ui/AntDesignWrapper.tsx:// Wrapper component
src/components/ui/AntDesignWrapper.tsx:        // Initialize other components...
src/components/ui/AntDesignWrapper.tsx:// Hook to access Ant Design components
src/components/ui/AntDesignWrapper.tsx:// Individual component wrappers
src/components/ui/AntDesignWrapper.tsx:// Add more component wrappers as needed...
src/components/ui/AntDesignWrapper.tsx:// Default export
src/components/ui/AntDesignWrapper.tsx:  // Export other components...
src/components/ui/JobCardTable.tsx:  assigned: string[]; // Array of assigned tech/user names or IDs
src/components/ui/JobCardTable.tsx:              {/* dropdown actions, e.g. */}
src/components/ui/JobCardTable.tsx:              {/* <ActionDropdown onAction={a => onAction(row.id, a)} /> */}
src/components/ui/index.ts:/**
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Core UI Components
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Button Component
src/components/ui/index.ts:// Card Components
src/components/ui/index.ts:// Alert Components
src/components/ui/index.ts:// Input Components
src/components/ui/index.ts:// Table Components
src/components/ui/index.ts:// Navigation Components
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Form Components
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Form components
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Specialized Components
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Status & Progress Components
src/components/ui/index.ts:// Page Components
src/components/ui/index.ts:// Dialog Components
src/components/ui/index.ts:// Step Components
src/components/ui/index.ts:// Display Components
src/components/ui/index.ts:// Error Display
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Data Visualization
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// -------------------------
src/components/ui/index.ts:// Provider Components
src/components/ui/index.ts:// -------------------------
src/components/ui/InspectionItemCard.tsx:// src/components/workshop/InspectionItemCard.tsx
src/components/ui/InspectionItemCard.tsx:  // Legacy props for backward compatibility
src/components/ui/InspectionItemCard.tsx:  // Legacy props
src/components/ui/InspectionItemCard.tsx:  // Use current props if available, fallback to legacy props
src/components/ui/LoadingIndicator.tsx:        xmlns="http://www.w3.org/2000/svg" 
src/components/ui/ErrorMessage.tsx:// Import from our error handling utils if available
src/components/ui/ErrorMessage.tsx:  // Get styles based on severity
src/components/ui/ErrorMessage.tsx:  // Format timestamp if provided
src/components/ui/form.tsx:import React from "react";// Placeholder for the missing form module
src/components/ui/form.tsx:    // Field-level event handling
src/components/ui/User.tsx:      xmlns="http://www.w3.org/2000/svg"
src/components/ui/ApplicantInfoCard.tsx:  // Voeg meer fields by soos jy nodig het
src/components/ui/ApplicantInfoCard.tsx:/**
src/components/ui/badge.tsx:/**
src/components/ui/badge.tsx:  /** Visual style variant of the badge */
src/components/ui/badge.tsx:  /** Size variant of the badge */
src/components/ui/badge.tsx:  /** Whether to show a status dot indicator */
src/components/ui/badge.tsx:  /** Badge content */
src/components/ui/badge.tsx:        // Size variations
src/components/ui/badge.tsx:        // Color variations
src/components/ui/badge.tsx:// Add default export for compatibility with uppercase version
src/components/ui/InspectionFormPDS.tsx:// src/components/ui/InspectionFormPDS.tsx
src/components/ui/InspectionFormPDS.tsx:  // Flattened list of all items for mapping status
src/components/ui/InspectionFormPDS.tsx:  // Use state to manage item statuses
src/components/ui/InspectionFormPDS.tsx:      // Always preserve all required InspectionItem fields, especially sn
src/components/ui/InspectionFormPDS.tsx:      // Defensive: should never happen
src/components/ui/InspectionFormPDS.tsx:      // Defensive: should never happen
src/components/ui/InspectionFormPDS.tsx:  // Form submission handler (implement backend integration here)
src/components/ui/InspectionFormPDS.tsx:    // Collect all form data
src/components/ui/InspectionFormPDS.tsx:    // TODO: API call to backend
src/components/ui/InspectionFormPDS.tsx:  // Used for rendering: flat index of items
src/components/ui/InspectionFormPDS.tsx:      {/* Inspection Details */}
src/components/ui/InspectionFormPDS.tsx:      {/* Vehicle Details */}
src/components/ui/InspectionFormPDS.tsx:      {/* Inspection Sections */}
src/components/ui/InspectionFormPDS.tsx:                // Ensure index is within bounds
src/components/ui/InspectionFormPDS.tsx:      {/* Additional Notes */}
src/components/ui/InspectionFormPDS.tsx:      {/* Condition & Safety */}
src/components/ui/InspectionFormPDS.tsx:      {/* Submission */}
src/components/ui/Select.tsx:  options?: SelectOption[]; // Gebruik dit as jy nie <Select.Item> gebruik nie
src/components/ui/Select.tsx:  children?: React.ReactNode; // Alternatief vir <Select.Item>
src/components/ui/Select.tsx:// Optional subcomponents (for API consistency if needed)
src/components/ui/Modal.tsx:  /** extra classes vir outer panel */
src/components/ui/Modal.tsx:  /** as jy nie die default footer wil hê nie */
src/components/ui/Modal.tsx:  /** custom footer */
src/components/ui/Modal.tsx:  // As jy 'n portal wil gebruik:
src/components/ui/Modal.tsx:  // return createPortal( ... , document.body);
src/components/ui/Modal.tsx:        {/* Backdrop */}
src/components/ui/Modal.tsx:        {/* Panel */}
src/components/ui/Modal.tsx:          {/* Header */}
src/components/ui/Modal.tsx:          {/* use id to bind with aria-labelledby */}
src/components/ui/Modal.tsx:          {/* Content */}
src/components/ui/Modal.tsx:          {/* Footer */}
src/components/ui/AntDesignProvider.tsx:/**
src/components/ui/GenericPlaceholderPage.tsx:  // Generate a title based on the route if none is provided
src/components/ui/GenericPlaceholderPage.tsx:    // Extract the main section from the path
src/components/ui/GenericPlaceholderPage.tsx:  // Generate breadcrumbs based on the current path
src/components/ui/GenericPlaceholderPage.tsx:          // Don't make the last segment a link and handle special cases
src/components/ui/GenericPlaceholderPage.tsx:          // Build the path for this breadcrumb
src/components/ui/FormElements.tsx:/* ----------------------------------
src/components/ui/FormElements.tsx:    {/* Label for the input field, with a required indicator if needed */}
src/components/ui/FormElements.tsx:    {/* Input element with dynamic styling based on error or disabled state */}
src/components/ui/FormElements.tsx:    {/* Display error message if present */}
src/components/ui/FormElements.tsx:/* ----------------------------------
src/components/ui/FormElements.tsx:    {/* Label for the select field, with a required indicator if needed */}
src/components/ui/FormElements.tsx:    {/* Select element with dynamic styling based on error or disabled state */}
src/components/ui/FormElements.tsx:      {/* Map through options to create individual <option> elements */}
src/components/ui/FormElements.tsx:    {/* Display error message if present */}
src/components/ui/FormElements.tsx:/* ----------------------------------
src/components/ui/FormElements.tsx:    {/* Optional label for the textarea, with a required indicator if needed */}
src/components/ui/FormElements.tsx:    {/* Textarea element with dynamic styling based on error or disabled state */}
src/components/ui/FormElements.tsx:    {/* Display error message if present */}
src/components/ui/FormElements.tsx:// Alias export to support both TextArea and Textarea naming
src/components/ui/FormElements.tsx:/* ----------------------------------
src/components/ui/FormElements.tsx:    {/* Optional label for the file input */}
src/components/ui/FormElements.tsx:    {/* File input element with custom styling for the file button */}
src/components/ui/FormElements.tsx:    {/* Display error message if present */}
src/components/ui/FormElements.tsx:// Export all components as a default object for convenience
src/components/ui/SyncIndicator.tsx:  // Simulate sync activity when connection status changes
src/components/ui/SyncIndicator.tsx:  // Format time since last sync
src/components/ui/chart/FleetUtilizationLine.tsx:// Register ChartJS components ONCE globally
src/components/ui/chart/FleetUtilizationLine.tsx:  // Safety fallback to avoid crashing if data is undefined
src/components/ui/chart/FleetAnalyticsLineChart.tsx:// Define chart configuration
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    color: "#4030a0", // Further darkened for better contrast
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    bgColor: "#eceafe", // Light background color for text
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    color: "#157540", // Further darkened for better contrast
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    bgColor: "#e6f5ee", // Light background color for text
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    color: "#a63c00", // Further darkened for better contrast
src/components/ui/chart/FleetAnalyticsLineChart.tsx:    bgColor: "#fff1e6", // Light background color for text
src/components/ui/chart/FleetAnalyticsLineChart.tsx:// Custom tooltip component
src/components/ui/chart/FleetAnalyticsLineChart.tsx:// Import useState from react
src/components/ui/chart/FleetStatusDoughnut.tsx:import { ArcElement, Chart as ChartJS, Legend, Tooltip } from "chart.js"; // FIX: Correct path is 'chart.js'
src/components/ui/chart/FleetStatusDoughnut.tsx:// Register Chart.js components globally
src/components/ui/chart/FleetStatusDoughnut.tsx:  // Safe fallback in case fleetStatus is undefined
src/components/ui/chart/DateRangePicker.tsx:// Using native select instead of custom components
src/components/ui/chart/DateRangePicker.tsx:// Pre-defined date range options
src/components/ui/chart/DateRangePicker.tsx:  // Handle preset selection
src/components/ui/chart/DateRangePicker.tsx:        newStart = new Date(now.getFullYear(), 0, 1); // Jan 1st of current year
src/components/ui/chart/DateRangePicker.tsx:        newStart = new Date(2024, 0, 1); // Start from Jan 1, 2024
src/components/ui/chart/DateRangePicker.tsx:        newEnd = addMonths(now, 6); // Project 6 months into future
src/components/ui/chart/DateRangePicker.tsx:  // Move range backward/forward by the current range span
src/components/ui/chart/DateRangePicker.tsx:  // Format date for display
src/components/ui/chart/ChartFilterForm.tsx:// Define the schema for the form
src/components/ui/chart/ChartFilterForm.tsx:// Define our data points
src/components/ui/chart/index.ts:/**
src/components/ui/chart/index.ts:// Chart filters and pickers
src/components/ui/chart/index.ts:// Fleet charts
src/components/ui/chart/index.ts:// Performance charts
src/components/ui/chart/index.ts:// Optimized components
src/components/ui/chart/VehicleUtilizationChart.tsx:// Chart configuration with colors
src/components/ui/chart/VehicleUtilizationChart.tsx:    color: "#1a5a9d", // Further darkened for better contrast
src/components/ui/chart/VehicleUtilizationChart.tsx:    color: "#4030a0", // Further darkened for better contrast
src/components/ui/chart/VehicleUtilizationChart.tsx:    color: "#157540", // Further darkened for better contrast
src/components/ui/chart/VehicleUtilizationChart.tsx:// Background colors for styling (separate from chart config)
src/components/ui/chart/OptimizedChart.tsx:// Loading placeholder
src/components/ui/chart/OptimizedChart.tsx:// Higher-order component to optimize chart rendering
src/components/ui/chart/OptimizedChart.tsx:// Lazy load chart components
src/components/ui/chart/PerformanceLineChart.tsx:// Register ChartJS components
src/components/ui/chart/ROIBarChart.tsx:// Register ChartJS components
src/components/ui/Card.tsx:  action?: React.ReactNode; // Added action prop to support custom actions
src/components/ui/Card.tsx:  icon, // Destructure the icon prop
src/components/ui/Card.tsx:  action, // Destructure the action prop
src/components/ui/Card.tsx:      {action && <div>{action}</div>} {/* Render the action prop */}
src/components/ui/VendorTable.tsx:// src/components/vendors/VendorTable.tsx
src/components/ui/Button.tsx:import { cn } from "../../utils/cn"; // Assuming this utility is available
src/components/ui/Button.tsx:        danger: "bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-500", // New alias
src/components/ui/consolidated/index.ts:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:  variant?: "default" | "simple"; // Add variant support for different styling
src/components/ui/consolidated/Card.tsx:  heading?: React.ReactNode;      // Use heading instead of title
src/components/ui/consolidated/Card.tsx:  title?: React.ReactNode;        // Added for backward compatibility
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:/**
src/components/ui/consolidated/Card.tsx:// Export all card components
src/components/ui/consolidated/Card.tsx:// Export default for backward compatibility
src/components/ui/Calendar.tsx:  start: string; // ISO date string
src/components/ui/Calendar.tsx:  end: string; // ISO date string
src/components/ui/Calendar.tsx:  // Sample trip events for the calendar
src/components/ui/Calendar.tsx:  // Move to previous month
src/components/ui/Calendar.tsx:  // Move to next month
src/components/ui/Calendar.tsx:  // (Removed unused helper getDayOfMonth)
src/components/ui/Calendar.tsx:  // Helper to check if a trip event is on a specific day
src/components/ui/Calendar.tsx:      const eventStartDay = event.start.substring(0, 10); // YYYY-MM-DD
src/components/ui/Calendar.tsx:  // Get month name
src/components/ui/Calendar.tsx:      {/* Calendar Controls */}
src/components/ui/Calendar.tsx:      {/* Calendar Grid */}
src/components/ui/Calendar.tsx:            {/* Day headers */}
src/components/ui/Calendar.tsx:            {/* Calendar days */}
src/components/ui/Calendar.tsx:                  {/* Trips for this day */}
src/components/ui/Calendar.tsx:      {/* Upcoming Trips */}
src/components/FuelParameterUpdater.tsx:      {/* Corrected: Conditionally render a success message when the success state is truthy. */}
src/components/dashboard/WialonFleetDashboard.tsx:      {/* Header */}
src/components/dashboard/WialonFleetDashboard.tsx:      {/* Error Display */}
src/components/dashboard/WialonFleetDashboard.tsx:      {/* Units Grid */}
src/components/dashboard/WialonFleetDashboard.tsx:      {/* Unit Details Panel */}
src/components/dashboard/WialonFleetDashboard.tsx:      {/* Stats Summary */}
src/components/LazyComponent.tsx:/**
src/components/LazyComponent.tsx:  // Default loading fallback
src/components/LazyComponent.tsx:/**
src/components/Cost Management/IndirectCostBreakdown.tsx:  // Mock data - in real app, this would come from Firestore
src/components/Cost Management/IndirectCostBreakdown.tsx:    // Simulate API call/Firestore fetch
src/components/forms/FleetSelectionForm.tsx:// src/components/forms/FleetSelectionForm.tsx
src/components/forms/FleetSelectionForm.tsx:/**
src/components/forms/FleetSelectionForm.tsx:// Removed FormSelector in favor of direct select elements to utilize loading & options state
src/components/forms/FleetSelectionForm.tsx:  // Form state
src/components/forms/FleetSelectionForm.tsx:  // Form validation
src/components/forms/FleetSelectionForm.tsx:  // Get options from Firestore
src/components/forms/FleetSelectionForm.tsx:  // Load fleet & position options (filtered by vehicle type)
src/components/forms/FleetSelectionForm.tsx:  // Form submission handler
src/components/forms/FleetSelectionForm.tsx:  // Handle fleet selection
src/components/forms/FleetSelectionForm.tsx:    // Find the selected fleet vehicle
src/components/forms/FleetSelectionForm.tsx:      // Update the form data with vehicle details
src/components/forms/FleetSelectionForm.tsx:  // Handle input changes
src/components/forms/FleetSelectionForm.tsx:    // Clear errors when field is changed
src/components/forms/FleetSelectionForm.tsx:    // Reset dependent fields for vehicle type changes
src/components/forms/FleetSelectionForm.tsx:  // Validation schema
src/components/forms/FleetSelectionForm.tsx:  // Handle form submission
src/components/forms/FleetSelectionForm.tsx:    // Validate form
src/components/forms/FleetSelectionForm.tsx:        createdBy: "currentUser", // Replace with actual user ID
src/components/forms/FleetSelectionForm.tsx:      // Reset form if successful
src/components/forms/FleetSelectionForm.tsx:  // Show success message when form is successfully submitted
src/components/forms/FleetSelectionForm.tsx:      // Show success toast or message
src/components/forms/FleetSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/FleetSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/FleetSelectionForm.tsx:        {/* Vehicle Type */}
src/components/forms/FleetSelectionForm.tsx:        {/* Fleet Selection */}
src/components/forms/FleetSelectionForm.tsx:        {/* Vehicle Position */}
src/components/forms/FleetSelectionForm.tsx:        {/* Status */}
src/components/forms/FleetSelectionForm.tsx:        {/* Notes */}
src/components/forms/FleetSelectionForm.tsx:      {/* Form Actions */}
src/components/forms/driver/EnhancedDriverForm.tsx:// Remove unused import
src/components/forms/driver/EnhancedDriverForm.tsx:// import { useNavigate } from 'react-router-dom';
src/components/forms/driver/EnhancedDriverForm.tsx:// Mock hooks (replace with your actual hooks)
src/components/forms/driver/EnhancedDriverForm.tsx:// Mock UI components (replace with your actual UI components)
src/components/forms/driver/EnhancedDriverForm.tsx:// Helper function for PDF generation
src/components/forms/driver/EnhancedDriverForm.tsx:  // Ensure dateHired is always a string by providing default value
src/components/forms/driver/EnhancedDriverForm.tsx:  // Remove unused navigate
src/components/forms/driver/EnhancedDriverForm.tsx:  // const navigate = useNavigate();
src/components/forms/driver/EnhancedDriverForm.tsx:  // Get data from hooks
src/components/forms/driver/EnhancedDriverForm.tsx:  // Form state
src/components/forms/driver/EnhancedDriverForm.tsx:      // Ensure dateHired is always a string
src/components/forms/driver/EnhancedDriverForm.tsx:  // File uploads state
src/components/forms/driver/EnhancedDriverForm.tsx:  // Remove unused uploadProgress state
src/components/forms/driver/EnhancedDriverForm.tsx:  // const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});
src/components/forms/driver/EnhancedDriverForm.tsx:  // Validation state
src/components/forms/driver/EnhancedDriverForm.tsx:  // Offline form handling
src/components/forms/driver/EnhancedDriverForm.tsx:  // Calculate age based on ID number (South African format)
src/components/forms/driver/EnhancedDriverForm.tsx:  // Removed for brevity...
src/components/forms/driver/EnhancedDriverForm.tsx:    // Handle nested fields
src/components/forms/driver/EnhancedDriverForm.tsx:    // Clear error when field is edited
src/components/forms/driver/EnhancedDriverForm.tsx:    // Handle license categories checkbox
src/components/forms/driver/EnhancedDriverForm.tsx:    setFormData((prev: DriverData) => { // Explicitly type prev
src/components/forms/driver/EnhancedDriverForm.tsx:    // Required fields
src/components/forms/driver/EnhancedDriverForm.tsx:    // License validation
src/components/forms/driver/EnhancedDriverForm.tsx:    // Check if license is expired
src/components/forms/driver/EnhancedDriverForm.tsx:      // Upload any files first
src/components/forms/driver/EnhancedDriverForm.tsx:      // Use the passed submit handler or the default offline form submit
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Profile Photo */}
src/components/forms/driver/EnhancedDriverForm.tsx:                accept="image/*"
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Personal Information Section */}
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Address Section */}
src/components/forms/driver/EnhancedDriverForm.tsx:              options={countries.map(country => ({ value: country.name, label: country.name }))} // Pass options prop
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Employment Information */}
src/components/forms/driver/EnhancedDriverForm.tsx:              options={statusOptions} // Pass options prop
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Driver's License Information */}
src/components/forms/driver/EnhancedDriverForm.tsx:              options={licenseStatusOptions} // Pass options prop
src/components/forms/driver/EnhancedDriverForm.tsx:              options={countries.map(country => ({ value: country.name, label: country.name }))} // Pass options prop
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Emergency Contact */}
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Medical Information */}
src/components/forms/driver/EnhancedDriverForm.tsx:              ]} // Pass options prop
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Additional Documents */}
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Offline Warning */}
src/components/forms/driver/EnhancedDriverForm.tsx:      {/* Form Actions */}
src/components/forms/driver/DriverBehaviorEventForm.tsx:    followUpRequired: false, // Adding missing required property
src/components/forms/driver/DriverBehaviorEventForm.tsx:  // Initialize form with event data if editing
src/components/forms/driver/DriverBehaviorEventForm.tsx:      // Reset form for new event
src/components/forms/driver/DriverBehaviorEventForm.tsx:  // Handle form changes
src/components/forms/driver/DriverBehaviorEventForm.tsx:      // Auto-calculate points based on event type
src/components/forms/driver/DriverBehaviorEventForm.tsx:    // Clear error for this field
src/components/forms/driver/DriverBehaviorEventForm.tsx:  // Validate form
src/components/forms/driver/DriverBehaviorEventForm.tsx:  // Handle form submission
src/components/forms/driver/DriverBehaviorEventForm.tsx:      driverId: "unknown", // Placeholder - in a real app, get from selected driver
src/components/forms/driver/DriverBehaviorEventForm.tsx:      reportedBy: "Current User", // In a real app, use the logged-in user
src/components/forms/driver/DriverBehaviorEventForm.tsx:      // Update existing event
src/components/forms/driver/DriverBehaviorEventForm.tsx:      // Add new event
src/components/forms/driver/DriverBehaviorEventForm.tsx:  // Handle initiating CAR
src/components/forms/driver/DriverBehaviorEventForm.tsx:        {/* Form Instructions */}
src/components/forms/driver/DriverBehaviorEventForm.tsx:        {/* Form Fields */}
src/components/forms/driver/DriverBehaviorEventForm.tsx:        {/* Supporting Documents */}
src/components/forms/driver/DriverBehaviorEventForm.tsx:        {/* Initiate CAR option for existing events */}
src/components/forms/driver/DriverBehaviorEventForm.tsx:        {/* Form Actions */}
src/components/forms/driver/DriverForm.tsx:// Icons
src/components/forms/driver/DriverForm.tsx:// Components
src/components/forms/driver/DriverForm.tsx:  // Get data from hooks
src/components/forms/driver/DriverForm.tsx:  // Form state
src/components/forms/driver/DriverForm.tsx:    // Create a copy of the default form data
src/components/forms/driver/DriverForm.tsx:    // Merge initialData into the copy, providing fallbacks for nested objects
src/components/forms/driver/DriverForm.tsx:    // Handle emergencyContact - only include if initialData has it, otherwise keep defaultFormData's version
src/components/forms/driver/DriverForm.tsx:    // Handle medicalInfo - only include if initialData has it, otherwise keep defaultFormData's version
src/components/forms/driver/DriverForm.tsx:    // Merge top-level properties
src/components/forms/driver/DriverForm.tsx:    // Ensure dateHired is always a string
src/components/forms/driver/DriverForm.tsx:  });  // Validation state
src/components/forms/driver/DriverForm.tsx:  // Offline form handling
src/components/forms/driver/DriverForm.tsx:  // Calculate age based on ID number (South African format)
src/components/forms/driver/DriverForm.tsx:        // Extract birth date from ID number (YYMMDD)
src/components/forms/driver/DriverForm.tsx:        // Determine century
src/components/forms/driver/DriverForm.tsx:    // Handle nested fields
src/components/forms/driver/DriverForm.tsx:    // Clear error when field is edited
src/components/forms/driver/DriverForm.tsx:    // Handle license categories checkbox
src/components/forms/driver/DriverForm.tsx:        // Add category if checked
src/components/forms/driver/DriverForm.tsx:        // Remove category if unchecked
src/components/forms/driver/DriverForm.tsx:    // Required fields
src/components/forms/driver/DriverForm.tsx:    // License validation
src/components/forms/driver/DriverForm.tsx:    // Check if license is expired
src/components/forms/driver/DriverForm.tsx:      // Use the passed submit handler or the default offline form submit
src/components/forms/driver/DriverForm.tsx:      {/* Personal Information Section */}
src/components/forms/driver/DriverForm.tsx:      {/* Address Section */}
src/components/forms/driver/DriverForm.tsx:      {/* Employment Information */}
src/components/forms/driver/DriverForm.tsx:      {/* Driver's License Information */}
src/components/forms/driver/DriverForm.tsx:      {/* Emergency Contact */}
src/components/forms/driver/DriverForm.tsx:      {/* Medical Information */}
src/components/forms/driver/DriverForm.tsx:      {/* Offline Warning */}
src/components/forms/driver/DriverForm.tsx:      {/* Form Actions */}
src/components/forms/driver/EditDriver.tsx:// Mock driver data - same as used in DriverDetails.tsx
src/components/forms/driver/EditDriver.tsx:    // Simulate API call
src/components/forms/driver/EditDriver.tsx:    // Simulate API call
src/components/forms/driver/EditDriver.tsx:          {/* Personal Information */}
src/components/forms/driver/EditDriver.tsx:          {/* License & Emergency Contact */}
src/components/forms/driver/EditDriver.tsx:        {/* Banking Details */}
src/components/forms/driver/EditDriver.tsx:        {/* Form Actions */}
src/components/forms/diesel/AddFuelEntry.tsx:/**
src/components/forms/diesel/AddFuelEntry.tsx:  // Handler for button clicks
src/components/forms/diesel/AddFuelEntry.tsx:    // Implement actual functionality here
src/components/forms/diesel/AddFuelEntry.tsx:            {/* Basic Information */}
src/components/forms/diesel/AddFuelEntry.tsx:            {/* Purchase Details */}
src/components/forms/diesel/AddFuelEntry.tsx:          {/* Additional Information */}
src/components/forms/diesel/FuelEntryForm.tsx:// src/components/forms/diesel/FuelEntryForm.tsx
src/components/forms/diesel/FuelEntryForm.tsx:  // Helper functions for type-safe string conversion and date handling
src/components/forms/diesel/FuelEntryForm.tsx:  // ✅ all strings (no undefined)
src/components/forms/qc/CARReportForm.tsx:// Define a proper type for form data to ensure type safety
src/components/forms/qc/CARReportForm.tsx:    dateOfIncident: new Date().toISOString().split("T")[0] as string, // Always a string
src/components/forms/qc/CARReportForm.tsx:    // New fields based on CARReport type
src/components/forms/qc/CARReportForm.tsx:    issueDate: new Date().toISOString().split("T")[0] as string, // Always a string
src/components/forms/qc/CARReportForm.tsx:    issuedBy: "Current User", // In a real app, use the logged-in user
src/components/forms/qc/CARReportForm.tsx:    // Problem identification
src/components/forms/qc/CARReportForm.tsx:    // Root cause analysis (fishbone)
src/components/forms/qc/CARReportForm.tsx:    // Root cause summary
src/components/forms/qc/CARReportForm.tsx:    // Actions
src/components/forms/qc/CARReportForm.tsx:    // Impact and comments
src/components/forms/qc/CARReportForm.tsx:    // Status
src/components/forms/qc/CARReportForm.tsx:  // Generate a unique CAR report number
src/components/forms/qc/CARReportForm.tsx:  // Initialize form with data if editing or linked to an event
src/components/forms/qc/CARReportForm.tsx:    // Generate a unique report number if new report
src/components/forms/qc/CARReportForm.tsx:      // Edit mode - populate form with existing report data
src/components/forms/qc/CARReportForm.tsx:        // New fields - ensure all fields have fallbacks to prevent undefined values
src/components/forms/qc/CARReportForm.tsx:        issueDate: existingReport.issueDate, // This is a required field in CARReport, so it should always exist
src/components/forms/qc/CARReportForm.tsx:        issuedBy: existingReport.issuedBy, // This is also required in CARReport
src/components/forms/qc/CARReportForm.tsx:        // Legacy fields
src/components/forms/qc/CARReportForm.tsx:        correctiveActions: existingReport.correctiveActions || "", // Handle possible undefined
src/components/forms/qc/CARReportForm.tsx:        // Status - handle status conversion
src/components/forms/qc/CARReportForm.tsx:      // Populate form with linked event data
src/components/forms/qc/CARReportForm.tsx:      dueDate.setDate(dueDate.getDate() + 14); // Due in 14 days
src/components/forms/qc/CARReportForm.tsx:  // Handle form changes
src/components/forms/qc/CARReportForm.tsx:    // Clear error for this field
src/components/forms/qc/CARReportForm.tsx:  // Validate form
src/components/forms/qc/CARReportForm.tsx:    // Required fields
src/components/forms/qc/CARReportForm.tsx:    // Validate due date is after incident date
src/components/forms/qc/CARReportForm.tsx:  // Handle form submission
src/components/forms/qc/CARReportForm.tsx:      // Core fields
src/components/forms/qc/CARReportForm.tsx:      // New fields
src/components/forms/qc/CARReportForm.tsx:      description: formData.description || formData.problemIdentification, // Use problem identification if description not provided
src/components/forms/qc/CARReportForm.tsx:      // Root cause and actions
src/components/forms/qc/CARReportForm.tsx:      // Legacy fields
src/components/forms/qc/CARReportForm.tsx:      // Status - convert legacy status to new format if needed
src/components/forms/qc/CARReportForm.tsx:      // Update existing report
src/components/forms/qc/CARReportForm.tsx:      // Add new report
src/components/forms/qc/CARReportForm.tsx:        {/* Header */}
src/components/forms/qc/CARReportForm.tsx:        {/* Report Header */}
src/components/forms/qc/CARReportForm.tsx:        {/* Client Report */}
src/components/forms/qc/CARReportForm.tsx:        {/* Problem Identification */}
src/components/forms/qc/CARReportForm.tsx:        {/* Primary Cause Analysis */}
src/components/forms/qc/CARReportForm.tsx:        {/* Root Cause Analysis */}
src/components/forms/qc/CARReportForm.tsx:        {/* Actions */}
src/components/forms/qc/CARReportForm.tsx:        {/* Financial Impact and Comments */}
src/components/forms/qc/CARReportForm.tsx:        {/* Status */}
src/components/forms/qc/CARReportForm.tsx:          {/* Supporting Documents */}
src/components/forms/qc/CARReportForm.tsx:        {/* Form Actions */}
src/components/forms/qc/IncidentReportForm.tsx:  imageUrls?: string[]; // For displaying previously uploaded images
src/components/forms/qc/IncidentReportForm.tsx:  // Generate a random incident number if not provided
src/components/forms/qc/IncidentReportForm.tsx:  // Handle input changes
src/components/forms/qc/IncidentReportForm.tsx:    // Clear validation error when field is edited
src/components/forms/qc/IncidentReportForm.tsx:  // Handle image uploads
src/components/forms/qc/IncidentReportForm.tsx:    // Reset the input value so the same file can be selected again
src/components/forms/qc/IncidentReportForm.tsx:  // Remove an uploaded image
src/components/forms/qc/IncidentReportForm.tsx:  // Remove a previously uploaded image
src/components/forms/qc/IncidentReportForm.tsx:  // Validate form
src/components/forms/qc/IncidentReportForm.tsx:  // Handle form submission
src/components/forms/qc/IncidentReportForm.tsx:    // Simulate API call
src/components/forms/qc/IncidentReportForm.tsx:    // Check if this is for removing a previously uploaded image
src/components/forms/qc/IncidentReportForm.tsx:    // For removing a newly uploaded image
src/components/forms/qc/IncidentReportForm.tsx:    // For cancel button
src/components/forms/qc/IncidentReportForm.tsx:              {/* Display previously uploaded images */}
src/components/forms/qc/IncidentReportForm.tsx:              {/* Display newly uploaded images */}
src/components/forms/qc/IncidentReportForm.tsx:              {/* Upload button */}
src/components/forms/qc/IncidentReportForm.tsx:                    accept="image/*"
src/components/forms/client/ClientForm.tsx:    // Initialize the form when it opens
src/components/forms/client/ClientForm.tsx:  // Handle text input change
src/components/forms/client/ClientForm.tsx:    // Handle nested address fields
src/components/forms/client/ClientForm.tsx:      // Ensure both parent and child are valid strings
src/components/forms/client/ClientForm.tsx:    // Clear any error for this field
src/components/forms/client/ClientForm.tsx:  // Handle tag changes
src/components/forms/client/ClientForm.tsx:    // Split the string by commas and filter out empty tags
src/components/forms/client/ClientForm.tsx:  // Handle same as business address checkbox
src/components/forms/client/ClientForm.tsx:      // Copy business address to billing address
src/components/forms/client/ClientForm.tsx:  // Validate form
src/components/forms/client/ClientForm.tsx:    // Required fields validation
src/components/forms/client/ClientForm.tsx:    // Address validation
src/components/forms/client/ClientForm.tsx:    // Email format validation
src/components/forms/client/ClientForm.tsx:    // Phone format validation - simple check for now
src/components/forms/client/ClientForm.tsx:  // Handle form submission
src/components/forms/client/ClientForm.tsx:      // Prepare client data for saving
src/components/forms/client/ClientForm.tsx:      // If not editing (creating new), set createdAt
src/components/forms/client/ClientForm.tsx:      // If same as business address is checked, copy the address
src/components/forms/client/ClientForm.tsx:      // Handle empty arrays or objects that should be undefined
src/components/forms/client/ClientForm.tsx:      // Save the client
src/components/forms/client/ClientForm.tsx:      // Close the modal on success
src/components/forms/client/ClientForm.tsx:          {/* Basic Information */}
src/components/forms/client/ClientForm.tsx:          {/* Contact Information */}
src/components/forms/client/ClientForm.tsx:                placeholder="Website URL (e.g., https://example.com)"
src/components/forms/client/ClientForm.tsx:        {/* Business Address */}
src/components/forms/client/ClientForm.tsx:        {/* Billing Address */}
src/components/forms/client/ClientForm.tsx:        {/* Financial Details */}
src/components/forms/client/ClientForm.tsx:        {/* Notes */}
src/components/forms/client/ClientForm.tsx:        {/* Error Message */}
src/components/forms/client/ClientForm.tsx:        {/* Form Actions */}
src/components/forms/invoice/CreateInvoice.tsx:/**
src/components/forms/invoice/CreateInvoice.tsx:    // Placeholder for button click handling
src/components/forms/invoice/CreateInvoice.tsx:        {/* Client Information */}
src/components/forms/invoice/CreateInvoice.tsx:        {/* Line Items */}
src/components/forms/invoice/CreateInvoice.tsx:        {/* Summary */}
src/components/forms/invoice/CreateInvoice.tsx:        {/* Additional Information */}
src/components/forms/FormSelector.tsx:// src/components/forms/FormSelector.tsx
src/components/forms/FormSelector.tsx:/**
src/components/forms/FormSelector.tsx:              xmlns="http://www.w3.org/2000/svg"
src/components/forms/cost/AdditionalCostsForm.tsx:// ─── React & State ───────────────────────────────────────────────
src/components/forms/cost/AdditionalCostsForm.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/forms/cost/AdditionalCostsForm.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/forms/cost/AdditionalCostsForm.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/forms/cost/AdditionalCostsForm.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/forms/cost/AdditionalCostsForm.tsx:      supportingDocuments: [], // Will be populated by the parent component
src/components/forms/cost/AdditionalCostsForm.tsx:    // Reset form
src/components/forms/cost/AdditionalCostsForm.tsx:      {/* Summary */}
src/components/forms/cost/AdditionalCostsForm.tsx:      {/* Add Cost Form */}
src/components/forms/cost/AdditionalCostsForm.tsx:      {/* Existing Additional Costs */}
src/components/forms/cost/CostEntryForm.tsx:// Fixed incorrect relative import paths to shared UI components
src/components/forms/cost/CostEntryForm.tsx:      isFlagged: amount > 1000, // Auto-flag costs over R1000
src/components/forms/cost/CostEntryForm.tsx:    // Reset form
src/components/forms/cost/CostEntryForm.tsx:              accept="image/*,.pdf"
src/components/forms/cost/CostForm.tsx:  existingCosts?: Omit<CostEntry, "attachments">[]; // For duplicate validation
src/components/forms/cost/CostForm.tsx:      // Set available subcategories for existing cost
src/components/forms/cost/CostForm.tsx:      // Set today's date as default for new cost entries
src/components/forms/cost/CostForm.tsx:    // Update subcategories when category changes
src/components/forms/cost/CostForm.tsx:      setFormData((prev) => ({ ...prev, subCategory: "" })); // Reset subcategory
src/components/forms/cost/CostForm.tsx:    // Prevent manual entry of System Costs
src/components/forms/cost/CostForm.tsx:    // Document attachment validation - MANDATORY REQUIREMENT
src/components/forms/cost/CostForm.tsx:    // existing attachments not required in create validation block here (handled on submit)
src/components/forms/cost/CostForm.tsx:    // Manual flag validation
src/components/forms/cost/CostForm.tsx:    // Duplicate reference number validation (only for new entries, not editing same cost)
src/components/forms/cost/CostForm.tsx:      // Determine if item should be flagged
src/components/forms/cost/CostForm.tsx:      // Auto-flag conditions
src/components/forms/cost/CostForm.tsx:      const missingDocumentation = !hasDocumentation && formData.noDocumentReason.trim().length > 0; // boolean
src/components/forms/cost/CostForm.tsx:      // Determine if should be flagged
src/components/forms/cost/CostForm.tsx:      // Ensure shouldFlag is always a boolean
src/components/forms/cost/CostForm.tsx:      // Determine flag reason
src/components/forms/cost/CostForm.tsx:        flaggedBy: shouldFlag ? "Current User" : undefined, // In real app, use actual user
src/components/forms/cost/CostForm.tsx:      // Pass files to the submit handler
src/components/forms/cost/CostForm.tsx:      {/* High-Risk Category Warning */}
src/components/forms/cost/CostForm.tsx:      {/* Structured Cost Category Selection */}
src/components/forms/cost/CostForm.tsx:      {/* MANDATORY DOCUMENT ATTACHMENT SECTION */}
src/components/forms/cost/CostForm.tsx:        {/* No Document Reason - Required if no files */}
src/components/forms/cost/CostForm.tsx:      {/* Manual Flag Section */}
src/components/forms/cost/CostForm.tsx:      {/* Form Actions */}
src/components/forms/trips/TripPlanningForm.tsx:          editedBy: "CurrentUser", // Replace with user context
src/components/forms/trips/TripPlanningForm.tsx:  // Timeline points using real Trip fields
src/components/forms/trips/TripPlanningForm.tsx:      {/* Timeline Visualization */}
src/components/forms/trips/TripPlanningForm.tsx:      {/* Delays Section */}
src/components/forms/trips/TripPlanningForm.tsx:      {/* Audit Log */}
src/components/forms/trips/TripPlanningForm.tsx:      {/* Add Delay Modal */}
src/components/forms/trips/TripFormData.tsx:            // No Wialon mapping; reset/leave fleetUnitId unset
src/components/forms/trips/RouteSelectionForm.tsx:// src/components/forms/RouteSelectionForm.tsx
src/components/forms/trips/RouteSelectionForm.tsx:/**
src/components/forms/trips/RouteSelectionForm.tsx:  // Form state
src/components/forms/trips/RouteSelectionForm.tsx:  // Form validation
src/components/forms/trips/RouteSelectionForm.tsx:  // Get route options from Firestore
src/components/forms/trips/RouteSelectionForm.tsx:  // Form submission handler
src/components/forms/trips/RouteSelectionForm.tsx:  // Handle route selection
src/components/forms/trips/RouteSelectionForm.tsx:    // Find the selected route from options
src/components/forms/trips/RouteSelectionForm.tsx:      // Fetch route details from Firestore
src/components/forms/trips/RouteSelectionForm.tsx:  // Fetch route details from Firestore
src/components/forms/trips/RouteSelectionForm.tsx:      // In a real app, we'd fetch this from Firestore directly
src/components/forms/trips/RouteSelectionForm.tsx:      // For this example, we'll simulate by finding in the routeOptions
src/components/forms/trips/RouteSelectionForm.tsx:      // This would be a Firestore query in a real app
src/components/forms/trips/RouteSelectionForm.tsx:      // Update the form with route details
src/components/forms/trips/RouteSelectionForm.tsx:      // In a real app, you'd get this data from the Firestore document
src/components/forms/trips/RouteSelectionForm.tsx:        distance: 100, // This would come from Firestore
src/components/forms/trips/RouteSelectionForm.tsx:        estimatedTime: 2, // This would come from Firestore
src/components/forms/trips/RouteSelectionForm.tsx:  // Handle input changes
src/components/forms/trips/RouteSelectionForm.tsx:    // Clear errors when field is changed
src/components/forms/trips/RouteSelectionForm.tsx:  // Validation schema
src/components/forms/trips/RouteSelectionForm.tsx:  // Handle form submission
src/components/forms/trips/RouteSelectionForm.tsx:    // Validate form
src/components/forms/trips/RouteSelectionForm.tsx:        createdBy: "currentUser", // Replace with actual user ID
src/components/forms/trips/RouteSelectionForm.tsx:      // Reset form if successful
src/components/forms/trips/RouteSelectionForm.tsx:  // Show success message when form is successfully submitted
src/components/forms/trips/RouteSelectionForm.tsx:      // Show success toast or message
src/components/forms/trips/RouteSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/trips/RouteSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Route Selection */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Start Location */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* End Location */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Distance */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Estimated Time */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Scheduled Date */}
src/components/forms/trips/RouteSelectionForm.tsx:        {/* Notes */}
src/components/forms/trips/RouteSelectionForm.tsx:      {/* Form Actions */}
src/components/forms/trips/TripForm.tsx:// Using the TripFormData type from types directory
src/components/forms/trips/TripForm.tsx:            // No Wialon mapping; reset/leave fleetUnitId unset
src/components/forms/tyre/TyrePerformanceForm.tsx:    // Add your form submission logic here
src/components/forms/tyre/TyreSelectionForm.tsx:// src/components/forms/TyreSelectionForm.tsx
src/components/forms/tyre/TyreSelectionForm.tsx:/**
src/components/forms/tyre/TyreSelectionForm.tsx:  // Form state
src/components/forms/tyre/TyreSelectionForm.tsx:  // Form validation
src/components/forms/tyre/TyreSelectionForm.tsx:  // Get options from Firestore
src/components/forms/tyre/TyreSelectionForm.tsx:  // Note: We don't need to explicitly use these returned values
src/components/forms/tyre/TyreSelectionForm.tsx:  // as the FormSelector component uses the same hooks internally
src/components/forms/tyre/TyreSelectionForm.tsx:  // Form submission handler
src/components/forms/tyre/TyreSelectionForm.tsx:  // Handle input changes
src/components/forms/tyre/TyreSelectionForm.tsx:    // Clear errors when field is changed
src/components/forms/tyre/TyreSelectionForm.tsx:    // Reset dependent fields for cascading selects
src/components/forms/tyre/TyreSelectionForm.tsx:  // Validation schema
src/components/forms/tyre/TyreSelectionForm.tsx:  // Handle form submission
src/components/forms/tyre/TyreSelectionForm.tsx:    // Validate form
src/components/forms/tyre/TyreSelectionForm.tsx:        createdBy: "currentUser", // Replace with actual user ID
src/components/forms/tyre/TyreSelectionForm.tsx:      // Reset form if successful
src/components/forms/tyre/TyreSelectionForm.tsx:  // Show success message when form is successfully submitted
src/components/forms/tyre/TyreSelectionForm.tsx:      // Show success toast or message
src/components/forms/tyre/TyreSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/tyre/TyreSelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/tyre/TyreSelectionForm.tsx:        {/* Tyre Brand */}
src/components/forms/tyre/TyreSelectionForm.tsx:        {/* Tyre Size */}
src/components/forms/tyre/TyreSelectionForm.tsx:        {/* Tyre Pattern */}
src/components/forms/tyre/TyreSelectionForm.tsx:        {/* Serial Number */}
src/components/forms/tyre/TyreSelectionForm.tsx:        {/* Notes */}
src/components/forms/tyre/TyreSelectionForm.tsx:      {/* Form Actions */}
src/components/forms/tyre/AddNewTyreForm.tsx:  vehicleType?: "standard" | "reefer" | "horse" | "interlink"; // Added vehicle type
src/components/forms/tyre/AddNewTyreForm.tsx:  // Use the reference data context for dynamic data
src/components/forms/tyre/AddNewTyreForm.tsx:  // Default tyre sizes list, will be overridden by reference data context
src/components/forms/tyre/AddNewTyreForm.tsx:  // Update tyre sizes when reference data is loaded
src/components/forms/tyre/AddNewTyreForm.tsx:  // Legacy Firestore fetch (kept for backward compatibility)
src/components/forms/tyre/AddNewTyreForm.tsx:  // Default manufacturers list, will be overridden by reference data context
src/components/forms/tyre/AddNewTyreForm.tsx:  // Update manufacturers when reference data is loaded
src/components/forms/tyre/AddNewTyreForm.tsx:  // Get available patterns based on selected manufacturer and size
src/components/forms/tyre/AddNewTyreForm.tsx:  // Get available vehicle positions based on vehicle type
src/components/forms/tyre/AddNewTyreForm.tsx:  // Fetch tyre brands from Firestore (legacy support)
src/components/forms/tyre/AddNewTyreForm.tsx:  // Standard axle positions (legacy format)
src/components/forms/tyre/AddNewTyreForm.tsx:  // Vehicle-specific axle position configurations
src/components/forms/tyre/AddNewTyreForm.tsx:  // State for storing vehicle configurations from Firestore
src/components/forms/tyre/AddNewTyreForm.tsx:  // Vehicle type dropdown options (will be populated from Firestore)
src/components/forms/tyre/AddNewTyreForm.tsx:  // Fetch vehicle position configurations from Firestore
src/components/forms/tyre/AddNewTyreForm.tsx:  // State for selected vehicle type and position mapping
src/components/forms/tyre/AddNewTyreForm.tsx:      // Initially set to standard positions, will be updated when Firestore data loads
src/components/forms/tyre/AddNewTyreForm.tsx:  // Update available positions when vehicleConfigurations loads from Firestore
src/components/forms/tyre/AddNewTyreForm.tsx:  // Handle input changes
src/components/forms/tyre/AddNewTyreForm.tsx:  // Handle vehicle type change
src/components/forms/tyre/AddNewTyreForm.tsx:    // Reset axle position when vehicle type changes
src/components/forms/tyre/AddNewTyreForm.tsx:    // Update available positions based on vehicle type
src/components/forms/tyre/AddNewTyreForm.tsx:      // Use the positions from the Firestore data
src/components/forms/tyre/AddNewTyreForm.tsx:    // Special handling for vehicleType
src/components/forms/tyre/AddNewTyreForm.tsx:  // Validate form
src/components/forms/tyre/AddNewTyreForm.tsx:    // If mounted, vehicle and axle position are required
src/components/forms/tyre/AddNewTyreForm.tsx:  // Handle form submission
src/components/forms/tyre/AddNewTyreForm.tsx:    // Ensure datePurchased is ISO string
src/components/forms/tyre/AddNewTyreForm.tsx:    // Simulate API call
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Basic Information */}
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Manufacturer Details */}
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Status Information */}
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Vehicle Assignment */}
src/components/forms/tyre/AddNewTyreForm.tsx:              {/* Vehicle Position Diagram */}
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Tyre Configuration Guide */}
src/components/forms/tyre/AddNewTyreForm.tsx:            {/* Notes */}
src/components/forms/tyre/TyreForm.tsx:  inline?: boolean; // Whether the form is displayed inline or in a modal
src/components/forms/tyre/TyreForm.tsx:  // Use the reference data context for brands, sizes, patterns
src/components/forms/tyre/TyreForm.tsx:  // Form state
src/components/forms/tyre/TyreForm.tsx:      treadDepth: 20, // New tyre typical depth
src/components/forms/tyre/TyreForm.tsx:  // Form section management - used for inline forms and step navigation
src/components/forms/tyre/TyreForm.tsx:  // Derived state
src/components/forms/tyre/TyreForm.tsx:  // Load initial size string from initialData
src/components/forms/tyre/TyreForm.tsx:  // Update available patterns when brand or size changes
src/components/forms/tyre/TyreForm.tsx:        .filter((v, i, a) => a.indexOf(v) === i); // Unique values
src/components/forms/tyre/TyreForm.tsx:  // Update vehicle positions when type changes
src/components/forms/tyre/TyreForm.tsx:  // Convert size string to object when selected from dropdown
src/components/forms/tyre/TyreForm.tsx:      // Parse size format like "295/80R22.5"
src/components/forms/tyre/TyreForm.tsx:  // Handle input changes
src/components/forms/tyre/TyreForm.tsx:    // Handle nested properties
src/components/forms/tyre/TyreForm.tsx:  // Handle number input changes
src/components/forms/tyre/TyreForm.tsx:    // Handle nested properties
src/components/forms/tyre/TyreForm.tsx:  // Validate form before submission
src/components/forms/tyre/TyreForm.tsx:    // Basic validation
src/components/forms/tyre/TyreForm.tsx:    // Additional validation for mounted tyres
src/components/forms/tyre/TyreForm.tsx:  // Handle form submission
src/components/forms/tyre/TyreForm.tsx:      // Reset form if not in edit mode
src/components/forms/tyre/TyreForm.tsx:          // Reset other fields...
src/components/forms/tyre/TyreForm.tsx:  // Render form based on activeSection
src/components/forms/tyre/TyreForm.tsx:                disabled={editMode} // Can't change serial number in edit mode
src/components/forms/tyre/TyreForm.tsx:                {/* Vehicle Position Diagram */}
src/components/forms/tyre/TyreForm.tsx:  // For inline mode, render as a card with sections
src/components/forms/tyre/TyreForm.tsx:        {/* Section Tabs */}
src/components/forms/tyre/TyreForm.tsx:        {/* Active Form Section */}
src/components/forms/tyre/TyreForm.tsx:        {/* Form Actions */}
src/components/forms/tyre/TyreForm.tsx:  // For modal/regular mode, render as a series of steps
src/components/forms/tyre/TyreForm.tsx:      {/* Step Navigation */}
src/components/forms/workshop/PartsReceivingForm.tsx:  // Add new part entry
src/components/forms/workshop/PartsReceivingForm.tsx:  // Remove part entry
src/components/forms/workshop/PartsReceivingForm.tsx:  // Update part field value
src/components/forms/workshop/PartsReceivingForm.tsx:          // Special handling for receiving quantity
src/components/forms/workshop/PartsReceivingForm.tsx:            // Auto update status based on quantity
src/components/forms/workshop/PartsReceivingForm.tsx:          // Handle serial number checkbox
src/components/forms/workshop/PartsReceivingForm.tsx:  // Handle form submission
src/components/forms/workshop/PartsReceivingForm.tsx:    // Simulate API call
src/components/forms/workshop/InventorySelectionForm.tsx:// src/components/forms/InventorySelectionForm.tsx
src/components/forms/workshop/InventorySelectionForm.tsx:/**
src/components/forms/workshop/InventorySelectionForm.tsx:  // Form state
src/components/forms/workshop/InventorySelectionForm.tsx:  // Form validation
src/components/forms/workshop/InventorySelectionForm.tsx:  // Get inventory options from Firestore
src/components/forms/workshop/InventorySelectionForm.tsx:  // Form submission handler
src/components/forms/workshop/InventorySelectionForm.tsx:  // Handle inventory selection
src/components/forms/workshop/InventorySelectionForm.tsx:    // Find the selected inventory item
src/components/forms/workshop/InventorySelectionForm.tsx:      // Simulate fetching item details from Firestore
src/components/forms/workshop/InventorySelectionForm.tsx:  // Fetch inventory details from Firestore
src/components/forms/workshop/InventorySelectionForm.tsx:      // In a real app, we'd fetch this from Firestore directly
src/components/forms/workshop/InventorySelectionForm.tsx:      // For this example, we'll simulate by finding in the inventoryOptions
src/components/forms/workshop/InventorySelectionForm.tsx:      // Parse the label to extract description and stock quantity
src/components/forms/workshop/InventorySelectionForm.tsx:      // Mock data that would come from Firestore
src/components/forms/workshop/InventorySelectionForm.tsx:        Unit: "EA", // Example unit
src/components/forms/workshop/InventorySelectionForm.tsx:        UnitPrice: 125.5, // Example price
src/components/forms/workshop/InventorySelectionForm.tsx:      // Update form data with item details
src/components/forms/workshop/InventorySelectionForm.tsx:  // Calculate total price when quantity or unit price changes
src/components/forms/workshop/InventorySelectionForm.tsx:  // Handle input changes
src/components/forms/workshop/InventorySelectionForm.tsx:    // Clear errors when field is changed
src/components/forms/workshop/InventorySelectionForm.tsx:  // Validation schema
src/components/forms/workshop/InventorySelectionForm.tsx:  // Handle form submission
src/components/forms/workshop/InventorySelectionForm.tsx:    // Validate form
src/components/forms/workshop/InventorySelectionForm.tsx:        createdBy: "currentUser", // Replace with actual user ID
src/components/forms/workshop/InventorySelectionForm.tsx:      // Reset form if successful
src/components/forms/workshop/InventorySelectionForm.tsx:  // Show success message when form is successfully submitted
src/components/forms/workshop/InventorySelectionForm.tsx:      // Show success toast or message
src/components/forms/workshop/InventorySelectionForm.tsx:  // Get store locations
src/components/forms/workshop/InventorySelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/workshop/InventorySelectionForm.tsx:            xmlns="http://www.w3.org/2000/svg"
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Store Location */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Inventory Item Selection */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Description */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Unit */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Quantity */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Unit Price */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Total Price */}
src/components/forms/workshop/InventorySelectionForm.tsx:        {/* Notes */}
src/components/forms/workshop/InventorySelectionForm.tsx:      {/* Form Actions */}
src/components/forms/workshop/InspectionReportForm.tsx:    // Auto-update overall condition if any item fails
src/components/forms/workshop/InspectionReportForm.tsx:    // In a real implementation, you'd upload the file to storage
src/components/forms/workshop/InspectionReportForm.tsx:    // For now, we'll just use the file name
src/components/forms/workshop/InspectionReportForm.tsx:    // Use our custom PDF generator for professional output with photos
src/components/forms/workshop/InspectionReportForm.tsx:    // Also call the provided callback if needed
src/components/forms/workshop/InspectionReportForm.tsx:                      accept="image/*"
src/components/forms/workshop/InspectionReportForm.tsx:                    accept="image/*"
src/components/forms/workshop/DemandPartsForm.tsx:                disabled={!!formData.poId} // Fixed: use boolean casting
src/components/forms/workshop/InspectionForm.tsx:// eslint-disable-next-line @typescript-eslint/no-unused-vars
src/components/forms/workshop/InspectionForm.tsx:// Mock user roles for the inspector dropdown
src/components/forms/workshop/InspectionForm.tsx:  template = inspectionTemplates[0], // Default to first template
src/components/forms/workshop/InspectionForm.tsx:  // Calculate item counts for stats
src/components/forms/workshop/InspectionForm.tsx:  // Calculate completion percentage
src/components/forms/workshop/InspectionForm.tsx:  // Calculate if form can be completed
src/components/forms/workshop/InspectionForm.tsx:  // Filter items by category
src/components/forms/workshop/InspectionForm.tsx:  // Handle item status change
src/components/forms/workshop/InspectionForm.tsx:        // If critical item fails, trigger job card creation
src/components/forms/workshop/InspectionForm.tsx:  // Handle save draft
src/components/forms/workshop/InspectionForm.tsx:  // Handle complete inspection
src/components/forms/workshop/InspectionForm.tsx:  // Create mock job card from failed item
src/components/forms/workshop/InspectionForm.tsx:  // Render job card modal if needed
src/components/forms/workshop/InspectionForm.tsx:      {/* Header */}
src/components/forms/workshop/InspectionForm.tsx:      {/* Form Header */}
src/components/forms/workshop/InspectionForm.tsx:              filterType={["Truck", "Trailer", "Reefer"]} // Allow all vehicle types
src/components/forms/workshop/InspectionForm.tsx:      {/* Inspection Stats */}
src/components/forms/workshop/InspectionForm.tsx:      {/* Inspection Categories Tabs and Items */}
src/components/forms/workshop/InspectionForm.tsx:      {/* Notes */}
src/components/forms/workshop/InspectionForm.tsx:      {/* Job Card Creation Modal */}
src/components/forms/workshop/InspectionForm.tsx:      {/* Render Job Card Modal */}
src/components/forms/TripForm.tsx:  // accept any here to avoid strict resolver/type mismatch; validation still occurs via yup
src/components/InvoiceManagement/StockManager.tsx:  // Fetch stock items from Firestore
src/components/InvoiceManagement/StockManager.tsx:    // For demonstration, we're setting up a mock listener that would typically connect to Firestore
src/components/InvoiceManagement/StockManager.tsx:      // Mock data - in a real app this would be from Firestore
src/components/InvoiceManagement/StockManager.tsx:      // Extract unique categories and suppliers for filter dropdowns
src/components/InvoiceManagement/StockManager.tsx:    // In a real app, this would be the unsubscribe function from onSnapshot
src/components/InvoiceManagement/StockManager.tsx:  // Apply filters to stock items
src/components/InvoiceManagement/StockManager.tsx:  // Handle filter changes
src/components/InvoiceManagement/StockManager.tsx:  // Handle new item form changes
src/components/InvoiceManagement/StockManager.tsx:  // Add new stock item
src/components/InvoiceManagement/StockManager.tsx:  // Export stock items as CSV
src/components/InvoiceManagement/StockManager.tsx:    // Show success notification
src/components/InvoiceManagement/StockManager.tsx:  // Export stock items as Excel
src/components/InvoiceManagement/StockManager.tsx:      // Prepare data for Excel export
src/components/InvoiceManagement/StockManager.tsx:      // Create workbook and worksheet
src/components/InvoiceManagement/StockManager.tsx:      // Add some styling to headers
src/components/InvoiceManagement/StockManager.tsx:  // Save to file
src/components/InvoiceManagement/StockManager.tsx:      // Show success notification
src/components/InvoiceManagement/StockManager.tsx:  // Import stock items from CSV or Excel
src/components/InvoiceManagement/StockManager.tsx:          // Handle CSV import
src/components/InvoiceManagement/StockManager.tsx:          // Check if rows array is empty or first row is undefined
src/components/InvoiceManagement/StockManager.tsx:          // Normalize helper for header keys
src/components/InvoiceManagement/StockManager.tsx:          // Map normalized header -> StockItem key
src/components/InvoiceManagement/StockManager.tsx:            // identity
src/components/InvoiceManagement/StockManager.tsx:            // fallbacks for common variants
src/components/InvoiceManagement/StockManager.tsx:          // Map CSV rows to StockItem objects
src/components/InvoiceManagement/StockManager.tsx:              if (!row.trim()) return {}; // Skip empty rows
src/components/InvoiceManagement/StockManager.tsx:                  // Handle numeric fields explicitly
src/components/InvoiceManagement/StockManager.tsx:                  if (!mappedKey) return; // Unknown header, skip
src/components/InvoiceManagement/StockManager.tsx:          // Handle Excel import
src/components/InvoiceManagement/StockManager.tsx:          // Map Excel rows to StockItem objects
src/components/InvoiceManagement/StockManager.tsx:        // Validate the data
src/components/InvoiceManagement/StockManager.tsx:        // Add the imported items to Firestore
src/components/InvoiceManagement/StockManager.tsx:            continue; // Skip items without required fields
src/components/InvoiceManagement/StockManager.tsx:          // Check if item with same SKU exists
src/components/InvoiceManagement/StockManager.tsx:            // Update existing item
src/components/InvoiceManagement/StockManager.tsx:            // Add new item
src/components/InvoiceManagement/StockManager.tsx:        // Reset the input field so the same file can be imported again if needed
src/components/InvoiceManagement/StockManager.tsx:      {/* Notification */}
src/components/InvoiceManagement/StockManager.tsx:      {/* Filters */}
src/components/InvoiceManagement/StockManager.tsx:      {/* Stock Items Table */}
src/components/InvoiceManagement/StockManager.tsx:      {/* Add Item Modal */}
src/components/InvoiceManagement/InvoiceTemplates.tsx:/**
src/components/InvoiceManagement/InvoiceTemplates.tsx:  // Handler for button clicks
src/components/InvoiceManagement/InvoiceTemplates.tsx:    // TODO: Implement actual handler functionality
src/components/InvoiceManagement/InvoiceTemplates.tsx:    lastModified?: string; // ISO date
src/components/InvoiceManagement/InvoiceTemplates.tsx:      {/* Templates Grid */}
src/components/InvoiceManagement/InvoiceTemplates.tsx:      {/* Template Settings */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/InvoiceManagement/CurrencyFleetReport.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/InvoiceManagement/CurrencyFleetReport.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/InvoiceManagement/CurrencyFleetReport.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/InvoiceManagement/CurrencyFleetReport.tsx:// ─── Helper Functions ────────────────────────────────────────────
src/components/InvoiceManagement/CurrencyFleetReport.tsx:  // Use props if provided, otherwise use context
src/components/InvoiceManagement/CurrencyFleetReport.tsx:  // Separate trips by currency
src/components/InvoiceManagement/CurrencyFleetReport.tsx:  // Generate reports for each currency
src/components/InvoiceManagement/CurrencyFleetReport.tsx:      {/* Currency Header */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:          {/* Fleet Summary */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:              {/* Client Type Breakdown */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:          {/* Investigation & Compliance */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:          {/* Driver Performance for this currency */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:      {/* Filters */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:      {/* Combined Fleet Overview */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:      {/* USD Fleet Report */}
src/components/InvoiceManagement/CurrencyFleetReport.tsx:      {/* ZAR Fleet Report */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:// src/components/DriverManagement/DriverPerformanceOverview.tsx
src/components/DriverManagement/DriverPerformanceOverview.tsx:  eventDate: string; // always a string in the form
src/components/DriverManagement/DriverPerformanceOverview.tsx:  eventTime: string; // always a string in the form
src/components/DriverManagement/DriverPerformanceOverview.tsx:      // Guard eventDate (may be undefined on existing data)
src/components/DriverManagement/DriverPerformanceOverview.tsx:      eventDate: eventForm.eventDate, // guaranteed string from form
src/components/DriverManagement/DriverPerformanceOverview.tsx:      eventTime: eventForm.eventTime, // guaranteed string from form
src/components/DriverManagement/DriverPerformanceOverview.tsx:      eventDate: event.eventDate ?? ISO_TODAY, // <-- ensure string
src/components/DriverManagement/DriverPerformanceOverview.tsx:      eventTime: event.eventTime ?? NOW_HHMM, // <-- ensure string
src/components/DriverManagement/DriverPerformanceOverview.tsx:      severity: event.severity ?? "low", // use a valid severity from the type
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* Summary Cards */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* Filter Controls */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Driver Filter */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Event Type Filter */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Severity Filter */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Status Filter */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Date Range Filter */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* High Risk Drivers */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* Recent Events */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* Add/Edit Event Modal */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Driver Name Select */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Fleet Number Select */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Event Date Input */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Event Time Input */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Event Type Select */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Severity Select */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:            {/* Status Select */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Location Input */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Description TextArea */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Action Taken TextArea */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Points Input */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:          {/* Supporting Documents FileUpload */}
src/components/DriverManagement/DriverPerformanceOverview.tsx:      {/* Event Details Modal */}
src/components/DriverManagement/PerformanceAnalytics.tsx:  // These would be replaced with actual charts in a real implementation
src/components/DriverManagement/PerformanceAnalytics.tsx:  // For now, using colored bars to simulate charts
src/components/DriverManagement/PerformanceAnalytics.tsx:      {/* Overall Performance Overview */}
src/components/DriverManagement/PerformanceAnalytics.tsx:      {/* Driver Performance Comparison */}
src/components/DriverManagement/PerformanceAnalytics.tsx:          {/* Simulated Bar Chart */}
src/components/DriverManagement/PerformanceAnalytics.tsx:      {/* Performance Trends */}
src/components/DriverManagement/PerformanceAnalytics.tsx:        {/* Safety Score Trend */}
src/components/DriverManagement/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/components/DriverManagement/PerformanceAnalytics.tsx:        {/* On-Time Delivery Trend */}
src/components/DriverManagement/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/components/DriverManagement/PerformanceAnalytics.tsx:      {/* Performance Metrics Breakdown */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:// ─── React ───────────────────────────────────────────────────────
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:// ─── Types ───────────────────────────────────────────────────────
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:// ─── UI Components ───────────────────────────────────────────────
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:  // Get severity class
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:  // Get status class
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Event Header */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Event Details */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:            {/* CAR Report Link */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Description */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Action Taken */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Attachments */}
src/components/DriverManagement/DriverBehaviorEventDetails.tsx:        {/* Actions */}
src/components/DriverManagement/LicenseManagement.tsx:// Firestore license document shape (keep in sync with page version)
src/components/DriverManagement/LicenseManagement.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/components/DriverManagement/LicenseManagement.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/components/DriverManagement/LicenseManagement.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/components/ReportRunner.tsx:  // State for resource selection
src/components/ReportRunner.tsx:  // State for templates
src/components/ReportRunner.tsx:  // State for report data/results
src/components/ReportRunner.tsx:  // Fetch report templates on mount or when session/resource changes
src/components/ReportRunner.tsx:  // Fetch report based on selected template
src/components/ReportRunner.tsx:      const flags = 0x0; // full JSON, customize if needed
src/components/ReportRunner.tsx:      {/* Resource Selection */}
src/components/ReportRunner.tsx:      {/* Template Selection */}
src/components/ReportRunner.tsx:      {/* Fetch Report Button */}
src/components/ReportRunner.tsx:      {/* Display Report Data */}
src/components/RealtimeUnitTracker.tsx:      // addPositionListener returns a cleanup function, not an ID
src/config/tripWorkflowConfig.ts:/**
src/config/tripWorkflowConfig.ts:    costVariance: number; // Percentage
src/config/tripWorkflowConfig.ts:    timeVariance: number; // Hours
src/config/tripWorkflowConfig.ts:    fuelConsumption: number; // L/100km
src/config/tripWorkflowConfig.ts:    fuelRate: 23.50, // Per liter
src/config/tripWorkflowConfig.ts:    driverRate: 350, // Per day
src/config/tripWorkflowConfig.ts:    costVariance: 15, // 15% variance threshold
src/config/tripWorkflowConfig.ts:    timeVariance: 2, // 2 hours variance threshold
src/config/tripWorkflowConfig.ts:    fuelConsumption: 50, // 50L/100km threshold
src/config/tripWorkflowConfig.ts:    managerApproval: 10000, // R10,000
src/config/tripWorkflowConfig.ts:    directorApproval: 50000, // R50,000
src/config/tripWorkflowConfig.ts:  // Check validation if exists
src/config/tripWorkflowConfig.ts:  // Check next step condition if exists
src/config/capacitor.config.ts:    url: 'https://f9673ef5-92af-4161-819b-7d91c56bee83.lovableproject.com?forceHideBadge=true',
src/config/sageAuth.ts:/**
src/config/sageAuth.ts:  // Sage API key from environment variables
src/config/sageAuth.ts:  // Sage API endpoint from environment variables
src/config/sageAuth.ts:  // Sage company ID from environment variables
src/config/sageAuth.ts:  // Default environment mode
src/config/sageAuth.ts:  // OAuth2 config (if using token-based auth instead of API key)
src/config/cloudRunEndpoints.ts:/**
src/config/cloudRunEndpoints.ts:// Primary Cloud Run endpoint
src/config/cloudRunEndpoints.ts:export const MAPS_SERVICE_URL = import.meta.env.VITE_MAPS_SERVICE_URL || 'https://maps-250085264089.africa-south1.run.app';
src/config/cloudRunEndpoints.ts:// Alternative Cloud Run endpoints
src/config/cloudRunEndpoints.ts:  primary: import.meta.env.VITE_CLOUD_RUN_URL || 'https://maps-250085264089.africa-south1.run.app',
src/config/cloudRunEndpoints.ts:  alternative: import.meta.env.VITE_CLOUD_RUN_URL_ALTERNATIVE || 'https://maps-3ongv2xd5a-bq.a.run.app'
src/config/cloudRunEndpoints.ts:// Helper function to get the best available endpoint
src/config/cloudRunEndpoints.ts:// Export all endpoints for visibility in the UI if needed
src/config/sidebarConfig.ts:// Sidebar menu configuration for mapping menu options to routes and components
src/config/sidebarConfig.ts:// APppp Fleet Management – Sidebar mirrors AppRoutes (non-dynamic routes only)
src/config/sidebarConfig.ts:  component: string; // import path used by the page component
src/config/sidebarConfig.ts:  children?: SidebarItem[]; // hierarchical navigation
src/config/sidebarConfig.ts:  subComponents?: string[]; // optional related components for tooling
src/config/sidebarConfig.ts:  // Dashboard and related
src/config/sidebarConfig.ts:  // Dev utilities removed
src/config/sidebarConfig.ts:  // Trips
src/config/sidebarConfig.ts:  // Diesel
src/config/sidebarConfig.ts:  // Drivers
src/config/sidebarConfig.ts:  // Clients
src/config/sidebarConfig.ts:  // Forms Test (developer)
src/config/sidebarConfig.ts:  // Invoices
src/config/sidebarConfig.ts:  // Workshop / Inventory
src/config/sidebarConfig.ts:  // Tyres
src/config/sidebarConfig.ts:  // Analytics
src/config/sidebarConfig.ts:  // Maps & Wialon
src/config/sidebarConfig.ts:  // Singletons and utilities
src/config/sidebarConfig.ts:  // Wialon Fleet Tracking
src/config/sidebarConfig.ts:// For CommonJS compatibility with scripts
src/config/routeUtils.ts:// This helper function organizes sidebar items by section
src/config/routeUtils.ts:// For example, all items with path starting with "/trips/" will be grouped together
src/config/routeUtils.ts:// This function can be used to generate routes based on the sidebar configuration
src/config/routeUtils.ts:// It requires you to provide a component mapping for dynamic import
src/config/routeUtils.ts:    // Format section name for parent component (e.g., "trips" -> "TripManagementPage")
src/config/routeUtils.ts:    // Create the parent route
src/config/routeUtils.ts:        // Add index route that redirects to dashboard
src/config/routeUtils.ts:        // Add child routes for each item
src/config/routeUtils.ts:          // Extract the subroute from the path (e.g., "/trips/active" -> "active")
src/config/routeUtils.ts:        }).filter(Boolean) // Filter out null values
src/config/routeUtils.ts:// This function finds a menu item by its path
src/config/routeUtils.ts:// This function returns the breadcrumb path for a given route
src/config/routeUtils.ts:    // Try to find an exact match first
src/config/routeUtils.ts:    // If no exact match, try to find the closest parent
src/config/mobileConfig.ts:// Mobile Firebase Configuration for mat1-9e6b3 project
src/config/mobileConfig.ts:  databaseURL: "https://mat1-9e6b3-default-rtdb.firebaseio.com",
src/config/mobileConfig.ts:  measurementId: "G-XXXXXXXXXX" // Add your measurement ID if using Analytics
src/config/mobileConfig.ts:// Mobile app package configuration
src/config/mobileConfig.ts:// QR Code configuration for mobile linking
src/config/mobileConfig.ts:  baseUrl: "https://mat1-9e6b3.web.app", // Your Firebase Hosting URL
src/config/mobileConfig.ts:  deepLinkScheme: "matmobile://",
src/config/mobileConfig.ts:// Offline configuration for mobile
src/config/mobileConfig.ts:  cacheSizeBytes: 50 * 1024 * 1024, // 50MB cache
src/config/mobileConfig.ts:  synchronizeTabs: false // Mobile doesn't need tab sync
src/firebase.ts:// Note: Firestore is initialized later with initializeFirestore and local cache settings.
src/firebase.ts:// Import types from new location
src/firebase.ts:// =============================================================================
src/firebase.ts:// TYPESCRIPT ENUMS (if not already defined in imported types)
src/firebase.ts:// =============================================================================
src/firebase.ts:// These are fallbacks in case the imported enums are not available
src/firebase.ts:// The actual enums from the imports should be used when available
src/firebase.ts:// =============================================================================
src/firebase.ts:// FIREBASE CONFIGURATION
src/firebase.ts:// =============================================================================
src/firebase.ts:// Development configuration - only used in development mode
src/firebase.ts:  databaseURL: "https://mat1-9e6b3-default-rtdb.firebaseio.com",
src/firebase.ts:// Get Firebase configuration based on environment
src/firebase.ts:  // In development, we can use the dev config or env vars if present
src/firebase.ts:  // In production, strictly require environment variables with no fallbacks
src/firebase.ts:// Get the appropriate config based on environment
src/firebase.ts:// Validate the configuration
src/firebase.ts:      return true; // Continue in development even with missing fields
src/firebase.ts:      // In production, throw an error for missing configuration
src/firebase.ts:      // We'll log the error but not throw to prevent app crash
src/firebase.ts:// Initialize Firebase with the appropriate configuration - only if not already initialized
src/firebase.ts:// =============================================================================
src/firebase.ts:// FIREBASE SERVICES
src/firebase.ts:// =============================================================================
src/firebase.ts:// Initialize Firebase services
src/firebase.ts:// Firestore: prefer persistent IndexedDB cache (multi-tab). Fallbacks ensure robust behavior in
src/firebase.ts:// unsupported environments (e.g., private mode, SSR, older browsers).
src/firebase.ts:    // SSR/build environments
src/firebase.ts:  // As a last resort, ensure firestore is available to prevent app crash
src/firebase.ts:// -----------------------------------------------------------------------------
src/firebase.ts:// OPTIONAL: Connect to local emulators when running locally (http, localhost)
src/firebase.ts:// Controlled via VITE_USE_EMULATORS to avoid accidental emulator usage.
src/firebase.ts:// Ports read from firebase.json (firestore:8081, auth:9099, functions:8888, storage:9198)
src/firebase.ts:// -----------------------------------------------------------------------------
src/firebase.ts:  if (typeof window === "undefined") return; // SSR / build safeguard
src/firebase.ts:    // Firestore
src/firebase.ts:      /* already connected */
src/firebase.ts:      connectAuthEmulator(auth, "http://127.0.0.1:9099", { disableWarnings: true });
src/firebase.ts:      /* already */
src/firebase.ts:      /* already */
src/firebase.ts:      /* already */
src/firebase.ts:// Add analytics in browser environment only
src/firebase.ts:// Collection references for easy access
src/firebase.ts:// Legacy alias kept for backward compatibility & migration clarity
src/firebase.ts:// New root collection for month-subcollection schema
src/firebase.ts:// Real-time connection status handlers
src/firebase.ts:// Alternative exports for compatibility with existing code
src/firebase.ts:export const db = firestore; // For backward compatibility, aliasing firestore as db
src/firebase.ts:// Offline persistence is configured via initializeFirestore localCache above. No extra call needed.
src/firebase.ts:// =============================================================================
src/firebase.ts:// UTILITY FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:/**
src/firebase.ts:// =============================================================================
src/firebase.ts:// ERROR HANDLING
src/firebase.ts:// =============================================================================
src/firebase.ts:/**
src/firebase.ts:  // Log the error for auditing purposes if possible
src/firebase.ts:    // Silent fail if we can't log the error
src/firebase.ts:// =============================================================================
src/firebase.ts:// AUDIT LOG FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:/**
src/firebase.ts:    // Don't throw - activity logging shouldn't break the main operation
src/firebase.ts:// =============================================================================
src/firebase.ts:// DIESEL MANAGEMENT FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:        // Calculate totalCost from existing data if not present
src/firebase.ts:        // Cast the entire data object to the correct type after including required fields
src/firebase.ts:          // Ensure required fields have fallbacks if not in data
src/firebase.ts:          // Add missing required properties
src/firebase.ts:// =============================================================================
src/firebase.ts:// TRIP MANAGEMENT FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:  // Build query based on filters
src/firebase.ts:          // Convert Firestore timestamps to ISO strings
src/firebase.ts:// =============================================================================
src/firebase.ts:// MISSED LOAD FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:// =============================================================================
src/firebase.ts:// DRIVER BEHAVIOR FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:// === Driver Behavior Events helpers (month-subcollection schema) ===
src/firebase.ts:  fleetNumber: string; // e.g. "21H"
src/firebase.ts:  eventType: string; // e.g. "Fatigue Alert"
src/firebase.ts:  eventDate: string; // "YYYY/MM/DD"
src/firebase.ts:  eventTime: string; // "HH:MM" (retain colon in doc id)
src/firebase.ts:  // Ensure all path segments are definite strings to satisfy typings and avoid runtime issues
src/firebase.ts:  const eventCategory = `${args.fleetNumber}_${args.eventType}_${year}`; // parent doc id
src/firebase.ts:  const docId = `${day}_${args.eventTime}`; // keep colon → "20_17:23"
src/firebase.ts:// Legacy listener retained (top-level collection). Prefer listenToDriverBehaviorEventsAllMonths.
src/firebase.ts:// New aggregated listener querying month collection groups (01..12) individually
src/firebase.ts:// Utility: one-off fixer to convert createdAt string to Timestamp for a known doc
src/firebase.ts:// =============================================================================
src/firebase.ts:// TYRE MANAGEMENT FUNCTIONS
src/firebase.ts:// =============================================================================
src/firebase.ts:/**
src/firebase.ts:  // Query with sorting for consistent ordering
src/firebase.ts:        // Convert Firestore Timestamps to standard dates
src/firebase.ts:/**
src/firebase.ts:    // Validate essential tyre data
src/firebase.ts:    // Add ID and timestamps if this is a new tyre
src/firebase.ts:/**
src/firebase.ts:    // Cast data to Tyre, handling potential Timestamp conversion
src/firebase.ts:/**
src/firebase.ts:    // Apply filters if provided
src/firebase.ts:      // Add sorting by default
src/firebase.ts:      // Default sorting if no filters
src/firebase.ts:      // Convert any Firestore Timestamps to ISO strings
src/firebase.ts:/**
src/firebase.ts:/**
src/firebase.ts:    // Validate inspection data
src/firebase.ts:    // Add to inspections subcollection
src/firebase.ts:    // Update the tyre document with latest inspection results
src/firebase.ts:/**
src/firebase.ts:/**
src/firebase.ts:/**
src/firebase.ts:    // Get brand distribution
src/firebase.ts:    // Get condition distribution
src/firebase.ts:// =============================================================================
src/firebase.ts:// DYNAMIC IMPORTS FOR CODE SPLITTING
src/firebase.ts:// =============================================================================
src/firebase.ts:// These functions provide a way to dynamically load specific services
src/firebase.ts:// This helps with code splitting and reduces initial bundle size
src/firebase.ts:/**
src/firebase.ts:        // Convert Firestore Timestamps to standard dates
src/firebase.ts:    // Find if entry with this tyreId already exists
src/firebase.ts:      // Update existing entry
src/firebase.ts:      // Add new entry
src/firebase.ts:export const loadDieselServices = () => import("./types/trip"); // Fallback to trip types temporarily
src/firebase.ts:// Fix path to match actual file location - corrected from DriverBehavior to match casing/structure
src/firebase.ts:export const loadDriverBehavior = () => import("./types/trip"); // Fallback to trip types temporarily
src/firebase.ts:export const loadAuditServices = () => import("./types/trip"); // Fallback to trip types temporarily until audit types are created
src/firebase.ts:// =============================================================================
src/firebase.ts:// RE-EXPORTS FOR BACKWARD COMPATIBILITY
src/firebase.ts:// =============================================================================
src/firebase.ts:// Re-export Firebase modules for convenience
src/firebase.ts:// ...<unchanged imports>...
src/firebase.ts:} from "firebase/database";               // 👈  NEW
src/firebase.ts:// -------------- existing config/initialise code left untouched --------------
src/firebase.ts:// … (all the code you pasted above up to the end of Firestore initialisation)
src/firebase.ts:// ─────────────────────────────────────────────────────────────────────────────
src/firebase.ts:// REALTIME DATABASE INITIALISATION  ► exports: rtdb, dbRef, dbOn, dbOff
src/firebase.ts:// ─────────────────────────────────────────────────────────────────────────────
src/firebase.ts:/**
src/firebase.ts:/** RTDB onValue wrapper – mirrors `firebase.database().ref().onValue`  */
src/firebase.ts:/** RTDB off wrapper – detaches all listeners on that ref/path */
src/firebase.ts:// ---------------------------------------------------------------------------
src/firebase.ts:// Existing Firestore alias (`db`) & re-exports kept for backward compatibility
src/firebase.ts:// ---------------------------------------------------------------------------
src/firebase.ts:// …<rest of the original file remains exactly the same>…
src/lib/currency.ts:// Define supported currencies in the application
src/services/dieselService.ts:// src/services/dieselService.ts (or wherever this file lives)
src/services/dieselService.ts:// ❌ REMOVE: never import UI components in a service layer
src/services/dieselService.ts:// import DieselNormsModal from "../components/Models/Diesel/DieselNormsModal";
src/services/dieselService.ts:// Collection references
src/services/dieselService.ts:/**
src/services/dieselService.ts:      // Prefer Timestamp; convert legacy dateISO if provided
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:    // Support either field while you migrate
src/services/dieselService.ts:    // de-dup on id
src/services/dieselService.ts:/**
src/services/dieselService.ts:      // if caller passes dateISO, normalize to Timestamp
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:    // Firestore requires consistent orderBy when doing range filters
src/services/dieselService.ts:    // If you still store string dates in some docs, you can fall back to client filtering:
src/services/dieselService.ts:    // const all = await getAllDieselRecords();
src/services/dieselService.ts:    // return all.filter(r => r.dateISO && r.dateISO >= startDate && r.dateISO <= endDate);
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/dieselService.ts:/**
src/services/wialonAuthService.ts:/**
src/services/wialonAuthService.ts:const WIALON_API_URL = "https://hst-api.wialon.com/wialon/ajax.html";
src/services/wialonAuthService.ts:/**
src/services/wialonAuthService.ts:    // Check for Wialon API errors
src/services/wialonAuthService.ts:/**
src/services/wialonReportService.ts:/**
src/services/wialonReportService.ts:// Assume WIALON_API_URL and other constants are available from an environment file
src/services/wialonReportService.ts:/**
src/services/wialonReportService.ts:/**
src/services/wialonReportService.ts:/**
src/services/wialonReportService.ts:  // Polling logic would be more robust in a real application
src/services/wialonReportService.ts:/**
src/services/wialonReportService.ts:/**
src/services/sensorService.ts:/* --------------------------------------------------------------------------
src/services/sensorService.ts:import firebaseApp from "../firebase";               // default export = FirebaseApp
src/services/sensorService.ts:/** Lazily initialise / reuse the Realtime DB instance */
src/services/sensorService.ts:/** DB node that stores the sensors */
src/services/sensorService.ts:/* ---------- one-off fetch ----------------------------------------------- */
src/services/sensorService.ts:  /* - ensure we keep an existing id or fall back to the key */
src/services/sensorService.ts:/* ---------- realtime subscription --------------------------------------- */
src/services/sensorService.ts:  /* unsubscribe mirrors Firebase RTDB API */
src/services/wialonUnitsService.ts:/**
src/services/wialonUnitsService.ts:const WIALON_API_URL = "https://hst-api.wialon.com/wialon/ajax.html";
src/services/wialonUnitsService.ts:  nm: string;          // Unit name
src/services/wialonUnitsService.ts:  cls: number;         // Class (2 for units)
src/services/wialonUnitsService.ts:  id: number;          // Unit ID
src/services/wialonUnitsService.ts:  mu: number;          // Modified/Update flags
src/services/wialonUnitsService.ts:  uacl: number;        // User access control level
src/services/wialonUnitsService.ts:/**
src/services/wialonUnitsService.ts:      "flags": 1,  // Basic data flags
src/services/wialonUnitsService.ts:      "to": 0      // 0 means get all items
src/services/wialonUnitsService.ts:    // Check for Wialon API errors
src/services/wialonUnitsService.ts:/**
src/services/wialonUnitsService.ts:      "flags": 4294967295,  // All available flags (0xFFFFFFFF)
src/services/wialonUnitsService.ts:/**
src/services/jobCardService.ts:// Lightweight converters so onSnapshot returns typed objects
src/services/wialonService.ts:// src/services/wialonService.ts
src/services/wialonService.ts:const WIALON_API_URL = getEnvVar("VITE_WIALON_API_URL", "https://hst-api.wialon.com");
src/services/wialonService.ts:const DEFAULT_WIALON_HOST = "https://hosting.wialon.com";
src/services/wialonService.ts:/**
src/services/wialonService.ts:  // Already initialized and logged in
src/services/wialonService.ts:    // Double check if session is still valid by pinging the user
src/services/wialonService.ts:      // Fallthrough, re-init session
src/services/wialonService.ts:  // Fresh login required
src/services/wialonService.ts:  initSession: typeof initSession; // <--- FIXED: Now part of type/interface and export
src/services/wialonService.ts:  initSession // <-- FIXED: implementation included
src/App.tsx:// ---------- Context Providers ----------
src/App.tsx:// ---------- UI Providers ----------
src/App.tsx:/**
src/App.tsx:// Error Handling
src/App.tsx:// Offline & Network Support
src/App.tsx:// Define a single status enum to manage app state more cleanly
src/App.tsx:        // Show fallback for debugging or critical errors from env variables
src/App.tsx:          return; // exit initializeServices early
src/App.tsx:          // High-signal logs with grouped formatting
src/App.tsx:          // Existing severity handling
src/App.tsx:        // Store the error emitter for other components to use
src/App.tsx:          // Manually call each registered handler
src/App.tsx:          registerErrorHandler(() => {}); // This returns the unregister function
src/App.tsx:          // Instead, we'll log the error and let existing system handle it
src/App.tsx:        // Global error handlers for unhandled cases
src/App.tsx:        // Register global handlers
src/App.tsx:        // Initialize services and handle potential errors
src/App.tsx:            // Error is already handled by handleError utility
src/App.tsx:        // If no fatal errors occurred, set status to ready
src/App.tsx:  }, [status]); // Add status to dependencies to prevent infinite loop if an error occurs
src/App.tsx:    // Show a detailed error or a generic fallback
src/App.tsx:        // Use our stored error emitter if available
src/App.tsx:        {/* Application alerts and notifications */}
src/App.tsx:        {/* Main application routes and layout */}
src/AppRoutes.tsx:// A tiny helper to keep JSX clean
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:// Lazy-loaded Wialon components with named exports
src/AppRoutes.tsx:// Wialon Dashboard page
src/AppRoutes.tsx:/* -----------------------------
src/AppRoutes.tsx:        {/* Top-Level Pages */}
src/AppRoutes.tsx:        {/* Analytics */}
src/AppRoutes.tsx:        {/* Clients */}
src/AppRoutes.tsx:        {/* Diesel */}
src/AppRoutes.tsx:        {/* Drivers */}
src/AppRoutes.tsx:        {/* Tyres */}
src/AppRoutes.tsx:        {/* Trips */}
src/AppRoutes.tsx:        {/* Admin Management (Components) */}
src/AppRoutes.tsx:        {/* Wialon shortcuts (aliases) */}
src/AppRoutes.tsx:        {/** dev all-pages explorer removed */}
src/data/index.ts:// Main export file to maintain backward compatibility
src/data/index.ts:// Added exports for trips, tyre, and workshop data
src/data/index.ts:// export * from './workshopJobCard'; // file no longer present
src/data/index.ts:// Additional utility exports can be added here if needed
src/assets/matanuska-logo-base64.ts:// Base64 encoded Matanuska logo for the login page
src/assets/matanuska-logo-base64.ts:// Yellow background with blue Matanuska text
src/hooks/useWialonResources.ts:/**
src/hooks/useWialonResources.ts:            rawObject: r, // Added rawObject for TypeScript compatibility
src/hooks/useWialonUnitDetail.ts:// src/hooks/useWialonUnitDetail.ts
src/hooks/useWialonUnitDetail.ts:/**
src/hooks/useWialonUnitDetail.ts:/** Hook result shape (explicit so callers / TS know available fields) */
src/hooks/useWialonUnitDetail.ts:  unit: UnitDetail | null;            // alias for backward compatibility
src/hooks/useWialonUnitDetail.ts:  /* -------------------------
src/hooks/useWialonUnitDetail.ts:        /* ignore */
src/hooks/useWialonUnitDetail.ts:        /* ignore */
src/hooks/useWialonUnitDetail.ts:    // prefer getPosition()
src/hooks/useWialonUnitDetail.ts:        /* ignore */
src/hooks/useWialonUnitDetail.ts:    // common shapes: pos array [lon,lat], position object or lastPos
src/hooks/useWialonUnitDetail.ts:    // last-resort fields
src/hooks/useWialonUnitDetail.ts:        /* ignore */
src/hooks/useWialonUnitDetail.ts:  /* -------------------------
src/hooks/useWialonUnitDetail.ts:      // initialize session if token provided
src/hooks/useWialonUnitDetail.ts:      // The wialonService in your codebase exposes getUnits()
src/hooks/useWialonUnitDetail.ts:      // We'll fetch all units and find the requested one (robust across SDKs)
src/hooks/useWialonUnitDetail.ts:      // Normalise unitId to string for comparison
src/hooks/useWialonUnitDetail.ts:        // also compare via common name fields as a fallback
src/hooks/useWialonUnitDetail.ts:    // include refreshCounter implicitly via closure (we don't reference it directly here)
src/hooks/useWialonUnitDetail.ts:    // eslint-disable-next-line react-hooks/exhaustive-deps
src/hooks/useWialonUnitDetail.ts:  // Return both `detail` and `unit` (alias) for backward compatibility
src/hooks/useWialonUnits.ts:// src/hooks/useWialonUnits.ts
src/hooks/useWialonUnits.ts:/**
src/hooks/useWialonUnits.ts:/* -------------------------
src/hooks/useWialonUnits.ts:/**
src/hooks/useWialonUnits.ts:  // Check common fields first
src/hooks/useWialonUnits.ts:  // Check getter method
src/hooks/useWialonUnits.ts:      /* ignore */
src/hooks/useWialonUnits.ts:  // Fallback to other common fields
src/hooks/useWialonUnits.ts:/**
src/hooks/useWialonUnits.ts:  // Check common fields
src/hooks/useWialonUnits.ts:  // Check getter method
src/hooks/useWialonUnits.ts:      /* ignore */
src/hooks/useWialonUnits.ts:  // Fallback to a string-like ID
src/hooks/useWialonUnits.ts:/**
src/hooks/useWialonUnits.ts:  // Prefer getPosition() if available
src/hooks/useWialonUnits.ts:      // Handle array format [lon, lat]
src/hooks/useWialonUnits.ts:      // Handle object format
src/hooks/useWialonUnits.ts:      /* ignore */
src/hooks/useWialonUnits.ts:  // Check common fields
src/hooks/useWialonUnits.ts:  // Last-resort fields
src/hooks/useWialonUnits.ts:/**
src/hooks/useWialonUnits.ts:  // Check getter method
src/hooks/useWialonUnits.ts:      // ignore
src/hooks/useWialonUnits.ts:  // Check common fields
src/hooks/useWialonUnits.ts:/* -------------------------
src/hooks/useWialonUnits.ts:      // Use wialonService implementation
src/hooks/useWialonUnits.ts:      // getUnits might return any[] (SDK types vary)
src/hooks/useWialonUnits.ts:        // Add type annotation for parameter 'u' to fix the 'any' error
src/hooks/useWialonUnits.ts:          // get id as string then convert to number if numeric
src/hooks/useWialonUnits.ts:          // ensure numeric id as your UnitInfo requires number
src/hooks/useWialonUnits.ts:            // If id is not numeric, drop (to match original type)
src/hooks/useWialonUnits.ts:          // Ensure position fields are numbers
src/hooks/useTyrePageState.tsx:// Extended Tyre interface that includes properties that might not be in the base Tyre type
src/hooks/useTyrePageState.tsx:// If the Tyre type is not exported from useTyres, use this interface instead:
src/hooks/useTyrePageState.tsx:// Make sure this matches exactly with your useTyres Tyre interface
src/hooks/useTyrePageState.tsx:// export interface Tyre {
src/hooks/useTyrePageState.tsx://   id: string;
src/hooks/useTyrePageState.tsx://   serialNumber: string;
src/hooks/useTyrePageState.tsx://   brand: string;
src/hooks/useTyrePageState.tsx://   size: string; // This should be string, not object based on the error
src/hooks/useTyrePageState.tsx://   dotCode?: string;
src/hooks/useTyrePageState.tsx://   manufacturingDate?: Date;
src/hooks/useTyrePageState.tsx://   model?: string;
src/hooks/useTyrePageState.tsx://   pattern?: string;
src/hooks/useTyrePageState.tsx://   condition?: {
src/hooks/useTyrePageState.tsx://     status: 'good' | 'fair' | 'poor' | 'critical';
src/hooks/useTyrePageState.tsx://     treadDepth: number;
src/hooks/useTyrePageState.tsx://   };
src/hooks/useTyrePageState.tsx://   status?: 'new' | 'in_service' | 'repair' | 'scrapped';
src/hooks/useTyrePageState.tsx://   installation?: {
src/hooks/useTyrePageState.tsx://     vehicleId: string;
src/hooks/useTyrePageState.tsx://     installationDate?: Date;
src/hooks/useTyrePageState.tsx://     position?: string;
src/hooks/useTyrePageState.tsx://   };
src/hooks/useTyrePageState.tsx://   kmRun?: number;
src/hooks/useTyrePageState.tsx://   kmRunLimit?: number;
src/hooks/useTyrePageState.tsx://   location?: string;
src/hooks/useTyrePageState.tsx://   notes?: string;
src/hooks/useTyrePageState.tsx://   createdAt?: Date;
src/hooks/useTyrePageState.tsx://   updatedAt?: Date;
src/hooks/useTyrePageState.tsx:// }
src/hooks/useTyrePageState.tsx:// UI Record interface for transformed data
src/hooks/useTyrePageState.tsx:// Hook return type
src/hooks/useTyrePageState.tsx:  // Core context data and methods
src/hooks/useTyrePageState.tsx:  // UI state
src/hooks/useTyrePageState.tsx:  // UI data transformations
src/hooks/useTyrePageState.tsx:/**
src/hooks/useTyrePageState.tsx:  // UI State
src/hooks/useTyrePageState.tsx:  // Generate UI records from tyres if needed
src/hooks/useTyrePageState.tsx:    // Core context data and methods
src/hooks/useTyrePageState.tsx:    // UI state
src/hooks/useTyrePageState.tsx:    // UI data transformations
src/hooks/useDriverBehavior.ts:  // Subscribe to all driver behavior events
src/hooks/useDriverBehavior.ts:  // Subscribe to a specific driver's behavior events
src/hooks/useDriverBehavior.ts:              // Update existing event
src/hooks/useDriverBehavior.ts:              // Add new event
src/hooks/useDriverBehavior.ts:  // Add a new driver behavior event
src/hooks/useDriverBehavior.ts:  // Update an existing driver behavior event
src/hooks/useDriverBehavior.ts:  // Filter events by various criteria
src/hooks/useDriverBehavior.ts:  // Generate a document path for an event
src/hooks/useDriverBehavior.ts:    const month = event.eventDate.split("/")[1]; // Extract month from "2025/06/20"
src/hooks/useDriverBehavior.ts:  // Auto-subscribe based on options
src/hooks/useDriverBehavior.ts:    // Cleanup on unmount
src/hooks/useUserPreferences.ts:// Define a more specific type for preferences if possible,
src/hooks/useUserPreferences.ts:// to improve type safety and autocompletion.
src/hooks/useUserPreferences.ts:  // Add other preference properties here
src/hooks/useUserPreferences.ts:/**
src/hooks/useUserPreferences.ts:  // Initialize state with a more specific type.
src/hooks/useUserPreferences.ts:  // Use onSnapshot for real-time updates
src/hooks/useUserPreferences.ts:    // This listener will fetch the initial data and any subsequent changes.
src/hooks/useUserPreferences.ts:    // The cleanup function unsubscribes the listener when the component unmounts.
src/hooks/useUserPreferences.ts:  // The save function is wrapped in useCallback to prevent unnecessary re-creations.
src/hooks/useUserPreferences.ts:      // Optimistically update the local state for instant feedback.
src/hooks/useUserPreferences.ts:      // Attempt to update the database.
src/hooks/useUserPreferences.ts:      setError(null); // Clear any previous errors on success.
src/hooks/useUserPreferences.ts:      // Rollback the local state and set an error message on failure.
src/hooks/usestockinventory.ts:// ==== TYPE DEFINITIONS ====
src/hooks/usestockinventory.ts:// ==== HOOK IMPLEMENTATION ====
src/hooks/usestockinventory.ts:  // Load & subscribe to stock data in Firestore
src/hooks/usestockinventory.ts:  // Add stock
src/hooks/usestockinventory.ts:  // Update stock
src/hooks/usestockinventory.ts:  // Delete stock
src/hooks/useWialonUnit.ts:  // Fetch unit details
src/hooks/useWialonUnit.ts:  // Sensor subscription stub (replace with actual subscription logic)
src/hooks/useWialonUnit.ts:      // Assume wialonService.subscribe returns an unsubscribe function
src/hooks/useWialonUnit.ts:  // Subscribe to common sensors
src/hooks/useWialonUnit.ts:      const commonSensorIds = [1, 2, 3]; // configure
src/hooks/useWialonUnit.ts:  // Initial fetch
src/hooks/useWialonDiagnostics.ts:/**
src/hooks/useWialonDiagnostics.ts:  /**
src/hooks/useWialonDiagnostics.ts:    redirect?: boolean; // Whether to navigate to diagnostics page after running tests
src/hooks/useWialonDiagnostics.ts:    silent?: boolean;   // Whether to run in background without UI feedback
src/hooks/useWialonDiagnostics.ts:      // Navigate to diagnostics page if requested
src/hooks/useWialonDiagnostics.ts:  /**
src/hooks/useTrips.ts:// src/hooks/useTrips.ts
src/hooks/useTrips.ts:import { db } from '../firebase'; // Your Firestore instance
src/hooks/useTrips.ts:import { Trip, TripStatus } from '../types/trip'; // Your Trip interface
src/hooks/useTrips.ts:import { useToast } from './useToast'; // Your custom toast hook
src/hooks/useTrips.ts:import { handleError, ErrorCategory } from '../utils/errorHandling'; // Your global error handling
src/hooks/useTrips.ts:  startDate?: string; // ISO date string (YYYY-MM-DD)
src/hooks/useTrips.ts:  endDate?: string;   // ISO date string (YYYY-MM-DD)
src/hooks/useTrips.ts:  status?: TripStatus | 'all'; // Filter by status, or 'all'
src/hooks/useTrips.ts:  // Add other filter options as needed (e.g., vehicleId, driverId, clientName)
src/hooks/useTrips.ts:/**
src/hooks/useTrips.ts:      // Filter by status
src/hooks/useTrips.ts:      // Filter by date range (e.g., for trips that start/end within the range)
src/hooks/useTrips.ts:      // This is a common approach for calendar views. You might adjust based on your exact data model.
src/hooks/useTrips.ts:        // Convert ISO date string to Firestore Timestamp for comparison
src/hooks/useTrips.ts:        q = query(q, where('loadDate', '>=', startTimestamp)); // Assuming 'loadDate' is the relevant date field
src/hooks/useTrips.ts:        const endTimestamp = Timestamp.fromDate(new Date(options.endDate + 'T23:59:59.999Z')); // End of day
src/hooks/useTrips.ts:      // Order by date for calendar display
src/hooks/useTrips.ts:    // TODO: For real-time calendar updates, consider using onSnapshot here
src/hooks/useTrips.ts:    // const unsubscribe = onSnapshot(q, (snapshot) => { ... }); return unsubscribe;
src/hooks/useTrips.ts:  }, [fetchTrips]); // Re-fetch when options change
src/hooks/useWialonSdk.ts:  "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en/wsdk/script/wialon.js";
src/hooks/useVehicleTyreStore.ts:/** ================== Types ================== */
src/hooks/useVehicleTyreStore.ts:  RegistrationNo: string; // e.g. 'AAX2987' or 'ABB1578/ABB1577'
src/hooks/useVehicleTyreStore.ts:  StoreName: string;      // e.g. '15L', '2T'
src/hooks/useVehicleTyreStore.ts:  TyrePosDescription: string; // e.g. 'V1', 'T12', 'SP'
src/hooks/useVehicleTyreStore.ts:  TyreCode: string;            // e.g. 'MAT0171'
src/hooks/useVehicleTyreStore.ts:  // Selectors
src/hooks/useVehicleTyreStore.ts:  // Mutations
src/hooks/useVehicleTyreStore.ts:    tyreCode?: string; // if omitted, remove the doc regardless of code match
src/hooks/useVehicleTyreStore.ts:/** ================== Helpers ================== */
src/hooks/useVehicleTyreStore.ts:// Keep your doc ID format consistent with the seeder
src/hooks/useVehicleTyreStore.ts:/** ================== Hook ================== */
src/hooks/useVehicleTyreStore.ts:  // Live subscription
src/hooks/useVehicleTyreStore.ts:  /** ================== Selectors ================== */
src/hooks/useVehicleTyreStore.ts:  /** ================== Mutations ================== */
src/hooks/useVehicleTyreStore.ts:  /**
src/hooks/useVehicleTyreStore.ts:      // Find current occupant(s)
src/hooks/useVehicleTyreStore.ts:      // Clear occupants at (store,pos)
src/hooks/useVehicleTyreStore.ts:      // Upsert new assignment with composite ID
src/hooks/useVehicleTyreStore.ts:  /**
src/hooks/useVehicleTyreStore.ts:  /**
src/hooks/useVehicleTyreStore.ts:      // Resolve source
src/hooks/useVehicleTyreStore.ts:      // Read source data
src/hooks/useVehicleTyreStore.ts:      // Destination occupants
src/hooks/useVehicleTyreStore.ts:      // Batch: delete source + (optional) dests, then set new dest
src/hooks/useVehicleTyreStore.ts:      // Delete source
src/hooks/useVehicleTyreStore.ts:      // Clear destination occupants
src/hooks/useVehicleTyreStore.ts:      // Create destination doc with new composite id
src/hooks/useVehicleTyreStore.ts:  /**
src/hooks/WialonUnitList.tsx:// Removed the import for useWialonUnits as it's no longer used here
src/hooks/WialonUnitList.tsx:import { ExtendedWialonUnit } from '../hooks/useWialon'; // Import ExtendedWialonUnit from the new hook
src/hooks/WialonUnitList.tsx:  /** The list of Wialon units to display */
src/hooks/WialonUnitList.tsx:  /** Loading state from the Wialon hook */
src/hooks/WialonUnitList.tsx:  /** Error state from the Wialon hook */
src/hooks/WialonUnitList.tsx:  /** Optional filter for units by name */
src/hooks/WialonUnitList.tsx:  /** Optional filter for units by type/class */
src/hooks/WialonUnitList.tsx:  /** Optional max units to display */
src/hooks/WialonUnitList.tsx:  /** Callback when a unit is selected */
src/hooks/WialonUnitList.tsx:/**
src/hooks/WialonUnitList.tsx:  units, // Now a prop
src/hooks/WialonUnitList.tsx:  loading, // Now a prop
src/hooks/WialonUnitList.tsx:  error // Now a prop
src/hooks/WialonUnitList.tsx:  // Effect to filter and sort units whenever the 'units' prop, filters, or sort config change
src/hooks/WialonUnitList.tsx:      setFilteredUnits([]); // Clear units if not available
src/hooks/WialonUnitList.tsx:    let currentFiltered = [...units]; // Start with the units received as props
src/hooks/WialonUnitList.tsx:    // Apply name search filter
src/hooks/WialonUnitList.tsx:    // Apply type filter
src/hooks/WialonUnitList.tsx:        // Check for both cls_id (number) and type (string) for filtering
src/hooks/WialonUnitList.tsx:    // Apply sorting
src/hooks/WialonUnitList.tsx:      // Safely access properties for sorting, handling potential undefined values
src/hooks/WialonUnitList.tsx:      // Handle numerical sorting specifically for 'last_message'
src/hooks/WialonUnitList.tsx:        // Default string comparison for other keys
src/hooks/WialonUnitList.tsx:    // Apply limit if specified
src/hooks/WialonUnitList.tsx:  }, [units, searchQuery, selectedType, sortConfig, limit]); // Re-run when these dependencies change
src/hooks/WialonUnitList.tsx:  // Get unique unit types for the filter dropdown
src/hooks/WialonUnitList.tsx:      .filter(Boolean) // Remove any null or undefined types
src/hooks/WialonUnitList.tsx:        id: String(type), // Use the string representation as the option value
src/hooks/WialonUnitList.tsx:        name: type as string // Display name
src/hooks/WialonUnitList.tsx:  // Display loading, error, or no units messages
src/hooks/useRealtimeTrips.ts:  updatedAt: any; // Firestore timestamp
src/hooks/useRealtimeTrips.ts:  [key: string]: any; // for extra fields
src/hooks/useRealtimeTrips.ts:  status?: string; // e.g. "active"
src/hooks/useRealtimeTrips.ts:    // Default no-op cleanup function
src/hooks/useRealtimeTrips.ts:      // Build query
src/hooks/useRealtimeTrips.ts:    // Always return cleanup
src/hooks/useCurrencyConverter.ts:  const [exchangeRate, setExchangeRate] = useState<number>(18.5); // fallback rate
src/hooks/useCurrencyConverter.ts:    // Fetch latest from Firebase or external API
src/hooks/useCurrencyConverter.ts:    // In a real implementation, we would fetch from an API or Firestore
src/hooks/useCurrencyConverter.ts:    // Here using a mock value since API calls are out of scope
src/hooks/useCurrencyConverter.ts:        // This would be an actual API call in production
src/hooks/useCurrencyConverter.ts:        // For example: const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
src/hooks/useCurrencyConverter.ts:        // const data = await response.json();
src/hooks/useCurrencyConverter.ts:        // setExchangeRate(data.rates.ZAR || 18.5);
src/hooks/useCurrencyConverter.ts:        // Simulating API response delay
src/hooks/useCurrencyConverter.ts:    // Refresh every hour in a production environment
src/hooks/useCurrencyConverter.ts:    // const interval = setInterval(fetchExchangeRate, 3600000);
src/hooks/useCurrencyConverter.ts:    // return () => clearInterval(interval);
src/hooks/useServerWialonSession.ts:/**
src/hooks/useServerWialonSession.ts:/**
src/hooks/useServerWialonSession.ts:/**
src/hooks/useWorkshopJobCards.ts:// Mock data for development
src/hooks/useWorkshopJobCards.ts:// Helper types for workshop statistics
src/hooks/useWorkshopJobCards.ts:  // Fetch job cards from your data source
src/hooks/useWorkshopJobCards.ts:    // Simulate API call
src/hooks/useWorkshopJobCards.ts:      // In a real app, you would fetch from your API based on the current week
src/hooks/useWorkshopJobCards.ts:  // Calculate workshop statistics
src/hooks/useWorkshopJobCards.ts:    // Initialize category counters
src/hooks/useWorkshopJobCards.ts:    // Initialize priority counters
src/hooks/useWorkshopJobCards.ts:    // Count jobs by category and priority
src/hooks/useWorkshopJobCards.ts:    // Calculate average duration (simple approximation)
src/hooks/useWorkshopJobCards.ts:    // In a real app, you would calculate based on actual completion times
src/hooks/useWorkshopJobCards.ts:    const averageDuration = 3.5; // hours
src/hooks/useWorkshopJobCards.ts:          // Auto-update status if all tasks are completed
src/hooks/useWorkshopJobCards.ts:  // Get cards for a specific date range
src/hooks/useWorkshopJobCards.ts:  // Navigate to different weeks
src/hooks/usetyrepossitions.ts:/** ---- Types ---- */
src/hooks/usetyrepossitions.ts:  fleetNo: string; // doc id
src/hooks/usetyrepossitions.ts:  positions: string[]; // mutable array
src/hooks/usetyrepossitions.ts:  size: string; // e.g. "315/80R22.5"
src/hooks/usetyrepossitions.ts:/** ---- Constants / Utilities ---- */
src/hooks/usetyrepossitions.ts:/** Standardized position lists by asset type */
src/hooks/usetyrepossitions.ts:/** Get position configuration based on fleet number prefix */
src/hooks/usetyrepossitions.ts:/** Default positions helper */
src/hooks/usetyrepossitions.ts:/** ---- Hook Return Type ---- */
src/hooks/usetyrepossitions.ts:/** ---- Hook ---- */
src/hooks/usetyrepossitions.ts:  // Fleet assets subscription
src/hooks/usetyrepossitions.ts:  // Tyre patterns subscription
src/hooks/usetyrepossitions.ts:  /** ---- Lookups ---- */
src/hooks/usetyrepossitions.ts:  /** ---- Mutations ---- */
src/hooks/useWialonApiUnits.ts:  detailed?: boolean;  // Whether to fetch detailed unit info
src/hooks/useWialonApiUnits.ts:  autoFetch?: boolean; // Whether to auto-fetch on mount
src/hooks/useWialonApiUnits.ts:/**
src/hooks/useWialonApiUnits.ts:  // Auto-fetch on mount if enabled and logged in
src/hooks/useWialonApiUnits.ts:  // Helper function to get unit by ID
src/hooks/useWebBookDriverBehavior.ts:// src/hooks/useWebBookDriverBehavior.ts
src/hooks/useWebBookDriverBehavior.ts:// The event type (matching your payload)
src/hooks/useWebBookDriverBehavior.ts:  id: string;               // Firestore document ID
src/hooks/useWebBookDriverBehavior.ts:    // Firestore query: only web_book-imported events
src/hooks/useWebBookDriverBehavior.ts:    // Real-time subscription
src/hooks/useWebBookDriverBehavior.ts:  // Handy filters
src/hooks/useWebBookDriverBehavior.ts:    events,           // All events imported from web_book
src/hooks/useWebBookDriverBehavior.ts:    byFleet,          // (fleetNumber: string) => event[]
src/hooks/useWebBookDriverBehavior.ts:    byEventType,      // (eventType: string) => event[]
src/hooks/useClientFormData.ts:  paymentTerms: string; // e.g., "Net 30", "COD"
src/hooks/useClientFormData.ts:    // Add more countries as needed
src/hooks/useClientFormData.ts:      // Check if there are any documents with the same regNumber, excluding the current client
src/hooks/useClientFormData.ts:      // Check if there are any documents with the same VAT number, excluding the current client
src/hooks/useTyreAssignments.tsx:  // Real-time listener
src/hooks/useTyreAssignments.tsx:  // Assign single tyre
src/hooks/useTyreAssignments.tsx:  // Bulk assign multiple tyres
src/hooks/useTyreAssignments.tsx:  // Unassign a tyre
src/hooks/useTyreAssignments.tsx:    bulkAssignTyres, // ✅ added
src/hooks/useWebBookTrips.ts:    // Query Firestore for trips with importSource "web_book"
src/hooks/useWebBookTrips.ts:    // Create real-time listener with onSnapshot instead of one-time query
src/hooks/useWebBookTrips.ts:        // Debug: log fetched trips to console
src/hooks/useWebBookTrips.ts:    // Cleanup subscription when component unmounts
src/hooks/useWebBookTrips.ts:  // Filter trips by status
src/hooks/useTyreCatalog.ts:/** ===== Types (aligned to your seed) ===== */
src/hooks/useTyreCatalog.ts:  id: string; // lowercased, non-alnum stripped
src/hooks/useTyreCatalog.ts:  name: string; // "Bridgestone"
src/hooks/useTyreCatalog.ts:  id: string; // size sanitized (e.g., "31580r225")
src/hooks/useTyreCatalog.ts:  size: string; // "315/80R22.5"
src/hooks/useTyreCatalog.ts:  id: string; // brand_pattern_size (sanitized)
src/hooks/useTyreCatalog.ts:  brand: string; // as saved (may be mixed case in seed)
src/hooks/useTyreCatalog.ts:  pattern: string; // may be "" for standard
src/hooks/useTyreCatalog.ts:/** ===== Collection names ===== */
src/hooks/useTyreCatalog.ts:/** ===== ID builders (mirror your seeder) ===== */
src/hooks/useTyreCatalog.ts:/** ===== Small helpers ===== */
src/hooks/useTyreCatalog.ts:/** ===== Hook API ===== */
src/hooks/useTyreCatalog.ts:  // data
src/hooks/useTyreCatalog.ts:  // selectors
src/hooks/useTyreCatalog.ts:  sizesByBrand: (brand: string) => string[]; // unique sizes available for brand
src/hooks/useTyreCatalog.ts:  brandsBySize: (size: string) => string[]; // unique brands available for size
src/hooks/useTyreCatalog.ts:  positionsFor: (brand: string, size: string) => TyreFitment[]; // fitments available
src/hooks/useTyreCatalog.ts:  // mutations
src/hooks/useTyreCatalog.ts:  // bulk
src/hooks/useTyreCatalog.ts:  /** Realtime subscriptions */
src/hooks/useTyreCatalog.ts:    // brands
src/hooks/useTyreCatalog.ts:    // sizes
src/hooks/useTyreCatalog.ts:    // patterns
src/hooks/useTyreCatalog.ts:  /** Indexes for fast selectors */
src/hooks/useTyreCatalog.ts:  /** Selectors */
src/hooks/useTyreCatalog.ts:      // normalize label casing for display
src/hooks/useTyreCatalog.ts:  /** Mutations */
src/hooks/useWialonEvents.ts:        // Adapt to your schema
src/hooks/useTaskHistory.ts:/**
src/hooks/useTaskHistory.ts:    // First, get initial data
src/hooks/useTaskHistory.ts:    // Then subscribe to real-time updates
src/hooks/useCapacitor.ts:// Import types only for type checking
src/hooks/useCapacitor.ts:  // State for dynamically loaded modules
src/hooks/useCapacitor.ts:    // Dynamically load modules only when needed
src/hooks/useCapacitor.ts:        // Load BarcodeScanner module
src/hooks/useCapacitor.ts:        // Load Camera module and enums
src/hooks/useCapacitor.ts:      // Ensure modules are loaded and permissions granted
src/hooks/useCapacitor.ts:      // Hide the website background
src/hooks/useCapacitor.ts:      // Show the website background again
src/hooks/useCapacitor.ts:      // Ensure background is restored on error
src/hooks/useCapacitor.ts:      // Ensure modules are loaded
src/hooks/useToast.ts:    // Auto-dismiss after duration (default 5 seconds)
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useFirestoreCollection.ts:/**
src/hooks/useVendors.ts:/* ------------------------------------------------------------------
src/hooks/useVendors.ts:/* ────────────────────────────────────────────────────────────────
src/hooks/useVendors.ts:  /* ❗ <-- YOUR PUBLIC CLIENT CONFIG HERE  --> */
src/hooks/useVendors.ts:/* ────────────────────────────────────────────────────────────────
src/hooks/useVendors.ts:  /* … <<< KEEP THE REMAINING LIST UNCHANGED >>> … */
src/hooks/useVendors.ts:/* ────────────────────────────────────────────────────────────────
src/hooks/useVendors.ts:  /* ---------- download ---------- */
src/hooks/useVendors.ts:  /* ---------- one-time seed ---------- */
src/hooks/useClientDropdown.tsx:// Define the client dropdown item interface based on what useClientDropdown returns
src/hooks/useClientDropdown.tsx:/**
src/hooks/useClientDropdown.tsx:  // Use the existing useClientDropdown hook from useClients
src/hooks/useClientDropdown.tsx:  // Transform ClientDropdownItem[] to ClientOption[] format
src/hooks/useNetworkStatus.ts:/**
src/hooks/useNetworkStatus.ts:    // Subscribe to network changes
src/hooks/useNetworkStatus.ts:  /**
src/hooks/useSensors.ts:/* ─────────────────────────────────────────────────────────────
src/hooks/useSensors.ts:/**
src/hooks/useSensors.ts:    let active = true; // guards against state-update after unmount
src/hooks/useWialonConnection.ts:/**
src/hooks/useWialonConnection.ts:      // Check if wialon SDK is loaded
src/hooks/useWialonConnection.ts:      // Get session instance
src/hooks/useWialonConnection.ts:      // Check if already logged in
src/hooks/useWialonConnection.ts:      // Try to login with token
src/hooks/useWialonConnection.ts:      // Initialize session and login
src/hooks/useWialonConnection.ts:        "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en"
src/hooks/useWialonConnection.ts:          // Calculate token expiry time if available in token response
src/hooks/useWialonGeofences.ts:// Narrowing helper: does the object expose getZones()?
src/hooks/useWialonGeofences.ts:/**
src/hooks/useWialonGeofences.ts:  // Load geofences when resource changes
src/hooks/useWialonGeofences.ts:    // Reset state if no selectedResId
src/hooks/useWialonGeofences.ts:    // Start loading process
src/hooks/useWialonGeofences.ts:      // Ensure resources array exists
src/hooks/useWialonGeofences.ts:      // Find selected resource
src/hooks/useWialonGeofences.ts:      // Safely extract zones from resource
src/hooks/useWialonGeofences.ts:      // Check if rawObject is available
src/hooks/useWialonGeofences.ts:      // Process zone data safely
src/hooks/useWialonGeofences.ts:        // Convert zones object to array safely
src/hooks/useWialonGeofences.ts:        // Map zone data to our format with defensive coding
src/hooks/useWialonGeofences.ts:            // Ensure points exist and are properly formatted
src/hooks/useWialonGeofences.ts:        }).filter(Boolean) as WialonGeofence[]; // Remove any null entries
src/hooks/useWialonGeofences.ts:    setError(null); // Clear errors when selecting a new resource
src/hooks/useErrorHandling.ts:  showUserErrors?: boolean; // Whether to expose errors to the user
src/hooks/useErrorHandling.ts:/**
src/hooks/useErrorHandling.ts:  /**
src/hooks/useErrorHandling.ts:  /**
src/hooks/useErrorHandling.ts:  /**
src/hooks/useErrorHandling.ts:        // Merge options
src/hooks/useErrorHandling.ts:        // Execute with retry capability
src/hooks/useErrorHandling.ts:        // Error has already been logged by handleError
src/hooks/useErrorHandling.ts:  /**
src/hooks/useFleetList.ts:    // Filter by status if onlyActive is true
src/hooks/useFleetList.ts:    // Filter by type
src/hooks/useFleetList.ts:        // Map string types to our vehicle categories
src/hooks/useFleetList.ts:    // Map to dropdown options
src/hooks/useFleetList.ts:  // Return all fleet options and helper methods
src/hooks/useClients.ts:// Define a type for the options object to fix implicit 'any' and property errors
src/hooks/useClients.ts:// Define a type for the client object returned by the hook
src/hooks/useClients.ts:  data: DocumentData; // Keep DocumentData for the raw Firestore data
src/hooks/useClients.ts:/**
src/hooks/useClients.ts:  // Specify the type for the state
src/hooks/useClients.ts:        // Build the query
src/hooks/useClients.ts:        // Filter for active clients if requested
src/hooks/useClients.ts:        // Add sorting
src/hooks/useClients.ts:        // Execute query
src/hooks/useClients.ts:        // Process results
src/hooks/useClients.ts:          const data = doc.data(); // data is already DocumentData
src/hooks/useClients.ts:          // Base client object for dropdown
src/hooks/useClients.ts:            // Include full data for reference
src/hooks/useClients.ts:          // Add contact info if requested
src/hooks/useClients.ts:        // Cast err to Error to get a message
src/hooks/useClients.ts:// Define a type for the search options
src/hooks/useClients.ts:/**
src/hooks/useClients.ts:    // Don't search if term is too short
src/hooks/useClients.ts:        // Get all clients (we'll filter client-side)
src/hooks/useClients.ts:        let clientCollectionRef = collection(db, 'clients'); // Use a different name to avoid confusion
src/hooks/useClients.ts:        let clientQuery = query(clientCollectionRef); // Start with a base query
src/hooks/useClients.ts:        // Convert search term to lowercase for case-insensitive matching
src/hooks/useClients.ts:        // Filter and map results
src/hooks/useClients.ts:            // Check if any specified field contains the search term
src/hooks/useClients.ts:            return fields.some((field: string) => { // Explicitly type 'field' as string
src/hooks/useClients.ts:    // Debounce the search to avoid excessive Firestore reads
src/hooks/useClients.ts:// Define a type for a single client document
src/hooks/useClients.ts:interface ClientDocumentData { // Renamed to avoid confusion with ClientDocument in useClient
src/hooks/useClients.ts:  contact?: string; // Optional contact
src/hooks/useClients.ts:  email?: string; // Optional email
src/hooks/useClients.ts:  telNo1?: string; // Optional phone numbers
src/hooks/useClients.ts:  // Add any other fields you expect to retrieve from a client document
src/hooks/useClients.ts:/**
src/hooks/useClients.ts:  // Specify the type for the state, which can be null
src/hooks/useClients.ts:        // Use v9 syntax: doc() and getDoc()
src/hooks/useClients.ts:            ...(clientDoc.data() as ClientDocumentData) // Assert the data type
src/hooks/useFleetData.ts:// Define Vehicle interface
src/hooks/useWialonSensor.ts:// src/hooks/useWialonUnitSensors.ts
src/hooks/useWialonSensor.ts:/**
src/hooks/useWialonSensor.ts:  /** Fetch unit detail */
src/hooks/useWialonSensor.ts:      // Convert service WialonUnit to types WialonUnit format
src/hooks/useWialonSensor.ts:  /** Subscribe to all sensors - Mock implementation until subscribeToSensor is available */
src/hooks/useWialonSensor.ts:    // TODO: Implement actual sensor subscription when wialonService.subscribeToSensor is available
src/hooks/useWialonSensor.ts:    // For now, return empty unsubscribe function
src/hooks/useWialonDrivers.ts:        // Correctly handle the case where session.resource_id is an array
src/hooks/useWialonDrivers.ts:          ? session.resource_id[0] // Use the first resource ID if it's an array
src/hooks/useWialonDrivers.ts:          // Fallback to the first available resource if none is provided in the session
src/hooks/useWialonDrivers.ts:          // No resources or resource ID found
src/hooks/useWialonDrivers.ts:      isMounted = false; // Cleanup to avoid state updates after unmount
src/hooks/useFirestoreQuery.ts:  cacheTtl?: number; // Time to live in milliseconds
src/hooks/useFirestoreQuery.ts:  listen?: boolean; // Whether to listen for real-time updates
src/hooks/useFirestoreQuery.ts:  cacheTtl: 24 * 60 * 60 * 1000, // 24 hours
src/hooks/useFirestoreQuery.ts:/**
src/hooks/useOfflineForm.ts:/**
src/hooks/useOfflineForm.ts:  /**
src/hooks/useOfflineForm.ts:      // Check if we're offline
src/hooks/useOfflineForm.ts:      // Generate ID if not provided
src/hooks/useOfflineForm.ts:      // Save to Firestore (or queue for offline)
src/hooks/useOfflineForm.ts:      // Call success callback if provided
src/hooks/useOfflineForm.ts:      // Call error callback if provided
src/hooks/useOfflineForm.ts:  /**
src/hooks/useOfflineForm.ts:      // Check if we're offline
src/hooks/useOfflineForm.ts:      // Delete from Firestore (or queue for offline)
src/hooks/useOfflineForm.ts:      // Call success callback if provided
src/hooks/useOfflineForm.ts:      // Call error callback if provided
src/hooks/usefeulstations.ts:/** ============== Types ============== */
src/hooks/usefeulstations.ts:  id?: string; // derived from buildDepotId(name, town)
src/hooks/usefeulstations.ts:  // Optional geo fields if you later add them
src/hooks/usefeulstations.ts:  // timestamps (string to align with your seed approach; you can switch to Firestore Timestamp)
src/hooks/usefeulstations.ts:  // Selectors
src/hooks/usefeulstations.ts:  // Mutations
src/hooks/usefeulstations.ts:/** ============== Constants/Utils ============== */
src/hooks/usefeulstations.ts:// Same sanitization as your seeder
src/hooks/usefeulstations.ts:/** ============== Hook ============== */
src/hooks/usefeulstations.ts:    // Sorted read (helps with UX and stable diffs)
src/hooks/usefeulstations.ts:  /** ---------- Selectors ---------- */
src/hooks/usefeulstations.ts:    // simple lowercase tokens for quick in-memory search
src/hooks/usefeulstations.ts:  /** ---------- Mutations ---------- */
src/hooks/useTimelineTrips.tsx:// useTimelineTrips.ts - Combines realtime + webhook trips and adds simulated entries with type-safe filtering
src/hooks/useTimelineTrips.tsx:// Type guard to ensure data matches Trip interface
src/hooks/useWialonSession.ts:// Use environment variables for configuration
src/hooks/useWialonSession.ts:const WIALON_API_URL = import.meta.env.VITE_WIALON_API_URL || "https://hst-api.wialon.com";
src/hooks/useWialonSession.ts:// Updated to include the 'sid' property.
src/hooks/useWialonSession.ts:  sid: string; // The session ID is now explicitly declared here.
src/hooks/useWialonSession.ts:// Add interface for return type
src/hooks/useWialonSession.ts:/**
src/hooks/useWialonSession.ts:  // The useRef hook is now using the updated type that includes sid.
src/hooks/useWialonSession.ts:    // Reset session state when SDK is not ready
src/hooks/useWialonSession.ts:    // Reset error on login attempt
src/hooks/useWialonSession.ts:    let isActive = true; // For cleanup handling
src/hooks/useWialonSession.ts:        // Validate window.wialon exists
src/hooks/useWialonSession.ts:            // Successful login
src/hooks/useWialonSession.ts:            // The Wialon SDK provides a session ID after a successful login.
src/hooks/useWialonSession.ts:                // The sid is correctly added to the session object here.
src/hooks/useWialon.ts:import { getEnvVar } from '../utils/envUtils'; // Assuming envUtils.ts exists and exports getEnvVar
src/hooks/useWialon.ts:// --- Wialon SDK minimal typing for this context ---
src/hooks/useWialon.ts:  y: number; // latitude
src/hooks/useWialon.ts:  x: number; // longitude
src/hooks/useWialon.ts:  s: number; // speed
src/hooks/useWialon.ts:  c: number; // course
src/hooks/useWialon.ts:  t: number; // timestamp
src/hooks/useWialon.ts:  sc: number; // satellites
src/hooks/useWialon.ts:interface WialonUnitSDK { // Represents the actual Wialon SDK Unit object with methods
src/hooks/useWialon.ts:// --- Removed unused WialonCore and WialonItem interface declarations ---
src/hooks/useWialon.ts:// If you plan to use them, comment them back in below:
src/hooks/useWialon.ts:// interface WialonCore { ... }
src/hooks/useWialon.ts:// interface WialonItem { ... }
src/hooks/useWialon.ts:// --- Extended Wialon unit interface (plain data for components) ---
src/hooks/useWialon.ts:// --- Wialon constants ---
src/hooks/useWialon.ts:const WIALON_API_URL = getEnvVar("VITE_WIALON_API_URL", "https://hst-api.wialon.com");
src/hooks/useWialon.ts:const WIALON_SDK_URL = getEnvVar("VITE_WIALON_SDK_URL", "https://hst-api.wialon.com/wsdk/script/wialon.js");
src/hooks/useWialon.ts:  // Load Wialon SDK script dynamically
src/hooks/useWialon.ts:  // Transform Wialon SDK unit object to plain ExtendedWialonUnit
src/hooks/useWialon.ts:  // Main initialization function for Wialon SDK and session
src/hooks/useWialon.ts:      // Login to Wialon
src/hooks/useWialon.ts:      // Data flags for units
src/hooks/useWialon.ts:      // Update data flags to receive unit data
src/hooks/useWialon.ts:      // Initial fetch of units
src/hooks/useWialon.ts:      // Listener for real-time unit updates
src/hooks/useWialon.ts:  // Effect to run initialization on component mount
src/hooks/useTyres.ts:// Define the Tyre interface based on your actual data structure
src/hooks/useTyres.ts:  // Add other properties as needed
src/hooks/useTyres.ts:  // Use Firestore to fetch tyres
src/hooks/useTyres.ts:      // Set up real-time listener
src/hooks/useTyres.ts:            id: docSnapshot.id, // This will override any id field that came from data()
src/hooks/useTyres.ts:      // Store unsubscribe function
src/hooks/useTyres.ts:  // Add a new tyre
src/hooks/useTyres.ts:  // Update an existing tyre
src/hooks/useTyres.ts:  // Delete a tyre
src/hooks/useTyres.ts:  // Memoize the return value for better performance
src/hooks/useTyreInspections.ts:// Define inspection interface
src/hooks/useTyreInspections.ts:        // Try fetching from a top-level tyreInspections collection
src/hooks/useTyreInspections.ts:            // Fallback to mock data if none found
src/hooks/useTyreInspections.ts:          // Keep mock data on error
src/hooks/useTyreInspections.ts:      // cancel flag is captured in fetchInspections scope
src/hooks/use-toast.ts:    // Auto dismiss
src/hooks/useTyreInventory.ts:// Define TyreDoc as an alias for Tyre with ID
src/hooks/useTyreInventory.ts:  // Core state
src/hooks/useTyreInventory.ts:  // Filtering state
src/hooks/useTyreInventory.ts:  // Pagination state
src/hooks/useTyreInventory.ts:  // --- Offline Queue Helpers ---
src/hooks/useTyreInventory.ts:  // --- Cache helpers ---
src/hooks/useTyreInventory.ts:      /*ignore*/
src/hooks/useTyreInventory.ts:  // Update total pages whenever filtered results or itemsPerPage changes
src/hooks/useTyreInventory.ts:    // Reset to first page if current page exceeds new total pages
src/hooks/useTyreInventory.ts:  // Use the tyres data from the useTyres hook
src/hooks/useTyreInventory.ts:  // Initial setup from cache
src/hooks/useTyreInventory.ts:  // Handlers
src/hooks/useTyreInventory.ts:  // CRUD operations
src/hooks/useTyreInventory.ts:  // Pagination
src/hooks/useTyreInventory.ts:  // UI mapping
src/hooks/useTyreInventory.ts:    // raw data
src/hooks/useTyreInventory.ts:    // filtering
src/hooks/useTyreInventory.ts:    // pagination
src/hooks/useTyreInventory.ts:    // ui mapping
src/hooks/useTyreInventory.ts:    // crud operations
src/hooks/useWialonReport.ts:      // Execute report using the corrected service method
src/hooks/useWialonReport.ts:      // Process the report result according to Wialon API structure
src/hooks/useWialonReport.ts:        // Fallback for SDK-based results
src/hooks/useWialonReport.ts:          // Use getTableRows if available
src/hooks/useWialonReport.ts:            // Use table data directly if getTableRows is not available
src/hooks/useChartDataTransform.ts:  // Sort options
src/hooks/useChartDataTransform.ts:  // Filter options
src/hooks/useChartDataTransform.ts:  // Aggregation options
src/hooks/useChartDataTransform.ts:  // Transformation options
src/hooks/useChartDataTransform.ts:    windowSize?: number; // For rolling calculations
src/hooks/useChartDataTransform.ts:  // Limit the number of results
src/hooks/useChartDataTransform.ts:/**
src/hooks/useChartDataTransform.ts:    // Apply filters
src/hooks/useChartDataTransform.ts:    // Apply aggregation
src/hooks/useChartDataTransform.ts:      // Group the data
src/hooks/useChartDataTransform.ts:      // Apply aggregation method to each group
src/hooks/useChartDataTransform.ts:    // Apply transformations
src/hooks/useChartDataTransform.ts:            // Convert values to percentage of total
src/hooks/useChartDataTransform.ts:            // Calculate cumulative sum
src/hooks/useChartDataTransform.ts:            // Calculate rolling average
src/hooks/useChartDataTransform.ts:            // Calculate growth rate compared to previous period
src/hooks/useChartDataTransform.ts:    // Sort data
src/hooks/useChartDataTransform.ts:    // Apply limit
src/hooks/useActionLogger.ts:/** -------------------------------------------
src/hooks/useActionLogger.ts:/** -------------------------------------------
src/hooks/useActionLogger.ts:// No-op console logger so the app never crashes if you don't pass a backend logger.
src/hooks/useActionLogger.ts:    // eslint-disable-next-line no-console
src/hooks/useActionLogger.ts:    // eslint-disable-next-line no-console
src/hooks/useActionLogger.ts:/** -------------------------------------------
src/hooks/useActionLogger.ts:      action: ActionType, // "CREATE" | "UPDATE" | "DELETE" | "VIEW"
src/hooks/useInventoryItem.ts:// If you already defined this elsewhere, remove this local interface and import it.
src/hooks/useInventoryItem.ts:  code: string; // StockCde
src/hooks/useInventoryItem.ts:  description: string; // StockDescription
src/hooks/useInventoryItem.ts:  costPrice: number; // per unit
src/hooks/useInventoryItem.ts:  qty: number; // on-hand
src/hooks/useInventoryItem.ts:  extendedValue?: number; // may be present from seeder
src/hooks/useInventoryItem.ts:/**
src/hooks/useInventoryItem.ts:  // Computed helpers
src/hooks/useInventoryItem.ts:  // Mutations
src/hooks/useInventoryItem.ts:    // tip: prefer a "soft delete" flag in production
src/hooks/useInventoryItem.ts:    ...computed, // isLowStock, value
src/hooks/useWialonUnitSensors.ts:        // TODO: Implement actual Wialon API call here
src/hooks/useWialonUnitSensors.ts:        // For now returning mock data
src/hooks/useDriverFormData.ts:  categories: string[]; // Array of license category codes
src/hooks/useDriverFormData.ts:        // Fallback to default categories if Firestore fails
src/hooks/useDriverFormData.ts:        // Try to fetch from Firestore first
src/hooks/useDriverFormData.ts:          // Fallback to default countries
src/hooks/useDriverFormData.ts:        // Fallback to default African countries
src/hooks/useDriverFormData.ts:        // This would normally fetch the driver from Firestore
src/hooks/useDriverFormData.ts:        // For now, we'll just simulate a delay
src/hooks/useDriverFormData.ts:        setDriver(null); // In a real app, we would set actual driver data
src/hooks/useOfflineQuery.ts:  cacheTtl?: number; // Time to live in milliseconds
src/hooks/useOfflineQuery.ts:  cacheTtl: 24 * 60 * 60 * 1000, // 24 hours
src/hooks/useOfflineQuery.ts:/**
src/hooks/useOfflineQuery.ts:  // Parse query constraints to create a cache key
src/hooks/useOfflineQuery.ts:      // Extract meaningful parts from the constraint for caching
src/hooks/useOfflineQuery.ts:      // Simple parsing of constraint type and value
src/hooks/useOfflineQuery.ts:        // Try to get data from cache first if we're offline or offline mode is enabled
src/hooks/useOfflineQuery.ts:            // If we're offline, return here
src/hooks/useOfflineQuery.ts:        // If we're online or no cached data was found, fetch from Firestore
src/hooks/useOfflineQuery.ts:            // Cache the data for offline use if offline mode is enabled
src/hooks/usedriverdetail.tsx:// src/hooks/usedriverdetail.tsx
src/hooks/usedriverdetail.tsx:/** -----------------------------
src/hooks/usedriverdetail.tsx:/** -----------------------------
src/hooks/usedriverdetail.tsx:  // Firestore Timestamp
src/hooks/usedriverdetail.tsx:      /* noop */
src/hooks/usedriverdetail.tsx:    // Try ISO
src/hooks/usedriverdetail.tsx:    // Try DD/MM/YYYY
src/hooks/usedriverdetail.tsx:/** -----------------------------
src/hooks/usedriverdetail.tsx:  // used to trigger re-subscribe/refresh
src/hooks/usedriverdetail.tsx:      // Resolve driver by driverId or idNo
src/hooks/usedriverdetail.tsx:      // Fetch authorizations for idNo
src/hooks/usedriverdetail.tsx:      // one-time fetch mode
src/hooks/usedriverdetail.tsx:        // Resolve driver doc by idNo if needed
src/hooks/usedriverdetail.tsx:        // Listen to driver doc
src/hooks/usedriverdetail.tsx:        // Listen to authorizations by idNo
src/hooks/usedriverdetail.tsx:          /* ignore */
src/context/WialonProvider.tsx:// Helper functions to transform service types to expected types
src/context/WialonProvider.tsx:    id: 0, // Service doesn't provide user ID, using default
src/context/WialonProvider.tsx:  // Copy any additional properties, but avoid overwriting id
src/context/WialonProvider.tsx:// ---- Context types (unchanged API) ----
src/context/WialonProvider.tsx:  // Prefer persisted token, then env
src/context/WialonProvider.tsx:    getEnvVar("VITE_WIALON_API_URL", "https://hst-api.wialon.com") ||
src/context/WialonProvider.tsx:    "https://hst-api.wialon.com";
src/context/WialonProvider.tsx:  // -------- Auto-initialize once --------
src/context/WialonProvider.tsx:        // Use correct login method
src/context/WialonProvider.tsx:        // Fetch units after successful login
src/context/WialonProvider.tsx:             • See: https://sdk.wialon.com/wiki/en/sidebar/remoteapi/errors`
src/context/WialonProvider.tsx:  // -------- Actions --------
src/context/WialonProvider.tsx:    // Triggers useEffect re-initialization via [token] dep
src/context/WialonProvider.tsx:  // Unified login re-init (re-runs effect by updating token)
src/context/WialonProvider.tsx:    // Optionally clear token in storage (comment if you want persistent token for user convenience)
src/context/WialonProvider.tsx:    // localStorage.removeItem("wialonToken");
src/context/WialonProvider.tsx:      // Check SDK
src/context/WialonProvider.tsx:      // Check session
src/context/WialonProvider.tsx:      // Check units access
src/context/WorkshopContext.tsx:// Define types for Workshop items
src/context/WorkshopContext.tsx:  lastRestocked: string; // required string
src/context/WorkshopContext.tsx:// Demand parts
src/context/WorkshopContext.tsx:  lastRestocked?: string; // allow undefined
src/context/WorkshopContext.tsx:// Context interface
src/context/WorkshopContext.tsx:  // Vendors
src/context/WorkshopContext.tsx:  // Stock Inventory
src/context/WorkshopContext.tsx:  // Purchase Orders
src/context/WorkshopContext.tsx:  // Demand Parts
src/context/WorkshopContext.tsx:  // Job Cards
src/context/WorkshopContext.tsx:  // Work Orders
src/context/WorkshopContext.tsx:  // Inspections
src/context/WorkshopContext.tsx:  // Loading states
src/context/WorkshopContext.tsx:  // Error states
src/context/WorkshopContext.tsx:  // Refresh functions for real-time data
src/context/WorkshopContext.tsx:  // Job Cards
src/context/WorkshopContext.tsx:  // Work Orders
src/context/WorkshopContext.tsx:  // Inspections
src/context/WorkshopContext.tsx:  // Refresh functions
src/context/WorkshopContext.tsx:  // const [user] = useAuthState(getAuth());
src/context/WorkshopContext.tsx:  const user = null; // existing behavior unchanged
src/context/WorkshopContext.tsx:  // Vendors
src/context/WorkshopContext.tsx:  // Stock Items
src/context/WorkshopContext.tsx:  // Purchase Orders
src/context/WorkshopContext.tsx:  // Demand Parts
src/context/WorkshopContext.tsx:  // Job Cards
src/context/WorkshopContext.tsx:  // Work Orders
src/context/WorkshopContext.tsx:  // Inspections
src/context/WorkshopContext.tsx:  // Vendor functions
src/context/WorkshopContext.tsx:  // Stock functions
src/context/WorkshopContext.tsx:  // Purchase orders
src/context/WorkshopContext.tsx:  // Demand parts
src/context/WorkshopContext.tsx:  // Job Cards functions
src/context/WorkshopContext.tsx:      // Create a new job card from the inspection
src/context/WorkshopContext.tsx:        priority: "medium", // Default priority
src/context/WorkshopContext.tsx:        status: "initiated", // Initial status
src/context/WorkshopContext.tsx:  tasks: [], // No findings property in Inspection type
src/context/WorkshopContext.tsx:  // Work Orders functions
src/context/WorkshopContext.tsx:  // Inspection functions
src/context/WorkshopContext.tsx:  // Refresh functions to force fetch new data
src/context/WorkshopContext.tsx:      // In a real implementation with Firestore, we might fetch data directly
src/context/WorkshopContext.tsx:      // Since we're using onSnapshot which automatically updates the state,
src/context/WorkshopContext.tsx:      // we'll use mock data for demonstration purposes
src/context/WorkshopContext.tsx:      // This simulates refreshed job cards data
src/context/WorkshopContext.tsx:      // Mock data for demonstration
src/context/WorkshopContext.tsx:      // Mock data for demonstration
src/context/WorkshopContext.tsx:  // Bulk import stock items from CSV
src/context/WorkshopContext.tsx:          lastRestocked: record.lastRestocked || new Date().toISOString().slice(0, 10), // ensure string
src/context/WorkshopContext.tsx:  // Bulk import vendors from CSV
src/context/WorkshopContext.tsx:    // Job Cards
src/context/WorkshopContext.tsx:    // Work Orders
src/context/WorkshopContext.tsx:    // Inspections
src/context/WorkshopContext.tsx:    // Refresh functions
src/context/SyncContext.tsx:  // Initialize syncService
src/context/SyncContext.tsx:  // Create a stable reference that doesn't mutate the original context
src/context/SyncContext.tsx:  // The connection status should be managed elsewhere to avoid instability
src/context/SyncContext.tsx:// Custom hook for subscribing to a specific trip
src/context/SyncContext.tsx:      // Return cleanup function to unsubscribe when component unmounts
src/context/SyncContext.tsx:      // or when tripId changes
src/context/SyncContext.tsx:        // syncService handles unsubscribing internally when a new subscription
src/context/SyncContext.tsx:        // is made for the same tripId
src/context/SyncContext.tsx:    // Return a no-op cleanup function when tripId is null
src/context/SyncContext.tsx:  }, [tripId]); // Remove syncContext from dependencies as it should be stable
src/context/TyreContext.tsx:  TyreInspection, // Import TyrePosition
src/context/TyreContext.tsx:  TyreInspectionRecord, // Ensure TyreRepair is imported
src/context/TyreContext.tsx:  TyrePosition, // Import the new TyreInspectionRecord
src/context/TyreContext.tsx:} from "../types/tyre"; // All types should now come from here
src/context/TyreContext.tsx:  getTyreById, // Renamed to avoid conflict
src/context/TyreContext.tsx:  getTyres, // Renamed to avoid conflict
src/context/TyreContext.tsx:  // addInspection now expects a TyreInspectionRecord to provide full context to Firebase
src/context/TyreContext.tsx:  // getInspections now returns the simpler TyreInspection type
src/context/TyreContext.tsx:    condition?: TyreInspection["condition"]; // This refers to the condition string from TyreInspection
src/context/TyreContext.tsx:  // UI filtering state
src/context/TyreContext.tsx:  // Add UI filtering state
src/context/TyreContext.tsx:    // Listen to real-time updates from Firebase
src/context/TyreContext.tsx:      // Map and normalize the incoming tyre data to ensure type consistency
src/context/TyreContext.tsx:        // Ensure installation position is correctly typed as TyrePosition
src/context/TyreContext.tsx:          // Map rotations to ensure 'id' is present and positions are TyrePosition
src/context/TyreContext.tsx:              // Cast 'r' to 'any' for initial access
src/context/TyreContext.tsx:              id: r.id || `rotation-${tyre.id}-${i}`, // Provide a fallback ID
src/context/TyreContext.tsx:          // Map repairs to ensure 'id' is present
src/context/TyreContext.tsx:              // Cast 'r' to 'any' for initial access
src/context/TyreContext.tsx:              id: r.id || `repair-${tyre.id}-${i}`, // Provide a fallback ID
src/context/TyreContext.tsx:          // Map inspections to ensure 'id' is present
src/context/TyreContext.tsx:              // Cast 'i' to 'any' for initial access
src/context/TyreContext.tsx:              id: i.id || `inspection-${tyre.id}-${idx}`, // Provide a fallback ID
src/context/TyreContext.tsx:        // Ensure location is correctly typed as TyreStoreLocation
src/context/TyreContext.tsx:      // Ensure the tyre object passed to Firebase matches the expected structure
src/context/TyreContext.tsx:      // Normalize the retrieved tyre data
src/context/TyreContext.tsx:  // handleAddInspection now takes a TyreInspectionRecord
src/context/TyreContext.tsx:    inspectionRecord: TyreInspectionRecord // Expect TyreInspectionRecord here
src/context/TyreContext.tsx:      // Pass the full TyreInspectionRecord to the Firebase function.
src/context/TyreContext.tsx:      // The Firebase function 'addTyreInspection' expects two arguments: tyreId and inspectionRecord.
src/context/TyreContext.tsx:      // We extract tyreId from the inspectionRecord itself.
src/context/TyreContext.tsx:      // Firebase function returns TyreInspectionRecord[], map it to TyreInspection[]
src/context/TyreContext.tsx:        // Cast 'r' to 'any' for initial access
src/context/TyreContext.tsx:        id: r.id || `inspection-${tyreId}-${i}`, // Ensure ID is present
src/context/TyreContext.tsx:        inspector: r.inspectorName, // Map inspectorName from record to inspector in TyreInspection
src/context/TyreContext.tsx:      // Normalize the retrieved tyre data
src/context/TyreContext.tsx:      // Normalize the retrieved tyre data
src/context/TyreContext.tsx:  // Transform tyres into UI records when tyres change
src/context/TyreContext.tsx:    // Add UI filtering state
src/context/DriverBehaviorContext.tsx:// Re-export the DriverBehaviorEvent interface from the service
src/context/DriverBehaviorContext.tsx:// Create context type
src/context/DriverBehaviorContext.tsx:// Create context with default values
src/context/DriverBehaviorContext.tsx:// Provider props interface
src/context/DriverBehaviorContext.tsx:// Driver Behavior Provider component
src/context/DriverBehaviorContext.tsx:  // Use our custom hook that connects to the driverBehaviorService
src/context/DriverBehaviorContext.tsx:  // Filter web book events
src/context/DriverBehaviorContext.tsx:  // Function to refresh data
src/context/DriverBehaviorContext.tsx:  // If the selected event is updated in the events list, update the selectedEvent
src/context/DriverBehaviorContext.tsx:  // Value to provide to context consumers
src/context/DriverBehaviorContext.tsx:// Custom hook for using the driver behavior context
src/context/DriverBehaviorContext.tsx:// Backward-compatible alias: pages expecting useDriverBehavior can import this directly.
src/context/TyreReferenceDataContext.tsx:// Define interface types for our reference data
src/context/TyreReferenceDataContext.tsx:// Context interface
src/context/TyreReferenceDataContext.tsx:  // Data states
src/context/TyreReferenceDataContext.tsx:  // CRUD operations
src/context/TyreReferenceDataContext.tsx:  // Brands
src/context/TyreReferenceDataContext.tsx:  // Sizes
src/context/TyreReferenceDataContext.tsx:  // Patterns
src/context/TyreReferenceDataContext.tsx:  // Vehicle Positions
src/context/TyreReferenceDataContext.tsx:  // Utility functions
src/context/TyreReferenceDataContext.tsx:// Create the context
src/context/TyreReferenceDataContext.tsx:// Provider component
src/context/TyreReferenceDataContext.tsx:  // State for storing reference data
src/context/TyreReferenceDataContext.tsx:  // Loading states
src/context/TyreReferenceDataContext.tsx:  // Error state
src/context/TyreReferenceDataContext.tsx:  // Reference to Firestore
src/context/TyreReferenceDataContext.tsx:  // Fetch all reference data on mount
src/context/TyreReferenceDataContext.tsx:  // Fetch all reference data
src/context/TyreReferenceDataContext.tsx:  // Fetch brands
src/context/TyreReferenceDataContext.tsx:  // Fetch sizes
src/context/TyreReferenceDataContext.tsx:  // Fetch patterns
src/context/TyreReferenceDataContext.tsx:        // Sort by brand first, then by pattern
src/context/TyreReferenceDataContext.tsx:  // Fetch vehicle positions
src/context/TyreReferenceDataContext.tsx:  // Refresh all data
src/context/TyreReferenceDataContext.tsx:  // CRUD operations for brands
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Also consider deleting related patterns (or update to show that this brand is no longer available)
src/context/TyreReferenceDataContext.tsx:  // CRUD operations for sizes
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:  // CRUD operations for patterns
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:  // CRUD operations for vehicle positions
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:      // Update local state
src/context/TyreReferenceDataContext.tsx:  // Utility functions
src/context/TyreReferenceDataContext.tsx:  // Context value
src/context/TyreReferenceDataContext.tsx:    // Data
src/context/TyreReferenceDataContext.tsx:    // CRUD operations
src/context/TyreReferenceDataContext.tsx:    // Brands
src/context/TyreReferenceDataContext.tsx:    // Sizes
src/context/TyreReferenceDataContext.tsx:    // Patterns
src/context/TyreReferenceDataContext.tsx:    // Vehicle Positions
src/context/TyreReferenceDataContext.tsx:    // Utility functions
src/context/TyreReferenceDataContext.tsx:// Custom hook to use the context
src/context/WialonContext.tsx:// src/context/WialonContext.tsx
src/context/WialonContext.tsx:  // Auto-select the first unit when units are loaded and none is selected
src/context/WialonContext.tsx:      if (first) setSelectedUnit(first); // avoids passing `undefined`
src/context/AppContext.tsx:// Helper function to adapt our Trip type to the one expected by firebase.ts
src/context/AppContext.tsx:  // Map status values between the two types
src/context/AppContext.tsx:  invoiced: "active", // Map 'invoiced' to 'active' since it doesn't exist in TripStatus
src/context/AppContext.tsx:  paid: "active", // Map 'paid' to 'active' since it doesn't exist in TripStatus
src/context/AppContext.tsx:  // Handle payment status mapping
src/context/AppContext.tsx:    partial: "unpaid" // Map 'partial' to 'unpaid' since it doesn't exist in TripFromTripTs
src/context/AppContext.tsx:  // Helper to adapt cost entry
src/context/AppContext.tsx:      // Ensure description property exists
src/context/AppContext.tsx:      // Ensure category is a valid string for TripFromTripTs.CostEntry
src/context/AppContext.tsx:  // Get any updatedCosts that might be in the object
src/context/AppContext.tsx:  // Create a safe copy of the trip object without followUpHistory
src/context/AppContext.tsx:  // Process followUpHistory if it exists
src/context/AppContext.tsx:  // Map our Trip type to firebase's Trip type
src/context/AppContext.tsx:    // Map required properties
src/context/AppContext.tsx:    // Map status using statusMap
src/context/AppContext.tsx:    // Map payment status
src/context/AppContext.tsx:    // Ensure costs have description property
src/context/AppContext.tsx:    // Add back processed followUpHistory if it exists
src/context/AppContext.tsx:// Wrapper function for updateTripInFirebase to handle type conversion
src/context/AppContext.tsx:  // Connection status
src/context/AppContext.tsx:  // Google Maps properties
src/context/AppContext.tsx:  // Constants
src/context/AppContext.tsx:  // Trip Templates
src/context/AppContext.tsx:  // Load Plans
src/context/AppContext.tsx:  // Route Planning & Optimization
src/context/AppContext.tsx:  // Trip Progress & Delivery
src/context/AppContext.tsx:  // Trip Financials
src/context/AppContext.tsx:  // PDF Generation
src/context/AppContext.tsx:  // Fleet Utilization
src/context/AppContext.tsx:  // Client Management
src/context/AppContext.tsx:  // Add isLoading property to fix TypeScript error in ActiveTrips component
src/context/AppContext.tsx:  // Inspection-related methods and properties
src/context/AppContext.tsx:  // Job Card-related methods and properties
src/context/AppContext.tsx:  // Google Maps state
src/context/AppContext.tsx:  // Add refreshTrips method to manually refresh trip data from Firestore
src/context/AppContext.tsx:      // Force resubscribe to trips collection to get fresh data
src/context/AppContext.tsx:      // Wait a moment for data to load
src/context/AppContext.tsx:  // Add refreshWorkshopInventory method to manually refresh workshop inventory data from Firestore
src/context/AppContext.tsx:      // Wait a moment for data to load
src/context/AppContext.tsx:  // Add refreshInspections method to manually refresh inspection data from Firestore
src/context/AppContext.tsx:      // Simulate Firestore fetch
src/context/AppContext.tsx:      const fetchedInspections: VehicleInspection[] = []; // Replace with actual Firestore fetch logic
src/context/AppContext.tsx:  // Google Maps initialization function
src/context/AppContext.tsx:      // In development mode, continue even if Maps fails to load
src/context/AppContext.tsx:        // Check for both legacy PlacesService and new Place API
src/context/AppContext.tsx:        // In development, treat as non-fatal
src/context/AppContext.tsx:          setIsGoogleMapsLoaded(true); // Still mark as loaded to prevent further attempts
src/context/AppContext.tsx:          // In production, propagate the error
src/context/AppContext.tsx:      // Don't throw in development - just log the error
src/context/AppContext.tsx:  // Load Google Maps on initial app load
src/context/AppContext.tsx:  // Monitor online/offline status and Firestore connection
src/context/AppContext.tsx:        // Attempt to enable Firestore network
src/context/AppContext.tsx:        // Disable Firestore network to prevent unnecessary retries
src/context/AppContext.tsx:    // Handle Firestore connection status changes
src/context/AppContext.tsx:    // Add connection listener
src/context/AppContext.tsx:    // Set initial status
src/context/AppContext.tsx:    // Add browser online/offline event listeners
src/context/AppContext.tsx:    // Clean up
src/context/AppContext.tsx:  // Stabilize the callbacks object to prevent infinite re-renders
src/context/AppContext.tsx:      setJobCards, // Register job cards state
src/context/AppContext.tsx:    // Set up all data subscriptions through the SyncService
src/context/AppContext.tsx:    // Register all data callbacks with SyncService
src/context/AppContext.tsx:    // Subscribe to all collections
src/context/AppContext.tsx:    // Methods now implemented in syncService
src/context/AppContext.tsx:    syncService.subscribeToAllWorkshopInventory(); // Add subscription to workshop inventory
src/context/AppContext.tsx:    syncService.subscribeToAllJobCards(); // Subscribe to job cards
src/context/AppContext.tsx:      // Let SyncService handle unsubscribing from all listeners
src/context/AppContext.tsx:  // Add workshop inventory item
src/context/AppContext.tsx:      // 1. Add to Firestore
src/context/AppContext.tsx:      // 2. Create item with the Firestore-generated ID
src/context/AppContext.tsx:      // 3. Update local state
src/context/AppContext.tsx:      // 4. Log the action for audit/compliance
src/context/AppContext.tsx:  // Update workshop inventory item
src/context/AppContext.tsx:      // Update item in Firestore using syncService
src/context/AppContext.tsx:      // Optimistically update local state
src/context/AppContext.tsx:  // Delete workshop inventory item
src/context/AppContext.tsx:      // Delete from Firestore
src/context/AppContext.tsx:      // Update local state
src/context/AppContext.tsx:      // Audit log the action
src/context/AppContext.tsx:  // Client Management Functions
src/context/AppContext.tsx:      // In a real implementation, this would add to Firestore
src/context/AppContext.tsx:      // Log client creation for audit trail
src/context/AppContext.tsx:        user: "system", // Replace with actual user
src/context/AppContext.tsx:      // Get the original client for audit logging
src/context/AppContext.tsx:      // In a real implementation, this would update Firestore
src/context/AppContext.tsx:      // Log client update for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:        // Check if client is referenced in trips
src/context/AppContext.tsx:        // Log client deletion for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:      // In a real implementation, this would delete from Firestore
src/context/AppContext.tsx:      // Check if relationship already exists
src/context/AppContext.tsx:      // Create the new relationship
src/context/AppContext.tsx:      // Update the client with the new relationship
src/context/AppContext.tsx:      // Update the client in state
src/context/AppContext.tsx:      // Filter out the relationship
src/context/AppContext.tsx:      // Update the client in state
src/context/AppContext.tsx:      // Adapt our Trip type to the one expected by firebase.ts
src/context/AppContext.tsx:      // Return the trip ID
src/context/AppContext.tsx:      // Get the original trip for audit logging
src/context/AppContext.tsx:      // Log trip update for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:      // Optimistically remove from local state
src/context/AppContext.tsx:      // Set loading state
src/context/AppContext.tsx:      // Delete from Firestore
src/context/AppContext.tsx:      // Placeholder for deleteMissedLoadFromFirebase
src/context/AppContext.tsx:      // Optimistically update local state
src/context/AppContext.tsx:      // Clear loading state
src/context/AppContext.tsx:  // This is a placeholder for future audit logging implementation
src/context/AppContext.tsx:  // We're keeping this as a reference for when we implement proper audit logging
src/context/AppContext.tsx:  /*
src/context/AppContext.tsx:      // Use the proper audit log utility
src/context/AppContext.tsx:      // Clear loading state
src/context/AppContext.tsx:        completedBy: "Current User", // In a real app, use the logged-in user
src/context/AppContext.tsx:  // Placeholder implementations for other functions
src/context/AppContext.tsx:    // If linked to a trip, create a cost entry
src/context/AppContext.tsx:        // Add cost entry to trip
src/context/AppContext.tsx:        // Use the adapter wrapper function
src/context/AppContext.tsx:    // Convert the date string to a Timestamp for Firebase
src/context/AppContext.tsx:    // Filter events for this driver
src/context/AppContext.tsx:    // Calculate behavior score (100 is perfect, deduct points for events based on severity)
src/context/AppContext.tsx:    // Don't go below zero
src/context/AppContext.tsx:    // Sort events by date, most recent first
src/context/AppContext.tsx:      recentEvents: sortedEvents.slice(0, 5), // Return 5 most recent events
src/context/AppContext.tsx:    // Get unique driver names
src/context/AppContext.tsx:    // For each driver, calculate their performance
src/context/AppContext.tsx:      // Filter events for this driver
src/context/AppContext.tsx:      // Calculate behavior score (100 is perfect, deduct points for events based on severity)
src/context/AppContext.tsx:      // Don't go below zero
src/context/AppContext.tsx:      // Sort events by date, most recent first
src/context/AppContext.tsx:        recentEvents: sortedEvents.slice(0, 3), // Return 3 most recent events
src/context/AppContext.tsx:  // Trip Template functions
src/context/AppContext.tsx:      // In a real implementation, this would save to Firestore
src/context/AppContext.tsx:      // In a real implementation, this would update Firestore
src/context/AppContext.tsx:      // In a real implementation, this would delete from Firestore
src/context/AppContext.tsx:  // Load Plan functions
src/context/AppContext.tsx:      // In a real implementation, this would save to Firestore
src/context/AppContext.tsx:      // Update the associated trip with the load plan ID
src/context/AppContext.tsx:      // In a real implementation, this would update Firestore
src/context/AppContext.tsx:      // Get the load plan to find its associated trip
src/context/AppContext.tsx:        // Update the associated trip to remove the load plan ID reference
src/context/AppContext.tsx:      // In a real implementation, this would delete from Firestore
src/context/AppContext.tsx:  // Route Planning & Optimization functions
src/context/AppContext.tsx:      // In a real implementation, this would call Google Maps API or similar
src/context/AppContext.tsx:      // For now, we'll simulate route planning with dummy data
src/context/AppContext.tsx:        { lat: 40.7128, lng: -74.006 }, // Example: NYC coordinates
src/context/AppContext.tsx:        { lat: 41.8781, lng: -87.6298 }, // Example: Chicago coordinates
src/context/AppContext.tsx:        estimatedDistance: 1200, // km
src/context/AppContext.tsx:        estimatedDuration: 720, // minutes
src/context/AppContext.tsx:        distanceKm: plannedRoute.estimatedDistance, // Update trip distance based on route
src/context/AppContext.tsx:      // In a real implementation, this would call a route optimization API
src/context/AppContext.tsx:      // For now, we'll simulate optimization with improved metrics
src/context/AppContext.tsx:      // Copy planned route and add optimization improvements
src/context/AppContext.tsx:        // Simulate 10% improvement in distance and duration
src/context/AppContext.tsx:        // Add optimization metrics
src/context/AppContext.tsx:        fuelSavings: Math.round((trip.plannedRoute.estimatedDistance ?? 0) * 0.1 * 0.3), // Assume 0.3L/km
src/context/AppContext.tsx:        timeSavings: Math.round((trip.plannedRoute.estimatedDuration ?? 0) * 0.1), // 10% time savings
src/context/AppContext.tsx:        distanceKm: optimizedRoute.estimatedDistance, // Update trip distance to optimized value
src/context/AppContext.tsx:  // Trip Progress & Delivery functions
src/context/AppContext.tsx:        // If the status is 'completed', also update the main trip status
src/context/AppContext.tsx:      // In a real implementation, we would upload the attachments to storage
src/context/AppContext.tsx:      // and get back URLs to store in the trip record
src/context/AppContext.tsx:            fileUrl: URL.createObjectURL(file), // This is temporary and not suitable for production
src/context/AppContext.tsx:        // If confirmed, mark the trip as completed
src/context/AppContext.tsx:  // Trip Financials functions
src/context/AppContext.tsx:      // Calculate costs
src/context/AppContext.tsx:      // Calculate fuel costs specifically - assume fuel is 30% of total costs for simplified analysis
src/context/AppContext.tsx:      // Calculate border costs - filter costs with 'Border Costs' category
src/context/AppContext.tsx:      // Calculate driver allowance - filter costs with 'Trip Allowances' category
src/context/AppContext.tsx:      // Calculate toll fees - filter costs with 'Tolls' category
src/context/AppContext.tsx:      // Remaining costs are classified as maintenance and miscellaneous
src/context/AppContext.tsx:      const maintenanceCosts = totalCosts * 0.2; // Assume 20% of total costs
src/context/AppContext.tsx:      // Financial calculations
src/context/AppContext.tsx:      // Assume net profit is 90% of gross (after taxes, overhead, etc.)
src/context/AppContext.tsx:      // Calculate per km metrics
src/context/AppContext.tsx:      const distanceKm = trip.distanceKm || 1; // Avoid division by zero
src/context/AppContext.tsx:      // Create the financial analysis object
src/context/AppContext.tsx:          additionalRevenue: 0, // Placeholder for future implementation
src/context/AppContext.tsx:          industryAvgCostPerKm: 2.5, // Placeholder values for demonstration
src/context/AppContext.tsx:      // Store the analysis in state
src/context/AppContext.tsx:  // PDF Generation functions
src/context/AppContext.tsx:      // In a real implementation, this would generate a PDF using jspdf
src/context/AppContext.tsx:      // For now, we'll simulate PDF generation with a delay
src/context/AppContext.tsx:      // Simulate a PDF URL
src/context/AppContext.tsx:      const pdfUrl = `https://example.com/quote_${tripId}.pdf`;
src/context/AppContext.tsx:      // Update the trip with the PDF URL
src/context/AppContext.tsx:      // In a real implementation, this would generate a PDF using jspdf
src/context/AppContext.tsx:      // For now, we'll simulate PDF generation with a delay
src/context/AppContext.tsx:      // Simulate a PDF URL
src/context/AppContext.tsx:      const pdfUrl = `https://example.com/load_${tripId}.pdf`;
src/context/AppContext.tsx:      // Update the trip with the PDF URL
src/context/AppContext.tsx:  // Fleet Utilization functions
src/context/AppContext.tsx:      // Calculate metrics
src/context/AppContext.tsx:      // 1. Calculate capacity utilization
src/context/AppContext.tsx:      // Assume 70% capacity utilization for demo purposes
src/context/AppContext.tsx:      // In a real implementation, this would be calculated based on the load plan
src/context/AppContext.tsx:      // 2. Calculate fuel efficiency
src/context/AppContext.tsx:      // Get diesel records for this trip
src/context/AppContext.tsx:      const fuelEfficiency = trip.distanceKm && totalLitres ? trip.distanceKm / totalLitres : 3.0; // Default to 3.0 km/L
src/context/AppContext.tsx:      // 3. Calculate revenue and cost per km
src/context/AppContext.tsx:      // 4. Calculate idle time (stub - in real implementation would be based on GPS data)
src/context/AppContext.tsx:      const idleTime = 2.5; // hours
src/context/AppContext.tsx:      // Update the trip with the utilization metrics
src/context/AppContext.tsx:    // Filter trips by fleet number and date range
src/context/AppContext.tsx:    // Calculate average metrics
src/context/AppContext.tsx:  // Add inspection-related methods
src/context/AppContext.tsx:  // Job Card methods
src/context/AppContext.tsx:      // Create a new batch write for all records
src/context/AppContext.tsx:      // Commit the batch
src/context/AppContext.tsx:      // Update local storage
src/context/AppContext.tsx:    // Connection status
src/context/AppContext.tsx:    // Google Maps
src/context/AppContext.tsx:        // Update local state
src/context/AppContext.tsx:        // Add audit log entry
src/context/AppContext.tsx:          user: "system", // In a real app, use the actual logged-in user
src/context/AppContext.tsx:        // Wait for a moment to allow the cloud function to process and update Firestore
src/context/AppContext.tsx:        // This is a temporary solution until we have proper webhook response handling
src/context/AppContext.tsx:        // Since we're using real-time listeners, the UI will update automatically
src/context/AppContext.tsx:        // when the cloud function adds the data to Firestore
src/context/AppContext.tsx:        return { imported: 1, skipped: 0 }; // We don't know the actual counts yet
src/context/AppContext.tsx:        // Get the original record to track changes
src/context/AppContext.tsx:        // Update the record in Firestore
src/context/AppContext.tsx:        // If this record is linked to a trip, update the corresponding cost entry
src/context/AppContext.tsx:            // Find the cost entry that corresponds to this diesel record
src/context/AppContext.tsx:              // Update the existing cost entry
src/context/AppContext.tsx:                  id: existingCost.id || uuidv4(), // Ensure id is always present
src/context/AppContext.tsx:                  tripId: existingCost.tripId || trip.id, // Ensure tripId is present
src/context/AppContext.tsx:                  // Removed updatedAt property as it doesn't exist in CostEntry type
src/context/AppContext.tsx:              // Use helper to map costs with description property before updating
src/context/AppContext.tsx:        // Log diesel update for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:        // Get the record before deletion for audit and to check if it's linked to a trip
src/context/AppContext.tsx:        // If this record is linked to a trip, remove the corresponding cost entry
src/context/AppContext.tsx:            // Find and remove the cost entry that corresponds to this diesel record
src/context/AppContext.tsx:              // Only update if we actually removed a cost
src/context/AppContext.tsx:        // Delete the record from Firestore
src/context/AppContext.tsx:        // Log diesel deletion for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:        // Optimistically remove from local state
src/context/AppContext.tsx:        // Process each record sequentially to ensure all validation logic runs
src/context/AppContext.tsx:            // Check for duplicate records (same fleet, date, and km reading)
src/context/AppContext.tsx:                Math.abs(existing.litresFilled - record.litresFilled) < 0.1 // Small tolerance for rounding errors
src/context/AppContext.tsx:            // Add the record
src/context/AppContext.tsx:        // Add import summary to audit log
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:          action: "create", // Changed from 'import' to satisfy AuditLog type
src/context/AppContext.tsx:        // Get the current record
src/context/AppContext.tsx:        // If probe data is provided and this is a fleet with probe
src/context/AppContext.tsx:        // Add probe verification data if applicable
src/context/AppContext.tsx:        // Update the record
src/context/AppContext.tsx:        // Log debrief for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:          action: "update", // Changed from 'debrief' to satisfy AuditLog type
src/context/AppContext.tsx:        // Get the diesel record and trip
src/context/AppContext.tsx:        // Check if this diesel is already linked to a different trip
src/context/AppContext.tsx:          // Need to remove it from the old trip first - inline the removal logic
src/context/AppContext.tsx:            // Find and remove the cost entry that corresponds to this diesel record
src/context/AppContext.tsx:            // Only update if we actually removed a cost
src/context/AppContext.tsx:        // Create a new cost entry for this diesel record
src/context/AppContext.tsx:        // Update the trip with the new cost entry
src/context/AppContext.tsx:        // Update the diesel record with the trip link
src/context/AppContext.tsx:        // Save both updates
src/context/AppContext.tsx:        // Log allocation for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:          action: "update", // Changed from 'allocate' to satisfy AuditLog type
src/context/AppContext.tsx:        // Get the diesel record
src/context/AppContext.tsx:        // If not linked to any trip, nothing to do
src/context/AppContext.tsx:        // Get the trip
src/context/AppContext.tsx:          // Trip doesn't exist anymore, just update the diesel record
src/context/AppContext.tsx:        // Find and remove the cost entry that corresponds to this diesel record
src/context/AppContext.tsx:        // Update the trip without the cost entry
src/context/AppContext.tsx:          // Only update if we actually removed a cost
src/context/AppContext.tsx:        // Update the diesel record to remove the trip link
src/context/AppContext.tsx:        // Log removal for audit trail
src/context/AppContext.tsx:          user: "system", // Replace with actual user
src/context/AppContext.tsx:          action: "delete", // Changed from 'unlink' to satisfy AuditLog type
src/context/AppContext.tsx:        // Simulate Firestore fetch
src/context/AppContext.tsx:        const fetchedJobCards: JobCardType[] = []; // Replace with actual Firestore fetch logic
src/context/AppContext.tsx:    // Client Management
src/context/AppContext.tsx:    // Trip Templates
src/context/AppContext.tsx:    // Load Plans
src/context/AppContext.tsx:    // Route Planning & Optimization
src/context/AppContext.tsx:    // Trip Progress & Delivery
src/context/AppContext.tsx:    // Trip Financials
src/context/AppContext.tsx:    // PDF Generation
src/context/AppContext.tsx:    // Fleet Utilization
src/context/AppContext.tsx:  // Sum the amount of all cost entries that are not flagged as system-generated and not flagged for investigation
src/context/InventoryContext.tsx:/**
src/context/InventoryContext.tsx:  // Inventory Items
src/context/InventoryContext.tsx:  // Purchase Orders
src/context/InventoryContext.tsx:  // Vendors
src/context/InventoryContext.tsx:  // Stock Movements
src/context/InventoryContext.tsx:  // Sage Integration
src/context/InventoryContext.tsx:  // Utility helpers
src/context/InventoryContext.tsx:  // State for inventory items
src/context/InventoryContext.tsx:  // State for purchase orders
src/context/InventoryContext.tsx:  // State for vendors
src/context/InventoryContext.tsx:  // State for Sage sync
src/context/InventoryContext.tsx:  // Set up Firestore listeners for inventory items
src/context/InventoryContext.tsx:            // Convert Firestore timestamps to ISO strings
src/context/InventoryContext.tsx:  // Set up Firestore listeners for purchase orders
src/context/InventoryContext.tsx:            // Convert Firestore timestamps to ISO strings
src/context/InventoryContext.tsx:  // Set up Firestore listeners for vendors
src/context/InventoryContext.tsx:            // Convert Firestore timestamps to ISO strings
src/context/InventoryContext.tsx:  // Add inventory item
src/context/InventoryContext.tsx:  // Update inventory item
src/context/InventoryContext.tsx:  // Delete inventory item
src/context/InventoryContext.tsx:  // Add purchase order
src/context/InventoryContext.tsx:  // Update purchase order
src/context/InventoryContext.tsx:  // Delete purchase order
src/context/InventoryContext.tsx:  // Add vendor
src/context/InventoryContext.tsx:  // Update vendor
src/context/InventoryContext.tsx:  // Delete vendor
src/context/InventoryContext.tsx:  // Add stock movement record
src/context/InventoryContext.tsx:      // Update the inventory item quantity
src/context/InventoryContext.tsx:      // Update quantity based on movement type
src/context/InventoryContext.tsx:  // Helper: derive a URL/slug-safe identifier for a vendor by its name
src/context/InventoryContext.tsx:      // Prefer common name fields; fall back safely
src/context/InventoryContext.tsx:  // Get stock movements for a specific item
src/context/InventoryContext.tsx:  // Sync with Sage
src/context/InventoryContext.tsx:      // Fetch data from Sage
src/context/InventoryContext.tsx:      // Process each vendor
src/context/InventoryContext.tsx:        // Check if vendor exists in Firestore
src/context/InventoryContext.tsx:            // Update existing vendor
src/context/InventoryContext.tsx:            // Fallback: if lookup failed unexpectedly, add instead
src/context/InventoryContext.tsx:          // Add new vendor
src/context/InventoryContext.tsx:      // Process each inventory item
src/context/InventoryContext.tsx:        // Check if item exists in Firestore
src/context/InventoryContext.tsx:            // Update existing item
src/context/InventoryContext.tsx:            // Fallback: add if unexpected undefined
src/context/InventoryContext.tsx:          // Add new item
src/context/InventoryContext.tsx:      // Process each purchase order
src/context/InventoryContext.tsx:        // Check if PO exists in Firestore
src/context/InventoryContext.tsx:            // Update existing PO
src/context/InventoryContext.tsx:            // Fallback: add if unexpected undefined
src/context/InventoryContext.tsx:          // Add new PO
src/context/InventoryContext.tsx:      // Update sync metadata
src/context/InventoryContext.tsx:      // Save sync record to Firestore
src/context/InventoryContext.tsx:      // Save error record to Firestore
src/context/InventoryContext.tsx:  // Context value
src/context/InventoryContext.tsx:    // Inventory Items
src/context/InventoryContext.tsx:    // Purchase Orders
src/context/InventoryContext.tsx:    // Vendors
src/context/InventoryContext.tsx:    // Stock Movements
src/context/InventoryContext.tsx:    // Sage Integration
src/context/TyreStoresContext.tsx:// Context interface
src/context/TyreStoresContext.tsx:  // subscribe to Firestore collection
src/context/TyreStoresContext.tsx:  // add new store doc
src/context/TyreStoresContext.tsx:  // upsert a StockEntry in a store
src/context/TyreStoresContext.tsx:  // remove a StockEntry from a store
src/context/TyreStoresContext.tsx:  // move entry between two stores
src/context/TyreStoresContext.tsx:    // remove from source
src/context/TyreStoresContext.tsx:    // insert/update in target
src/context/FlagsContext.tsx:  // Try to get the app context safely, without throwing errors
src/context/FlagsContext.tsx:  // Optional realtime mode toggled by env flag
src/context/FlagsContext.tsx:    // Extract flagged costs from trips
src/context/FlagsContext.tsx:      // Update the cost entry in the parent context
src/context/FlagsContext.tsx:      // You could add additional flags-specific logic here
src/context/FlagsContext.tsx:      // Find the trip and cost
src/context/FlagsContext.tsx:      // Update the cost with flag information
src/context/FlagsContext.tsx:      // Update in the main context
src/context/TaskHistoryContext.tsx:/**
src/context/TaskHistoryContext.tsx:  // Job Card Status Changes
src/context/TaskHistoryContext.tsx:  // Task Assignment
src/context/TaskHistoryContext.tsx:  // Task Verification
src/context/TaskHistoryContext.tsx:  // General Updates
src/context/TaskHistoryContext.tsx:  // Parts Management
src/context/TaskHistoryContext.tsx:  // Work Progress
src/context/TaskHistoryContext.tsx:  // Quality Assurance
src/context/TaskHistoryContext.tsx:  // Invoice Generation
src/context/TaskHistoryContext.tsx:/**
src/context/TaskHistoryContext.tsx: * // In your main App component:
src/context/TaskHistoryContext.tsx: * // In any component:
src/context/TaskHistoryContext.tsx: * // When updating job status:
src/context/TaskHistoryContext.tsx: * // When assigning a task:
src/context/TaskHistoryContext.tsx: * // When parts are assigned:
src/context/TaskHistoryContext.tsx: * // When work is completed:
src/context/TripContext.tsx:// Define Trip interface
src/context/TripContext.tsx:  [key: string]: any; // Allow other fields
src/context/TripContext.tsx:// Create context type
src/context/TripContext.tsx:// Create context with default values
src/context/TripContext.tsx:// Provider props interface
src/context/TripContext.tsx:// Trip Provider component
src/context/TripContext.tsx:    // Check Firebase app before initializing Firestore
src/context/TripContext.tsx:    // This assertion is now safe due to the check above
src/context/TripContext.tsx:      // Set up real-time listener to trips collection
src/context/TripContext.tsx:              status: data.status || 'unknown', // Ensure status field exists
src/context/TripContext.tsx:      // Clean up subscription on unmount
src/context/TripContext.tsx:      return () => {}; // Return empty function for consistency
src/context/TripContext.tsx:  // Filter trips based on status
src/context/TripContext.tsx:  // Value to provide to context consumers
src/context/TripContext.tsx:// Custom hook for using the trip context
src/context/WialonAuthContext.tsx:  // Check for existing session in localStorage on mount
src/context/WialonAuthContext.tsx:      // Save to localStorage for persistence
src/context/WialonAuthContext.tsx:      // Continue with local logout even if server logout fails
src/context/WialonAppProvider.tsx:// src/context/WialonAppProvider.tsx
src/context/WialonAppProvider.tsx:// --- 1. Context type
src/context/WialonAppProvider.tsx:// --- 2. Context + Default value
src/context/WialonAppProvider.tsx:// --- 3. Provider component with explicit children type
src/context/WialonAppProvider.tsx:  // --- Side effect: auto-login when token is set
src/context/WialonAppProvider.tsx:  // --- Refresh units
src/context/WialonAppProvider.tsx:  // --- Logout
src/context/WialonAppProvider.tsx:  // --- Context value
src/context/FleetAnalyticsContext.tsx:// Define the shape of our analytics state
src/context/FleetAnalyticsContext.tsx:  // For data filtering functionality
src/context/FleetAnalyticsContext.tsx:  // Loading states
src/context/FleetAnalyticsContext.tsx:  // Action methods
src/context/FleetAnalyticsContext.tsx:// Create the context
src/context/FleetAnalyticsContext.tsx:// Create a provider component
src/context/FleetAnalyticsContext.tsx:  // Initial state
src/context/FleetAnalyticsContext.tsx:      start: new Date(2025, 0, 1), // Jan 1, 2025
src/context/FleetAnalyticsContext.tsx:      end: new Date(2025, 6, 31), // July 31, 2025
src/context/FleetAnalyticsContext.tsx:  // Fetch all data on mount and when filters or date range changes
src/context/FleetAnalyticsContext.tsx:  // Update filters and trigger a refresh
src/context/FleetAnalyticsContext.tsx:  // Update date range and trigger a refresh
src/context/FleetAnalyticsContext.tsx:  // Refresh data by fetching from our API
src/context/FleetAnalyticsContext.tsx:  // Value object
src/context/FleetAnalyticsContext.tsx:// Custom hook to use the context
src/main.tsx:// src/main.tsx
src/main.tsx:// Minimal, safe env bootstrap
src/main.tsx:      // Prefer Vite env; fall back to process.env if present
src/main.tsx:      } catch { /* ignore */ }
src/main.tsx:      } catch { /* ignore */ }
src/main.tsx:// Render app
src/vite-env.d.ts:/// <reference types="vite/client" />
src/vite-env.d.ts:  // Vite's built-in env variables
src/vite-env.d.ts:  // Firebase Configuration
src/vite-env.d.ts:  // Firebase Optional Configs
src/vite-env.d.ts:  // Google Maps
src/vite-env.d.ts:  // Wialon Integration
src/vite-env.d.ts:  // Vercel Deployment
src/vite-env.d.ts:  // Project Metadata
src/vite-env.d.ts:  // Dynamic catch-all for other variables
src/api/tripsApi.ts:// Define Trip interface here to avoid circular dependency
src/api/tripsApi.ts:/**
src/api/tripsApi.ts:    // This would be replaced with an actual API call in production
src/api/tripsApi.ts:    // Mock implementation - in a real app, this would call an API endpoint
src/api/tripsApi.ts:/**
src/api/tripsApi.ts:    // This would be replaced with an actual API call in production
src/api/tripsApi.ts:    // Mock implementation - in a real app, this would call an API endpoint
src/api/tripsApi.ts:/**
src/api/tripsApi.ts:    // This would be replaced with an actual API call in production
src/api/tripsApi.ts:    // Mock implementation - in a real app, this would call an API endpoint
src/api/firebase.ts:// Your web app's Firebase configuration
src/api/firebase.ts:  // Using direct values for simplicity, but in production you might want to use env vars
src/api/firebase.ts:  databaseURL: "https://mat1-9e6b3-default-rtdb.firebaseio.com",
src/api/firebase.ts:// Initialize Firebase
src/api/firebase.ts:// Get Firebase services
src/api/firebase.ts:// Import additional Firebase services as needed
src/api/firebase.ts:// Additional Firebase services
src/api/firebase.ts:export const rtdb = getDatabase(app); // Realtime Database
src/api/firebase.ts:// Create analytics only in browser environment
src/api/wialonApi.ts:// wialonApi.ts - Adapter to fetch Wialon GPS unit data
src/api/wialonApi.ts:// Prefer env-provided base URL, fallback to default host
src/api/wialonApi.ts:  'https://hst-api.wialon.com/wialon/ajax.html';
src/api/wialonApi.ts:/**
src/api/wialonApi.ts:/**
src/api/wialonApi.ts:/**
src/api/wialon-service.ts:/**
src/api/wialon-service.ts:// Wialon API configuration
src/api/wialon-service.ts:const WIALON_API_URL = import.meta.env.VITE_WIALON_API_URL || "https://hst-api.wialon.com";
src/api/wialon-service.ts:/**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:        eventsPollingInterval: 10000, // 10 seconds
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:  /**
src/api/wialon-service.ts:// Create a singleton instance
src/api/wialon/session.ts:// Wialon Session API Service
src/api/wialon/session.ts:// This can be used as a server-side utility or converted to an API endpoint
src/api/wialon/session.ts:/**
src/api/wialon/session.ts:  // Check if token is available
src/api/wialon/session.ts:    // Use dynamic import for node-fetch to handle both environments
src/api/wialon/session.ts:    const resp = await fetch('https://hst-api.wialon.com/wialon/ajax.html', {
src/api/wialon/session.ts:    // Check for Wialon API errors
src/api/wialon/session.ts:    // Return session ID (use eid which is typically the session ID in Wialon responses)
src/api/wialon/session.ts:// Express.js style handler if you're using Express
src/api/wialon/session.ts:    // Only allow POST requests
src/api/wialon/session.ts:// Default export for compatibility
src/api/index.ts:// Serverless API Function for Vercel
src/api/index.ts:// Define custom interface for CSV parse errors
src/api/index.ts:// Define types for CSV records
src/api/index.ts:// Define types for inventory items
src/api/index.ts:// Add missing Firebase methods if they don't exist
src/api/index.ts:// Middleware
src/api/index.ts:// Health check endpoint
src/api/index.ts:// Import API routes from src/api if needed
src/api/index.ts:// We can proxy to these handlers for specific endpoints
src/api/index.ts:// CSV Import for Inventory
src/api/index.ts:    // Ensure importInventoryItems function exists
src/api/index.ts:    // Check if there's CSV data in the request
src/api/index.ts:    // Parse the CSV data
src/api/index.ts:      // Handle both header and non-header CSV formats
src/api/index.ts:    // Process each record and prepare for Firestore
src/api/index.ts:// GET all inventory items
src/api/index.ts:// GET inventory item by ID
src/api/index.ts:// UPDATE inventory item
src/api/index.ts:// DELETE inventory item
src/api/index.ts:// Error handling middleware
src/api/index.ts:// Export for serverless use
src/api/wialon.ts:// Wialon SDK is on window
src/api/wialon.ts:const WIALON_API_URL = import.meta.env.VITE_WIALON_API_URL?.trim() || "https://hst-api.wialon.com";
src/api/wialon.ts:const WIALON_SDK_URL = "https://hst-api.wialon.com/wsdk/script/wialon.js";
src/api/wialon.ts:// Load Wialon SDK
src/api/wialon.ts:// Initialize session
src/api/wialon.ts:        // Add listeners safely
src/api/wialon.ts:// Get all units
src/api/wialon.ts:// Get unit by ID
src/api/wialon.ts:// Safe sensor access
src/api/wialon.ts:// Get unit details safely
src/api/wialon.ts:// Register/Unregister listeners safely
src/api/wialon.ts:// Check initialization
src/api/types.d.ts:// Define CSV record types for typed access
src/api/types.d.ts:// Augment Firebase namespace
src/api/fleetAnalyticsApi.ts:// Simulate API delay
src/api/fleetAnalyticsApi.ts:// Filter data by date range
src/api/fleetAnalyticsApi.ts:// Simulate API endpoints for fleet analytics data
src/api/fleetAnalyticsApi.ts:    // Simulate network request
src/api/fleetAnalyticsApi.ts:    // In a real application, you would apply filters and date range
src/api/fleetAnalyticsApi.ts:    // For this simulation, we'll just return the static data
src/api/fleetAnalyticsApi.ts:    // Apply date filtering if dates are provided
src/api/fleetAnalyticsApi.ts:    // Filter by specific data points if needed
src/api/fleetAnalyticsApi.ts:    // In a real application, this would be handled by the backend
src/api/fleetAnalyticsApi.ts:      // Return empty data if roi filter not selected
src/api/fleetAnalyticsApi.ts:    // Filter by specific data points
src/api/fleetAnalyticsApi.ts:      // Return empty data if utilization filter not selected
src/api/fleetAnalyticsApi.ts:    // Apply filters - this would be done server-side in a real app
src/api/fleetAnalyticsApi.ts:      // If only one metric is selected, zero out the other one
src/api/fleetAnalyticsApi.ts:    // Apply date range filtering
src/api/fleetAnalyticsApi.ts:    // Apply date range filtering
src/api/fleetAnalyticsApi.ts:    // Filter metrics based on active filters
src/api/fleetAnalyticsApi.ts:      // Apply filters by zeroing out non-selected metrics
src/api/fleetAnalyticsApi.ts:    // Apply date range filtering
src/api/fleetAnalyticsApi.ts:  // Fetch all data at once
src/api/vehicleApi.ts:const API_BASE = import.meta.env.VITE_API_URL || 'https://hst-api.wialon.com';
src/api/vehicleApi.ts:/**
src/api/vehicleApi.ts:/**
src/api/vehicleApi.ts:/**
src/api/vehicleApi.ts:/**
src/api/vehicleApi.ts:/**
src/api/vehicleApi.ts:/**
src/api/firebaseHelpers.ts:/**
src/api/firebaseHelpers.ts:// Create a document with auto-generated ID
src/api/firebaseHelpers.ts:// Create or update a document with a specific ID
src/api/firebaseHelpers.ts:// Get a document by ID
src/api/firebaseHelpers.ts:// Get all documents in a collection
src/api/firebaseHelpers.ts:// Query documents in a collection
src/api/firebaseHelpers.ts:    // Build query constraints
src/api/firebaseHelpers.ts:    // Add where conditions
src/api/firebaseHelpers.ts:    // Add sorting
src/api/firebaseHelpers.ts:    // Add limit
src/api/firebaseHelpers.ts:    // Create the query with all constraints
src/api/firebaseHelpers.ts:// Update a document
src/api/firebaseHelpers.ts:// Delete a document
src/api/firebaseHelpers.ts:/**
src/api/firebaseHelpers.ts:// Set data at a specific path
src/api/firebaseHelpers.ts:// Get data from a specific path
src/api/firebaseHelpers.ts:// Push data to a list
src/api/firebaseHelpers.ts:// Update data at a specific path
src/api/firebaseHelpers.ts:// Remove data at a specific path
src/api/firebaseHelpers.ts:/**
src/api/firebaseHelpers.ts:// Upload a file to storage
src/api/firebaseHelpers.ts:// Get download URL for a file
src/api/driverBehaviorService.ts:/* =========================
src/api/driverBehaviorService.ts:  eventDate: string; // "YYYY/MM/DD"
src/api/driverBehaviorService.ts:  eventTime: string; // "HH:MM"
src/api/driverBehaviorService.ts:  eventCategory?: string; // derived from path (e.g. "21H_Fatigue Alert_2025")
src/api/driverBehaviorService.ts:  month?: string; // derived from path "01".."12"
src/api/driverBehaviorService.ts:/* =========================
src/api/driverBehaviorService.ts:    // online/offline listeners
src/api/driverBehaviorService.ts:  /* ---------- status ---------- */
src/api/driverBehaviorService.ts:  // Expose read-only status for consumers (and ensure fields are read)
src/api/driverBehaviorService.ts:  /* ---------- auth gate (replace with your auth check) ---------- */
src/api/driverBehaviorService.ts:  /* ---------- persistence of pending changes ---------- */
src/api/driverBehaviorService.ts:  /* ---------- sync queue when back online ---------- */
src/api/driverBehaviorService.ts:    // remove successful items and persist the remainder
src/api/driverBehaviorService.ts:  /* ---------- callbacks ---------- */
src/api/driverBehaviorService.ts:  /* ---------- targeted subscription by driver ---------- */
src/api/driverBehaviorService.ts:    // tear down previous
src/api/driverBehaviorService.ts:    // collectionGroup across month subcollections "01".."12"
src/api/driverBehaviorService.ts:            // derive meta from path: driverBehaviorEvents/<category>/<month>/<docId>
src/api/driverBehaviorService.ts:    // store composite unsubscribe
src/api/driverBehaviorService.ts:  /* ---------- global subscription (explicit paths) ---------- */
src/api/driverBehaviorService.ts:    // tear down previous
src/api/driverBehaviorService.ts:                // drop any existing events from this path/month
src/api/driverBehaviorService.ts:                    // already filtered out above
src/api/driverBehaviorService.ts:  /* ---------- simpler global subscription via collectionGroup ---------- */
src/api/driverBehaviorService.ts:  /* ---------- mutations (online-first with offline queue) ---------- */
src/api/driverBehaviorService.ts:        // determine path
src/api/driverBehaviorService.ts:          const month = data.eventDate.split("/")[1]; // "2025/06/20" -> "06"
src/api/driverBehaviorService.ts:        // queue with docPath (consistent with syncPendingChanges)
src/api/driverBehaviorService.ts:      const [, month, day] = eventData.eventDate.split("/"); // ["2025","06","20"]
src/api/driverBehaviorService.ts:      const time = eventData.eventTime.replace(":", ""); // "17:23" -> "1723"
src/api/driverBehaviorService.ts:  /* ---------- cleanup ---------- */
src/api/driverBehaviorService.ts:/* Singleton */
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:// import { mapLocalToSageInventory } from '../../utils/sageDataMapping';
src/api/sageIntegration.ts:// import { mapSageToLocalInventory } from '../../utils/sageDataMapping'; // Uncomment if this export exists
src/api/sageIntegration.ts:// Base API client for Sage
src/api/sageIntegration.ts:// Error handling helper
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:    // Map Sage format to local format
src/api/sageIntegration.ts:    // return response.data.items.map((item: SageInventoryItem) => 
src/api/sageIntegration.ts:    //   mapSageToLocalInventory(item)
src/api/sageIntegration.ts:    // );
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:    // Determine if this is a new item or an update
src/api/sageIntegration.ts:    // Return the updated item with Sage ID
src/api/sageIntegration.ts:    // return mapSageToLocalInventory(response.data);
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:    // First get the current item
src/api/sageIntegration.ts:    // Update just the quantity
src/api/sageIntegration.ts:    // Make the API call to update the item
src/api/sageIntegration.ts:    // return mapSageToLocalInventory(updateResponse.data);
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:  // This is a placeholder function - actual implementation would connect to Sage API
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:  // This is a placeholder function - actual implementation would connect to Sage API
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:  // This is a placeholder function - actual implementation would connect to Sage API
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:  // This is a placeholder function - actual implementation would connect to Sage API
src/api/sageIntegration.ts:/**
src/api/sageIntegration.ts:  // This is a placeholder function - actual implementation would connect to Sage API
src/api/wialon-sdk.ts:/**
src/api/wialon-sdk.ts:/**
src/api/wialon-sdk.ts:/**
src/api/wialon-sdk.ts:  eid: string; // Session ID
src/api/wialon-sdk.ts:    nm: string; // Name
src/api/wialon-sdk.ts:    prp: any; // Properties
src/api/wialon-sdk.ts:/**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:  /**
src/api/wialon-sdk.ts:/**
src/types/wialon-types.ts:/**
src/types/wialon-types.ts:/**
src/types/wialon-types.ts:  /** Unique identifier of the sensor */
src/types/wialon-types.ts:  /** Display name of the sensor */
src/types/wialon-types.ts:  /** Type of sensor measurement */
src/types/wialon-types.ts:  /** Current sensor reading. Type depends on sensor type */
src/types/wialon-types.ts:  /** Measurement unit (e.g., "°C", "L", "V", "bar", etc.) */
src/types/wialon-types.ts:  /** Additional information about the sensor */
src/types/wialon-types.ts:  n: string; // Name
src/types/wialon-types.ts:  t: string; // Type
src/types/wialon-types.ts:  d: string; // Description
src/types/wialon-types.ts:  m: string; // Metric
src/types/wialon-types.ts:  p: string; // Parameter
src/types/wialon-types.ts:  f: number; // Flags
src/types/wialon-types.ts:  c: object; // Config
src/types/wialon-types.ts:  vt: number; // Validation type
src/types/wialon-types.ts:  vs?: number; // Validating sensor id
src/types/wialon-types.ts:  // Wialon SDK methods
src/types/wialon-types.ts:  n: string; // name
src/types/wialon-types.ts:  t: number; // type
src/types/wialon-types.ts:  w: number; // width
src/types/wialon-types.ts:  c: string; // color
src/types/wialon-types.ts:  p: any; // points/polygon data
src/types/wialon-types.ts:  // Add other driver-specific fields as needed
src/types/fleetAnalyticsData.ts:// Sample data for fleet analytics charts
src/types/fleetAnalyticsData.ts:// In a real application, this would be fetched from an API
src/types/fleetAnalyticsData.ts:// Vehicle status data
src/types/fleetAnalyticsData.ts:// Monthly ROI data
src/types/fleetAnalyticsData.ts:// Fleet utilization data
src/types/fleetAnalyticsData.ts:// Vehicle performance metrics
src/types/fleetAnalyticsData.ts:// Detailed costs data
src/types/fleetAnalyticsData.ts:// Fleet analytics data with multiple metrics
src/types/fleetAnalyticsData.ts:// Daily vehicle utilization data
src/types/jobCard.ts:// ——— Shared enums ———
src/types/jobCard.ts:// ——— Reusable structures ———
src/types/jobCard.ts:// ——— JobCard Template System ———
src/types/jobCard.ts:// ——— JobCard Instance Types ———
src/types/jobCard.ts:// ——— Utilities ———
src/types/TyreDoc.ts:// src/types/tyres.ts
src/types/TyreDoc.ts:  // Required location property
src/types/TyreDoc.ts:  // Optional fields
src/types/wialon-sdk-extended.d.ts:// Extended typings for wialon-sdk.d.ts
src/types/wialon-sdk-extended.d.ts:// Extending the existing Wialon SDK typings
src/types/wialon-sdk-extended.d.ts:// Update the global window interface
src/types/PrivacyPolicy.tsx:/**
src/types/sensor-types.ts:/** ──────────────────────────────────────────────────────────────
src/types/sensor-types.ts:  lastUpdated?: string;          // ISO timestamp
src/types/connection.ts:// Shared connection status type used across UI and services
src/types/window-wialon.d.ts:/**
src/types/diesel.ts:// src/types/diesel.ts
src/types/diesel.ts:/** Possible categories for workshop job cards */
src/types/diesel.ts:/** Allowed vehicle types in the system */
src/types/diesel.ts:/** Allowed fuel entry sources */
src/types/diesel.ts:/** Fuel station classification */
src/types/diesel.ts:/** Workshop job card template definition */
src/types/diesel.ts:  estimatedDuration: number; // in hours
src/types/diesel.ts:/** Diesel consumption record for a vehicle */
src/types/diesel.ts:  /** Firestore Timestamp or undefined if not yet saved */
src/types/diesel.ts:  /** ISO string representation for UI filtering */
src/types/diesel.ts:  /** Source of the entry (manual, Wialon, import) */
src/types/diesel.ts:/** Diesel norm values for planning & benchmarking */
src/types/faultData.ts:// Define Fault Category interface
src/types/faultData.ts:// Define Fault Subcategory interface
src/types/faultData.ts:  typicalSeverity: FaultSeverity; // Default severity for this type
src/types/faultData.ts:// Define Fault Severity enum
src/types/faultData.ts:// Define Fault Status enum
src/types/faultData.ts:// Define Fault interface
src/types/faultData.ts:// Predefined fault categories and subcategories
src/types/faultData.ts:// Export a function to find a specific subcategory by ID
src/types/faultData.ts:// Export a function to find a category by ID
src/types/types.ts:// Extended type for DieselConsumptionRecord to include properties used in DieselDashboard
src/types/types.ts:  id: string; // Unique identifier for the record
src/types/types.ts:  // Additional properties used in DieselDashboard but not in the base type
src/types/types.ts:  vehicleId?: string; // Used in place of fleetNumber
src/types/types.ts:  timestamp?: string; // Used in place of date
src/types/types.ts:  liters?: number; // Used in place of litresFilled
src/types/types.ts:  cost?: number; // Used in place of totalCost
src/types/types.ts:  location?: string; // Used in place of fuelStation
src/types/types.ts:  odometer?: number; // Used in place of kmReading
src/types/types.ts:  verified?: boolean; // Used in place of probeVerified
src/types/types.ts:  flagged?: boolean; // Flag for records with issues
src/types/types.ts:// Sync status type
src/types/types.ts:// Diesel norms type
src/types/client.ts:  paymentTerms?: number; // Days
src/types/client.ts:// Helper function to create a new client with default values
src/types/client.ts:// Helper function to add a relationship between clients
src/types/tyreStores.ts:  where, // Added 'where' for filtering tyres
src/types/tyreStores.ts:  Tyre, // Import Tyre from the consolidated types file
src/types/tyreStores.ts:} from "./tyre"; // All types should now come from here
src/types/tyreStores.ts:// --- Tyre Management Functions ---
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:      // Ensure createdAt is only set on initial creation
src/types/tyreStores.ts:    await setDoc(tyreRef, dataToSave, { merge: true }); // Use merge to update existing fields
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:  condition?: string; // Assuming condition is a simple string for filtering
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:  inspection: TyreInspectionRecord // Expect TyreInspectionRecord here
src/types/tyreStores.ts:    const docRef = doc(inspectionsCollectionRef); // Let Firestore generate the ID
src/types/tyreStores.ts:      id: docRef.id, // Assign the generated ID to the inspection object
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:    const q = query(inspectionsCollectionRef, orderBy("date", "desc")); // Order by inspection date
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:    const q = query(collRef, orderBy("createdAt", "desc")); // Order by creation date
src/types/tyreStores.ts:          // Convert Firestore Timestamps to Date objects if necessary for display
src/types/tyreStores.ts:          // (though it's often better to handle this in components or context if needed)
src/types/tyreStores.ts:    return () => { }; // Return a no-op function as unsubscribe
src/types/tyreStores.ts:// --- Tyre Store Management Functions (from your provided code) ---
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:    // First remove the entry from the source store
src/types/tyreStores.ts:    // Then add it to the destination store
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:          // Convert Firestore Timestamps to Date objects
src/types/tyreStores.ts:          // This conversion logic should be handled carefully if `Timestamp` is part of your `TyreStore` type.
src/types/tyreStores.ts:          // If `TyreStore` type uses `Timestamp` directly, no `toDate()` conversion is needed here.
src/types/tyreStores.ts:          // If it expects `Date` objects, then `toDate()` is appropriate.
src/types/tyreStores.ts:          // Given the `tyre-types` Canvas, `Timestamp` is used directly, so this conversion might not be strictly necessary
src/types/tyreStores.ts:          // unless your UI components specifically expect Date objects.
src/types/tyreStores.ts:    // Return a no-op function as unsubscribe
src/types/tyreStores.ts:/**
src/types/tyreStores.ts:      // Count store types
src/types/tyreStores.ts:      // Count tyres by status
src/types/wialon-sensors.ts:// src/types/wialon-types.ts
src/types/wialon-sensors.ts:/**
src/types/TyreModel.ts:// TyreModel.ts - Domain model for Tyre Management
src/types/TyreModel.ts:/**
src/types/TyreModel.ts:// =========================
src/types/TyreModel.ts:// Tyre Types & Interfaces
src/types/TyreModel.ts:// =========================
src/types/TyreModel.ts:  width: number; // e.g. 315
src/types/TyreModel.ts:  aspectRatio: number; // e.g. 80
src/types/TyreModel.ts:  rimDiameter: number; // e.g. 22.5
src/types/TyreModel.ts:  displayString?: string; // "315/80R22.5"
src/types/TyreModel.ts:  | "steer" // Added from types/tyre.ts
src/types/TyreModel.ts:  | "drive" // Added from types/tyre.ts
src/types/TyreModel.ts:  | "trailer" // Added from types/tyre.ts
src/types/TyreModel.ts:  | "spare"; // Added from types/tyre.ts
src/types/TyreModel.ts:  name: string; // "front_left", "drive_1_left", etc.
src/types/TyreModel.ts:  installationDate: string; // ISO date string
src/types/TyreModel.ts:  fromPosition: string; // Keep as string to avoid circular reference
src/types/TyreModel.ts:  toPosition: string; // Keep as string to avoid circular reference
src/types/TyreModel.ts:  technician: string; // Changed from 'by' to match types/tyre.ts
src/types/TyreModel.ts:  technician: string; // Changed from 'by' to match types/tyre.ts
src/types/TyreModel.ts:  condition: string; // Changed from 'status' to match types/tyre.ts
src/types/TyreModel.ts:  sidewallCondition?: string; // Keep for backward compatibility
src/types/TyreModel.ts:// Define tyre store location enum to match types/tyre.ts
src/types/TyreModel.ts:// ===========================
src/types/TyreModel.ts:// Firestore Converter
src/types/TyreModel.ts:// ===========================
src/types/TyreModel.ts:// ==========================
src/types/TyreModel.ts:// Firebase API Functions
src/types/TyreModel.ts:// ==========================
src/types/TyreModel.ts:// =========================
src/types/TyreModel.ts:// Analytics & Utility Types
src/types/TyreModel.ts:// =========================
src/types/TyreModel.ts:// ========================
src/types/TyreModel.ts:// Format/Parse Utilities
src/types/TyreModel.ts:// ========================
src/types/TyreModel.ts:// ===========================
src/types/TyreModel.ts:// TyreService: Core Domain Logic
src/types/TyreModel.ts:// ===========================
src/types/TyreModel.ts:    const newTyreDepth = 20; // mm (your policy - adjust as needed)
src/types/TyreModel.ts:    const minimumTread = 3; // mm, legal minimum
src/types/TyreModel.ts:    const newTyreDepth = 20; // mm
src/types/TyreModel.ts:      // Use enum value for warning condition if filtering supported
src/types/TyreModel.ts:      // Normalize maintenanceHistory.rotations to ensure id exists
src/types/TyreModel.ts:// END OF DOMAIN MODULE
src/types/trip.ts:  costBreakdown?: Record<string, any>; // Object with cost breakdown
src/types/trip.ts:// --- Main Trip type from Firestore ---
src/types/trip.ts:  title: string; // optional for UI, not used in TripForm
src/types/trip.ts:  // Extended
src/types/trip.ts:// Used for form submission (excluding system metadata)
src/types/jobCardTemplates.ts:// Define the task item type
src/types/jobCardTemplates.ts:// Define the job card template type
src/types/jobCardTemplates.ts:// Define the service interval type
src/types/jobCardTemplates.ts:// 15,000 km Service job card template
src/types/jobCardTemplates.ts:    // Engine tasks
src/types/jobCardTemplates.ts:// 50,000 km Service job card template
src/types/jobCardTemplates.ts:    // Engine tasks
src/types/jobCardTemplates.ts:    // More comprehensive items for 50k service
src/types/jobCardTemplates.ts:    // Additional tasks would be added here
src/types/jobCardTemplates.ts:// Brake System Repair template
src/types/jobCardTemplates.ts:    // Additional tasks would be added here
src/types/jobCardTemplates.ts:// Export an array of all templates
src/types/jobCardTemplates.ts:// Common service intervals
src/types/tyreMappingData.ts:// Raw mapping data dump from CSV
src/types/tyreMappingData.ts:  // 14L
src/types/tyreMappingData.ts:  // 2T (Interlink)
src/types/tyreMappingData.ts:  // 6H (LMV Example)
src/types/tyreMappingData.ts:  // UD
src/types/tyreMappingData.ts:  // --- SPESIALE HORSES EN GROOT VLOTE ---
src/types/tyreMappingData.ts:  // 23H, 24H, 26H, 28H
src/types/tyreMappingData.ts:// Builds the initial VehicleTyreStore TyreStore object
src/types/tyreMappingData.ts:  // Default type to a valid TyreType; store name does not represent tyre type
src/types/wialon-sdk.d.ts:// src/types/wialon-sdk.d.ts
src/types/wialon-sdk.d.ts:// ==== Main W namespace ====
src/types/wialon-sdk.d.ts:  // ====== Utility Functions ======
src/types/wialon-sdk.d.ts:  // ====== Event System ======
src/types/wialon-sdk.d.ts:  // ====== Core Session ======
src/types/wialon-sdk.d.ts:    // Commonly used convenience methods (not always present in older SDK docs)
src/types/wialon-sdk.d.ts:  // ====== Item Namespace ======
src/types/wialon-sdk.d.ts:  // ====== Class System ======
src/types/wialon-sdk.d.ts:  // ====== Request Class ======
src/types/wialon-sdk.d.ts:// ====== Support Interfaces ======
src/types/wialon-sdk.d.ts:  x: number; // longitude
src/types/wialon-sdk.d.ts:  y: number; // latitude
src/types/wialon-sdk.d.ts:  s: number; // speed
src/types/wialon-sdk.d.ts:  c: number; // course
src/types/wialon-sdk.d.ts:  t: number; // timestamp
src/types/wialon-sdk.d.ts:  sc: number; // satellites
src/types/wialon-sdk.d.ts:// ====== Global Window binding ======
src/types/wialon-sdk.d.ts:// MReport interfaces
src/types/index.ts:// Base types for the application
src/types/index.ts:  fleetUnitId?: string | number; // Wialon tracking unit ID for telematics
src/types/index.ts:    estimatedDistance?: number; // km
src/types/index.ts:    estimatedDuration?: number; // minutes
src/types/index.ts:    estimatedDistance?: number; // km
src/types/index.ts:    estimatedDuration?: number; // minutes
src/types/index.ts:    fuelSavings?: number; // liters
src/types/index.ts:    timeSavings?: number; // minutes
src/types/index.ts:    capacityUtilization: number; // percentage
src/types/index.ts:    fuelEfficiency: number; // km/l
src/types/index.ts:    idleTime?: number; // hours
src/types/index.ts:  // NEW: Enhanced Planned vs Actual Timestamps with Validation
src/types/index.ts:  finalArrivalDateTime?: string; // Final confirmed time for invoicing
src/types/index.ts:  finalOffloadDateTime?: string; // Final confirmed time for invoicing
src/types/index.ts:  finalDepartureDateTime?: string; // Final confirmed time for invoicing
src/types/index.ts:  timelineValidated?: boolean; // Whether times have been validated for invoicing
src/types/index.ts:  timelineValidatedBy?: string; // Who validated the timeline
src/types/index.ts:  timelineValidatedAt?: string; // When timeline was validated
src/types/index.ts:  // NEW: Additional costs before invoicing
src/types/index.ts:  // NEW: Enhanced Invoice and payment tracking
src/types/index.ts:  invoiceSubmittedAt?: string; // When invoice was submitted
src/types/index.ts:  invoiceSubmittedBy?: string; // Who submitted the invoice
src/types/index.ts:  invoiceValidationNotes?: string; // Notes during invoice submission
src/types/index.ts:  paymentAmount?: number; // Actual amount received
src/types/index.ts:  paymentMethod?: string; // How payment was received
src/types/index.ts:  bankReference?: string; // Bank reference or transaction ID
src/types/index.ts:  // NEW: Load timeline tracking
src/types/index.ts:  // NEW: Shipment tracking
src/types/index.ts:  statusNotes?: string; // Added for storing notes when updating trip status
src/types/index.ts:  // NEW: Metadata and audit trail
src/types/index.ts:  // NEW: Web booking integration
src/types/index.ts:  loadRef?: string; // Reference from web booking system
src/types/index.ts:  webBookingId?: string; // ID from external booking system
src/types/index.ts:  bookingSource?: "manual" | "web" | "api" | "import"; // How the trip was created
src/types/index.ts:  // Additional web import fields (for compatibility)
src/types/index.ts:  importSource?: string; // e.g., "web_book"
src/types/index.ts:  importedVia?: string; // e.g., "enhancedWebBookImport"
src/types/index.ts:  importedAt?: string; // When the trip was imported
src/types/index.ts:  customer?: string; // Alternative to clientName for web imports
src/types/index.ts:// NEW: Additional Cost Types
src/types/index.ts:// NEW: Enhanced Delay Tracking with Severity
src/types/index.ts:  delayDuration: number; // in hours
src/types/index.ts:  severity: "minor" | "moderate" | "major" | "critical"; // Impact level
src/types/index.ts:// NEW: Enhanced Follow-up Tracking
src/types/index.ts:// NEW: Invoice Aging with Enhanced Tracking
src/types/index.ts:// NEW: Customer Performance with Risk Assessment
src/types/index.ts:  paymentScore: number; // 0-100
src/types/index.ts:  retentionScore: number; // 0-100
src/types/index.ts:// NEW: Payment History Tracking
src/types/index.ts:// NEW: Truck Performance with Utilization
src/types/index.ts:  utilizationRate: number; // percentage
src/types/index.ts:// NEW: Enhanced Missed Load Tracking - SIMPLIFIED (No Payment Status)
src/types/index.ts:  impact: "low" | "medium" | "high"; // Business impact
src/types/index.ts:  // NEW: Resolution tracking (not payment)
src/types/index.ts:  compensationOffered?: number; // If any goodwill compensation was offered
src/types/index.ts:// NEW: Diesel Consumption Record with Trip Linkage
src/types/index.ts:  tripId?: string; // Link to trip for cost allocation
src/types/index.ts:  // --- Probe Verification Fields ---
src/types/index.ts:  probeReading?: number; // For probe verification
src/types/index.ts:  probeDiscrepancy?: number; // Difference between filled and probe
src/types/index.ts:  // --- Reefer/horse fields ---
src/types/index.ts:// NEW: Driver Behavior Event Types
src/types/index.ts:  // Points for scoring and carReportId for linkage
src/types/index.ts:  points: number; // Making points required with no "?"
src/types/index.ts:  // Status for event workflow (for UI and logic)
src/types/index.ts:  status: "pending" | "acknowledged" | "resolved" | "disputed"; // Making status required with no "?"
src/types/index.ts:// NEW: Action Item Types
src/types/index.ts:// NEW: CAR (Corrective Action Report) Types
src/types/index.ts:  carNumber?: string; // Added for report reference number
src/types/index.ts:  // Status and details
src/types/index.ts:  // Dates
src/types/index.ts:  issueDate: string; // Date the report was issued
src/types/index.ts:  dueDate: string; // When action needs to be completed
src/types/index.ts:  resolutionDate?: string; // When it was resolved
src/types/index.ts:  // People
src/types/index.ts:  issuedBy: string; // Person who issued the report
src/types/index.ts:  verifiedBy?: string; // Person who verified resolution
src/types/index.ts:  // Incident details
src/types/index.ts:  incidentType: string; // Type of incident
src/types/index.ts:  description: string; // Description of incident
src/types/index.ts:  // Root cause analysis
src/types/index.ts:  rootCause?: string; // Root cause of the incident
src/types/index.ts:  contributingFactors?: string; // Factors that contributed
src/types/index.ts:  // Actions taken
src/types/index.ts:  immediateActions?: string; // Immediate actions taken
src/types/index.ts:  correctiveActions: string; // Longer-term corrective actions (removed optional)
src/types/index.ts:  preventativeMeasures?: string; // Preventative measures
src/types/index.ts:  resolutionComments?: string; // Comments on resolution
src/types/index.ts:  // Legacy fields (keeping for backward compatibility)
src/types/index.ts:  // Metadata
src/types/index.ts:// NEW: Load timeline event
src/types/index.ts:// NEW: Real-time Sync Types
src/types/index.ts:// System Cost Configuration Types
src/types/index.ts:// Audit Trail Types
src/types/index.ts:// User Permission Types
src/types/index.ts:// NEW: Trip Template interface for pre-defined trip configurations
src/types/index.ts:// NEW: Load Plan interface for cargo planning and optimization
src/types/index.ts:    weight: number; // kg
src/types/index.ts:    volume: number; // cubic meters
src/types/index.ts:    length?: number; // meters
src/types/index.ts:    width?: number; // meters
src/types/index.ts:    height?: number; // meters
src/types/index.ts:    weight: number; // kg
src/types/index.ts:    volume: number; // cubic meters
src/types/index.ts:  loadingSequence?: string[]; // IDs of cargo items in loading order
src/types/index.ts:  optimizedArrangement?: string; // JSON string of 3D arrangement or reference to external data
src/types/index.ts:    frontAxle: number; // kg
src/types/index.ts:    rearAxle: number; // kg
src/types/index.ts:    trailerAxles: number[]; // kg per axle
src/types/index.ts:  utilisationRate?: number; // percentage
src/types/index.ts:// NEW: Trip Route Point interface for detailed route information
src/types/index.ts:    estimatedCrossingTime: number; // minutes
src/types/index.ts:// NEW: Trip Financial Analysis interface
src/types/index.ts:    grossProfitMargin: number; // percentage
src/types/index.ts:    netProfitMargin: number; // percentage
src/types/index.ts:    returnOnInvestment: number; // percentage
src/types/index.ts:    variance: number; // percentage
src/types/index.ts:// Constants for form options
src/types/index.ts:// NEW: Responsible Persons for Action Items and CAR Reports
src/types/index.ts:// NEW: Trucks with fuel probes for diesel monitoring
src/types/index.ts:// NEW: Additional Cost Types
src/types/index.ts:// NEW: Enhanced Delay Reason Types
src/types/index.ts:// NEW: Contact Methods
src/types/index.ts:// (Removed unused CONTACT_METHODS to resolve compile error)
src/types/index.ts:// NEW: Enhanced Missed Load Reasons
src/types/index.ts:// NEW: Driver Behavior Event Types
src/types/index.ts:// Workshop and Job Card Types
src/types/index.ts:// Task history log entry
src/types/index.ts:// Invoice type for job card invoicing
src/types/index.ts:// Fleet vehicle type
src/types/index.ts:// NEW: CAR Report Types
src/types/index.ts:// STRUCTURED COST CATEGORIES & SUB-COST TYPES
src/types/index.ts:// Edit Reason Templates
src/types/index.ts:// NEW: Trip Template Categories
src/types/index.ts:// NEW: Load Categories
src/types/index.ts:// NEW: Invoice Aging Thresholds
src/types/index.ts:// NEW: Follow-up Alert Thresholds
src/types/index.ts:  ZAR: 20, // days
src/types/index.ts:  USD: 12, // days
src/types/index.ts:// NEW: Timeline Validation Statuses
src/types/index.ts:// (Removed unused TIMELINE_VALIDATION_STATUSES to resolve compile error)
src/types/index.ts:// NEW: Invoice Submission Statuses
src/types/index.ts:// (Removed unused INVOICE_SUBMISSION_STATUSES to resolve compile error)
src/types/index.ts:// Tyre related types for tyre management module
src/types/index.ts:  installedOn?: string; // Fleet number if fitted
src/types/index.ts:  position?: string; // Position on vehicle if fitted
src/types/index.ts:// Additional types for ActiveTripsPageEnhanced
src/types/index.ts:  // Legacy properties for compatibility
src/types/index.ts:// In your types file (e.g., src/types/index.ts)
src/types/index.ts:  // ... existing properties ...
src/types/index.ts:  // ... other properties ...
src/types/index.ts:// Added exports for trips, tyre, and workshop data
src/types/vehicle.ts:/**
src/types/vehicle.ts:// Vehicle status types
src/types/vehicle.ts:// Vehicle type classification
src/types/vehicle.ts:// Vehicle category
src/types/vehicle.ts:// Vehicle series
src/types/vehicle.ts:/**
src/types/vehicle.ts:  registrationNo: string; // <-- Added registrationNo property
src/types/vehicle.ts:  // Optional extended fields used across UI and data
src/types/vehicle.ts:  km?: number; // prefer km over mileage
src/types/vehicle.ts:  /**
src/types/vehicle.ts:/**
src/types/vehicle.ts:/**
src/types/vehicle.ts:/**
src/types/vehicle.ts:/**
src/types/wialon-sdk-augment.d.ts:// Type augmentation for Wialon SDK
src/types/wialon-sdk-augment.d.ts:// Extend Window interface without conflicting with existing definitions
src/types/wialon-sdk-augment.d.ts:  // This will be merged with other Window definitions
src/types/wialon.ts:// src/types/wialon.ts
src/types/wialon.ts:/* ------------------------------------------------------------------
src/types/wialon.ts:/* ---------- Positions & units ------------------------------------------------ */
src/types/wialon.ts:  x: number; // Longitude
src/types/wialon.ts:  y: number; // Latitude
src/types/wialon.ts:  z?: number; // Altitude
src/types/wialon.ts:  t?: number; // Timestamp (UNIX, s)
src/types/wialon.ts:  s?: number; // Speed
src/types/wialon.ts:  c?: number; // Course
src/types/wialon.ts:  sc?: number; // Status code
src/types/wialon.ts:/** SDK object representing a unit (vehicle / asset) */
src/types/wialon.ts:  /* SDK event interface */
src/types/wialon.ts:  /* Messages API */
src/types/wialon.ts:/** Lightweight DTO sometimes returned by REST adapters */
src/types/wialon.ts:/* ---------- Other domain objects -------------------------------------------- */
src/types/wialon.ts:  n: string; // name
src/types/wialon.ts:  ds?: string; // description
src/types/wialon.ts:  p?: string; // phone
src/types/wialon.ts:  n: string; // name
src/types/wialon.ts:  t: number; // 3-circle, 2-polygon, 1-polyline
src/types/wialon.ts:  w?: number; // radius (for circle)
src/types/wialon.ts:  c?: number; // colour (decimal)
src/types/wialon.ts:  p?: any; // geometry
src/types/wialon.ts:/** Typed wrapper around a “resource” object */
src/types/wialon.ts:/** A new interface to correctly type the SDK User object. */
src/types/wialon.ts:/**
src/types/wialon.ts:  // Methods to get core session info
src/types/wialon.ts:  // Existing methods
src/types/wialon.ts:/** Raw payload produced by a successful `/login_token` REST call */
src/types/wialon.ts:  /** single resource id **or** array (some accounts return many) */
src/types/wialon.ts:  /* add extra properties if you need them */
src/types/wialon.ts:/* ---------- Helper view-models ---------------------------------------------- */
src/types/workshop-job-card.ts:// ==== Enhanced Workshop Job Card Interfaces ====
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-job-card.ts:/**
src/types/workshop-tyre-inventory.ts:// Comprehensive types for Workshop and Tyre Management System
src/types/workshop-tyre-inventory.ts:// Original interfaces to maintain backward compatibility
src/types/workshop-tyre-inventory.ts:  pattern?: string; // Optional for compatibility with filters
src/types/workshop-tyre-inventory.ts:  tyreSize?: TyreSize; // Added to fix TypeScript error
src/types/workshop-tyre-inventory.ts:  // Additional properties used in VehicleTyreView
src/types/workshop-tyre-inventory.ts:  lastInspectionDate?: string; // Used interchangeably with lastInspection
src/types/workshop-tyre-inventory.ts:// New extended interfaces for the comprehensive system
src/types/workshop-tyre-inventory.ts:  width: number; // mm (e.g., 295, 315)
src/types/workshop-tyre-inventory.ts:  aspectRatio: number; // % (e.g., 80, 75)
src/types/workshop-tyre-inventory.ts:  rimDiameter: number; // inches (e.g., 22.5, 24.5)
src/types/workshop-tyre-inventory.ts:  displayString?: string; // For compatibility with UI that expects string
src/types/workshop-tyre-inventory.ts:  treadDepth: number; // mm
src/types/workshop-tyre-inventory.ts:  pressure: number; // PSI
src/types/workshop-tyre-inventory.ts:  temperature: number; // Celsius
src/types/workshop-tyre-inventory.ts:  sidewallCondition?: string; // Added to fix TypeScript error
src/types/workshop-tyre-inventory.ts:  remarks?: string; // Added for compatibility with TyreInspection.tsx
src/types/workshop-tyre-inventory.ts:  photos?: string[]; // Added for compatibility with TyreInspection.tsx
src/types/workshop-tyre-inventory.ts:  status?: string; // Added for compatibility with TyreInspection.tsx
src/types/workshop-tyre-inventory.ts:  timestamp?: string; // Added for compatibility with TyreInspection.tsx
src/types/workshop-tyre-inventory.ts:// Enhanced Tyre interface without getters (TypeScript-friendly)
src/types/workshop-tyre-inventory.ts:  status: "started" | "paused" | "completed" | "cancelled" | string; // Using union type with string fallback for backward compatibility
src/types/workshop-tyre-inventory.ts:// Status type unions for consistent use across components
src/types/workshop-tyre-inventory.ts:// Helper functions (compatibility layer)
src/types/workshop-tyre-inventory.ts:// These replace the interface getters with proper functions
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:  // Default values
src/types/workshop-tyre-inventory.ts:  // Try to parse size string like "295/80R22.5"
src/types/workshop-tyre-inventory.ts:      // Add null checks and provide default values if parsing fails
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:  return "drive"; // Default
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:  // In legacy system, all tyres were assumed to be 'in_service' regardless of condition
src/types/workshop-tyre-inventory.ts:// Compatibility helper functions
src/types/workshop-tyre-inventory.ts:  // Map from enhanced condition status back to legacy status
src/types/workshop-tyre-inventory.ts:  return "urgent"; // critical or needs_replacement
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:    loadIndex: 0, // Default value
src/types/workshop-tyre-inventory.ts:    speedRating: "", // Default value
src/types/workshop-tyre-inventory.ts:    mountStatus: "mounted", // Default for legacy tyres
src/types/workshop-tyre-inventory.ts:            temperature: 0, // Default
src/types/workshop-tyre-inventory.ts:/**
src/types/workshop-tyre-inventory.ts:    costPerKm: 0, // Calculate if needed
src/types/workshop-tyre-inventory.ts:    // Convert inspections back to the legacy format if needed
src/types/workshop-tyre-inventory.ts:      timestamp: new Date().toISOString(), // Default timestamp if missing
src/types/wialon-augmentations.d.ts:// src/types/wialon-augmentations.d.ts
src/types/vendor.ts:/**
src/types/vendor.ts:/**
src/types/vendor.ts:  /** Unique identifier for the vendor */
src/types/vendor.ts:  /** Display name of the vendor */
src/types/vendor.ts:  /** Name of primary contact person */
src/types/vendor.ts:  /** Business email address */
src/types/vendor.ts:  /** Contact phone number */
src/types/vendor.ts:  /** Physical/postal address */
src/types/vendor.ts:  /** City where vendor is located */
src/types/vendor.ts:/**
src/types/driver.ts:  licenseExpiry: string; // Should be ISO date string
src/types/global.d.ts:/**
src/types/global.d.ts:// This is now properly declared in vite-env.d.ts
src/types/global.d.ts:// Keeping this reference here for backward compatibility if needed
src/types/global.d.ts:// For Google Maps types, see googleMaps.d.ts
src/types/global.d.ts:// Global window declarations
src/types/global.d.ts:    // Add global window properties here if needed
src/types/global.d.ts:    // For Google Maps, use the types in googleMaps.d.ts
src/types/global.d.ts:// Turn off TypeScript checking for all files in the node_modules/tailwindcss directory
src/types/global.d.ts:declare module "tailwindcss/lib/lib/*" {
src/types/global.d.ts:// Specific module augmentations for Tailwind CSS functions
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:/**
src/types/inventory.ts:// src/types/inventory.ts
src/types/inventory.ts:  /** how many have been received so far */
src/types/User.ts:// User type for user directory and authentication
src/types/userDirectory.ts:// User directory and helpers for all departments
src/types/googleMaps.d.ts:/**
src/types/googleMaps.d.ts:  // Basic Google Maps types
src/types/googleMaps.d.ts:      shape?: object; // MarkerShape
src/types/tyreData.ts:// Timestamp no longer used in this module
src/types/tyreData.ts:// Use canonical types from the shared tyre model to avoid declaration merging conflicts
src/types/tyreData.ts:// The full code with corrections
src/types/tyreData.ts:// (All original interfaces and helper functions are included for completeness)
src/types/tyreData.ts:// NOTE: Type declarations were moved to src/types/tyre.ts. This file now imports and uses them.
src/types/tyreData.ts:// Define the structure for the new fleet position data
src/types/tyreData.ts:// New exported constant for fleet positions
src/types/tyreData.ts:// --- Helper functions for tyre management ---
src/types/tyreData.ts:/**
src/types/tyreData.ts:  const minimumTread = 3; // Legal minimum in mm
src/types/tyreData.ts:  const newTyreDepth = 20; // Typical new tyre tread depth in mm
src/types/tyreData.ts:  // Calculate wear rate (mm per km)
src/types/tyreData.ts:  // Calculate remaining life
src/types/tyreData.ts:/**
src/types/tyreData.ts:/**
src/types/tyreData.ts:/**
src/types/tyreData.ts:/**
src/types/tyreData.ts:// Corrected function to create a StockEntry from a TyreAllocation
src/types/tyreData.ts:  // Ensure all required string properties are present
src/types/tyreData.ts:    toStore: "VehicleTyreStore", // Example value
src/types/tyreData.ts:    user: "System", // Example value
src/types/tyreData.ts:// Tyre brands, patterns, and sizes constants
src/types/tyreData.ts:// Common tyre size patterns for validation
src/types/tyreData.ts:  { width: 11, aspectRatio: 22.5, rimDiameter: 22.5 }, // For 11R22.5
src/types/tyreData.ts:// Mapping of common tyre sizes to their load ratings
src/types/tyreData.ts:// --- Enums and additional types for tyre management ---
src/types/tyreData.ts:// --- TYRE SIZES ---
src/types/tyreData.ts:// (removed duplicate tyreSizes - using the earlier const version above)
src/types/tyreData.ts:// --- TYRE PATTERN DATA ---
src/types/tyreData.ts:  // 315/80R22.5 (Drive)
src/types/tyreData.ts:  // 315/80R22.5 (Dual / Multi)
src/types/tyreData.ts:  // 315/80R22.5 (Steer)
src/types/tyreData.ts:  // 315/80R22.5 (Trailer)
src/types/tyreData.ts:  // 385/65R22.5 (Steer)
src/types/tyreData.ts:// --- VEHICLE POSITION CONFIGURATIONS ---
src/types/tyreData.ts:// This defines the available positions for each vehicle type
src/types/jsx.d.ts:// Add JSX namespace declaration to make MDX types work properly
src/types/mapTypes.ts:/**
src/types/mapTypes.ts:// Basic location interface for map markers
src/types/mapTypes.ts:// Icon types supported by the application
src/types/mapTypes.ts:// Route options for drawing paths between locations
src/types/mapTypes.ts:// Map style options
src/types/mapTypes.ts:// Places search result
src/types/tailwindcss.d.ts:/**
src/types/firebase.d.ts:/**
src/types/firebase.d.ts:  // Basic Firebase types
src/types/tyres.ts:// Compatibility shim: re-export canonical Tyre type and listener to avoid duplicate type definitions.
src/types/tyres.ts:// Deprecated interfaces maintained temporarily for backward compatibility.
src/types/tyres.ts:// Prefer importing from './tyre' moving forward.
src/types/tyres.ts:  // Use canonical Tyre type here
src/types/tyre.ts:// --- CORE TYPES & ENUMS ---
src/types/tyre.ts:// --- POSITION TYPE ---
src/types/tyre.ts:// --- MAIN TYRE MODEL ---
src/types/tyre.ts:// --- TYRE SIZE ---
src/types/tyre.ts:// --- HISTORY EVENTS ---
src/types/tyre.ts:// --- ADVANCED INSPECTION RECORD ---
src/types/tyre.ts:  // Extended info
src/types/tyre.ts:// --- STOCK & STORE ---
src/types/tyre.ts:// --- ALLOCATION & FLEET MAPPING ---
src/types/tyre.ts:// --- UTILITY HELPERS ---
src/types/overrides.d.ts:// This declaration file is used to override types from third-party libraries
src/types/overrides.d.ts:// that might cause TypeScript errors due to incompatible features
src/types/overrides.d.ts:  // Overriding the BaseExternalAccountClient class to avoid private field errors
src/types/overrides.d.ts:    // Add basic public methods and properties
src/types/overrides.d.ts:  // Keep other exports intact
src/types/tyre-inspection.ts:/**
src/types/tyre-inspection.ts:/**
src/types/tyre-inspection.ts:  // Optionally, add costPerKm and remainingTreadLife to the record for quick analytics
src/types/tyre-inspection.ts:/**
src/types/tyre-inspection.ts:/**
src/types/inspectionTemplates.ts:// Define the inspection item type - this is what inspectors check
src/types/inspectionTemplates.ts:// Define the inspection template type - this is the full inspection form
src/types/inspectionTemplates.ts:// Pre-trip truck inspection template
src/types/inspectionTemplates.ts:    // Documentation
src/types/inspectionTemplates.ts:    // Exterior
src/types/inspectionTemplates.ts:    // Engine Compartment
src/types/inspectionTemplates.ts:    // Interior
src/types/inspectionTemplates.ts:    // Brakes & Tyres
src/types/inspectionTemplates.ts:    // Safety Equipment
src/types/inspectionTemplates.ts:// Mechanic-focused detailed inspection template
src/types/inspectionTemplates.ts:    // Engine items
src/types/inspectionTemplates.ts:    // Add more items for other categories as needed
src/types/inspectionTemplates.ts:    // This is just a starter template
src/types/inspectionTemplates.ts:// Trailer inspection template
src/types/inspectionTemplates.ts:    // Structure items
src/types/inspectionTemplates.ts:    // Coupling items
src/types/inspectionTemplates.ts:    // Brakes items
src/types/inspectionTemplates.ts:    // Lights & Electrical items
src/types/inspectionTemplates.ts:    // Tyres & Wheels items
src/types/inspectionTemplates.ts:    // Safety Equipment items
src/types/inspectionTemplates.ts:// Export an array of all templates
src/types/inspectionTemplates.ts:// Export default
src/types/invoice.ts:// Invoice-specific interfaces for enhanced trip management
src/types/invoice.ts:// Aging thresholds by currency
src/types/invoice.ts:// Follow-up thresholds by currency (when to trigger alerts)
src/types/fleetVehicles.ts:  // Heavy Trucks - H Series
src/types/fleetVehicles.ts:  // Light Vehicles - L Series
src/types/fleetVehicles.ts:  // Other Light Vehicles
src/types/fleetVehicles.ts:  // Trailers - T Series
src/types/fleetVehicles.ts:  // Reefers - F Series
src/types/fleetVehicles.ts:  // Generator
src/types/diesel.d.ts:  probeReading?: number; // For probe verification
src/types/diesel.d.ts:  probeDiscrepancy?: number; // Difference between filled and probe
src/types/diesel.d.ts:  // Add other fields as needed based on your usage
src/types/wialon-core.ts:/** Position of a unit (vehicle) */
src/types/wialon-core.ts:  x: number; // Longitude
src/types/wialon-core.ts:  y: number; // Latitude
src/types/wialon-core.ts:  z?: number; // Altitude (optional)
src/types/wialon-core.ts:  t?: number; // Timestamp (optional)
src/types/wialon-core.ts:  s?: number; // Speed (optional)
src/types/wialon-core.ts:  c?: number; // Course (optional)
src/types/wialon-core.ts:  sc?: number; // Status code (optional)
src/types/wialon-core.ts:/** Unit (vehicle or asset) from Wialon */
src/types/wialon-core.ts:/** Type definition for Wialon SDK */
src/types/tailwind-lib.d.ts:/**
src/types/tailwind-lib.d.ts:declare module "tailwindcss/lib/lib/*" {
src/pages/admin/WialonDiagnosticsPage.tsx:/**
src/pages/admin/WialonDiagnosticsPage.tsx:// Using a simple title component instead of Helmet since react-helmet is not installed
src/pages/admin/WialonDiagnosticsPage.tsx:  // Set document title using React's useEffect if needed
src/pages/admin/WialonDiagnosticsPage.tsx:                          The base URL for Wialon API requests (default: https://hst-api.wialon.com)
src/pages/maps/Maps.tsx:// Create vehicle mapping from Wialon fleet data - memoized to prevent recalculation
src/pages/maps/Maps.tsx:  // Using useMemo to prevent unnecessary recalculation
src/pages/maps/Maps.tsx:        // Default coordinates for Namibia (will be updated with real positions in production)
src/pages/maps/Maps.tsx:  // Use our custom hook to get memoized vehicle data
src/pages/maps/Maps.tsx:  // Handle vehicle selection from table - memoize to prevent unnecessary recreations
src/pages/maps/Maps.tsx:  // Handle vehicle change from dropdown - memoize to prevent unnecessary recreations
src/pages/maps/Maps.tsx:      {/* Map Controls Card */}
src/pages/maps/Maps.tsx:      {/* Main Map Card */}
src/pages/maps/Maps.tsx:              initialCenter={{ lat: -22.5597, lng: 17.0832 }} // Default to Windhoek
src/pages/maps/Maps.tsx:      {/* Active Vehicles Card */}
src/pages/maps/Maps.tsx:                {/* Only render visible vehicles (top 10) to improve performance */}
src/pages/maps/Maps.tsx:                  // Memoize these values to prevent recalculation on each render
src/pages/maps/MapsSuitePage.tsx:/**
src/pages/maps/MapsSuitePage.tsx:  // For Fleet tab (GeoJSON) — shows on right info panel
src/pages/maps/MapsSuitePage.tsx:      {/* Header */}
src/pages/maps/MapsSuitePage.tsx:            href="https://hosting.wialon.com/"
src/pages/maps/MapsSuitePage.tsx:      {/* Tabs - Scrollable horizontally on mobile */}
src/pages/maps/MapsSuitePage.tsx:      {/* Body */}
src/pages/maps/MapsSuitePage.tsx:        {/* Main content */}
src/pages/maps/MapsSuitePage.tsx:                  {/* Example defaults – tweak as needed */}
src/pages/maps/MapsSuitePage.tsx:                    height="calc(100vh - 12rem)" // Adjusted for mobile
src/pages/maps/MapsSuitePage.tsx:                    center={{ lat: -25.7479, lng: 28.2293 }} // Pretoria
src/pages/maps/MapsSuitePage.tsx:                    showStreetViewControl={window.innerWidth > 640} // Hide on small screens
src/pages/maps/MapsSuitePage.tsx:                    showRoutes={false} // flip to true if you pass 2+ locations
src/pages/maps/MapsSuitePage.tsx:                  {/* Show WialonMapComponent on desktop, hidden on mobile */}
src/pages/maps/MapsSuitePage.tsx:                  {/* Show WialonMobileView on mobile, hidden on desktop */}
src/pages/maps/MapsSuitePage.tsx:        {/* Bottom panel on mobile, right panel on desktop */}
src/pages/maps/MapsSuitePage.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/maps/MapsSuitePage.tsx:        {/* Right info panel – only meaningful for Fleet (GeoJSON), visible on desktop */}
src/pages/maps/MapsDashboardPage.tsx:/**
src/pages/maps/MapsDashboardPage.tsx:  // Simple derived label for the info panel
src/pages/maps/MapsDashboardPage.tsx:      {/* Page header */}
src/pages/maps/MapsDashboardPage.tsx:            href="https://hosting.wialon.com/"
src/pages/maps/MapsDashboardPage.tsx:      {/* Tabs */}
src/pages/maps/MapsDashboardPage.tsx:      {/* Content area */}
src/pages/maps/MapsDashboardPage.tsx:        {/* Main map area */}
src/pages/maps/MapsDashboardPage.tsx:                  {/* Note: WialonMapComponent internally uses full-height layout; we let it scroll if taller */}
src/pages/maps/MapsDashboardPage.tsx:        {/* Right info panel (contextual; shows Fleet selection details) */}
src/pages/maps/MyMapPage.tsx:/**
src/pages/maps/MyMapPage.tsx:  // For Fleet tab (GeoJSON) — shows on right info panel
src/pages/maps/MyMapPage.tsx:      {/* Header */}
src/pages/maps/MyMapPage.tsx:            href="https://hosting.wialon.com/"
src/pages/maps/MyMapPage.tsx:      {/* Tabs */}
src/pages/maps/MyMapPage.tsx:      {/* Body */}
src/pages/maps/MyMapPage.tsx:        {/* Main content */}
src/pages/maps/MyMapPage.tsx:                  {/* Example defaults – tweak as needed */}
src/pages/maps/MyMapPage.tsx:                    center={{ lat: -25.7479, lng: 28.2293 }} // Pretoria
src/pages/maps/MyMapPage.tsx:                    showRoutes={false} // flip to true if you pass 2+ locations
src/pages/maps/MyMapPage.tsx:        {/* Right info panel – only meaningful for Fleet (GeoJSON) */}
src/pages/MapDashboard.tsx:// --- CONSTANTS ---
src/pages/MapDashboard.tsx:// --- MAIN COMPONENT ---
src/pages/MapDashboard.tsx:  // --- VEHICLE DATA LOADING ---
src/pages/MapDashboard.tsx:  // --- FILTER VEHICLES ---
src/pages/MapDashboard.tsx:      {/* SIDEBAR */}
src/pages/MapDashboard.tsx:      {/* MAP AREA */}
src/pages/clients/CustomerReports.tsx:  relationshipLength: number; // in days
src/pages/clients/CustomerReports.tsx:  tripFrequency: number; // average days between trips
src/pages/clients/CustomerReports.tsx:  onTimeDeliveryRate: number; // percentage
src/pages/clients/CustomerReports.tsx:  // Get the selected client
src/pages/clients/CustomerReports.tsx:  // Calculate metrics for the selected client
src/pages/clients/CustomerReports.tsx:    // Filter trips for this client
src/pages/clients/CustomerReports.tsx:    // Sort trips by date (oldest to newest by start date)
src/pages/clients/CustomerReports.tsx:    // Find the first trip (oldest) and most recent trip
src/pages/clients/CustomerReports.tsx:    // Guard against undefined trips
src/pages/clients/CustomerReports.tsx:    // Calculate metrics
src/pages/clients/CustomerReports.tsx:    // Calculate relationship length
src/pages/clients/CustomerReports.tsx:    // Determine revenue trend
src/pages/clients/CustomerReports.tsx:      // Ensure all trips exist before comparing
src/pages/clients/CustomerReports.tsx:    // Calculate average days between trips
src/pages/clients/CustomerReports.tsx:        onTimeDeliveryRate: 0.95, // Placeholder - would be calculated in a real implementation
src/pages/clients/CustomerReports.tsx:      onTimeDeliveryRate: 0, // Placeholder
src/pages/clients/CustomerReports.tsx:  // Get top clients by revenue
src/pages/clients/CustomerReports.tsx:    // Group trips by client name
src/pages/clients/CustomerReports.tsx:      // Safely add revenue - we know it exists because we just created it if it didn't
src/pages/clients/CustomerReports.tsx:    // Convert to array and sort
src/pages/clients/CustomerReports.tsx:  // Determine the retention status
src/pages/clients/CustomerReports.tsx:      {/* Analytics Header */}
src/pages/clients/CustomerReports.tsx:          {/* Key Metrics */}
src/pages/clients/CustomerReports.tsx:          {/* Client Performance Insights */}
src/pages/clients/CustomerReports.tsx:                {/* Trip Metrics */}
src/pages/clients/CustomerReports.tsx:                  {/* Most Recent Trip */}
src/pages/clients/CustomerReports.tsx:                {/* Recommendations */}
src/pages/clients/CustomerReports.tsx:                    {/* Revenue Trend Recommendation */}
src/pages/clients/CustomerReports.tsx:          {/* Top Clients Overview when no client is selected */}
src/pages/clients/ActiveCustomers.tsx:  // Filter and sort clients
src/pages/clients/ActiveCustomers.tsx:  // Apply sorting
src/pages/clients/ActiveCustomers.tsx:    // Handle nested fields or fields that might be undefined
src/pages/clients/ActiveCustomers.tsx:    // Convert to strings for comparison
src/pages/clients/ActiveCustomers.tsx:  // Handle sort toggle
src/pages/clients/ActiveCustomers.tsx:  // Handle filter change
src/pages/clients/ActiveCustomers.tsx:  // Clear all filters
src/pages/clients/ActiveCustomers.tsx:  // Get status class for badge
src/pages/clients/ActiveCustomers.tsx:  // Get currency symbol
src/pages/clients/ActiveCustomers.tsx:      {/* Filters */}
src/pages/clients/ActiveCustomers.tsx:      {/* Client List */}
src/pages/clients/ClientManagementPageIntegrated.tsx:// Mock data for clients
src/pages/clients/ClientManagementPageIntegrated.tsx:      {/* Header */}
src/pages/clients/ClientManagementPageIntegrated.tsx:      {/* Search + Filters */}
src/pages/clients/ClientManagementPageIntegrated.tsx:            {/* Search */}
src/pages/clients/ClientManagementPageIntegrated.tsx:            {/* Status Filter */}
src/pages/clients/ClientManagementPageIntegrated.tsx:            {/* Industry Filter */}
src/pages/clients/ClientManagementPageIntegrated.tsx:      {/* Client List */}
src/pages/clients/ClientManagementPageIntegrated.tsx:      {/* Client Form Modal */}
src/pages/clients/AddNewCustomer.tsx:      // This would be replaced with actual API or Firestore call
src/pages/clients/AddNewCustomer.tsx:      // Simulate API call
src/pages/clients/AddNewCustomer.tsx:                  // With stringMode enabled parser returns the cleaned string.
src/pages/clients/CustomerDashboard.tsx:/**
src/pages/clients/CustomerDashboard.tsx:  // Mock data for customer metrics
src/pages/clients/CustomerDashboard.tsx:  // Mock data for recent customers
src/pages/clients/CustomerDashboard.tsx:      {/* Customer Metrics */}
src/pages/clients/CustomerDashboard.tsx:      {/* Customer Overview and Quick Actions */}
src/pages/clients/CustomerDashboard.tsx:          {/* Chart placeholder */}
src/pages/clients/CustomerDashboard.tsx:      {/* Recent Customers */}
src/pages/clients/CustomerDashboard.tsx:      {/* Customer Retention and Satisfaction */}
src/pages/clients/CustomerDashboard.tsx:          {/* Chart placeholder */}
src/pages/clients/CustomerDashboard.tsx:          {/* Chart placeholder */}
src/pages/clients/ClientDetail.tsx:  // Get client status label
src/pages/clients/ClientDetail.tsx:  // Get client type label
src/pages/clients/ClientDetail.tsx:  // Get status badge class
src/pages/clients/ClientDetail.tsx:  // Calculate client metrics
src/pages/clients/ClientDetail.tsx:    // Filter trips for this client
src/pages/clients/ClientDetail.tsx:    // Calculate revenue
src/pages/clients/ClientDetail.tsx:    // Calculate trip counts by status
src/pages/clients/ClientDetail.tsx:    // Calculate invoiced amount and paid amount
src/pages/clients/ClientDetail.tsx:    // Calculate outstanding amount
src/pages/clients/ClientDetail.tsx:    // Calculate last trip date
src/pages/clients/ClientDetail.tsx:  // Handle client deletion
src/pages/clients/ClientDetail.tsx:    // Here you would implement the actual deletion logic
src/pages/clients/ClientDetail.tsx:    // For example, calling an API or dispatching an action
src/pages/clients/ClientDetail.tsx:    // Close the modal after deletion
src/pages/clients/ClientDetail.tsx:    // You might want to redirect the user after deletion
src/pages/clients/ClientDetail.tsx:    // or show a success message
src/pages/clients/ClientDetail.tsx:      {/* Delete Confirmation Modal */}
src/pages/clients/ClientDetail.tsx:      {/* Client Header Card */}
src/pages/clients/ClientDetail.tsx:      {/* Client Metrics */}
src/pages/clients/ClientDetail.tsx:        {/* Contact Information */}
src/pages/clients/ClientDetail.tsx:                          : `https://${client.website}`
src/pages/clients/ClientDetail.tsx:        {/* Address Information */}
src/pages/clients/ClientDetail.tsx:        {/* Financial Information */}
src/pages/clients/ClientDetail.tsx:      {/* Notes and Relationships */}
src/pages/clients/ClientDetail.tsx:        {/* Notes */}
src/pages/clients/ClientDetail.tsx:        {/* Relationships */}
src/pages/clients/ClientDetail.tsx:                  // Get the relationship type label
src/pages/clients/ClientManagementPage.tsx:  // These would come from context or API in a real app
src/pages/clients/CustomerRetentionDashboard.tsx:      // Calculate payment score (0-100, where 100 is best)
src/pages/clients/CustomerRetentionDashboard.tsx:      // Determine risk level
src/pages/clients/CustomerRetentionDashboard.tsx:      // Determine if profitable (top 20% by revenue)
src/pages/clients/CustomerRetentionDashboard.tsx:      const isProfitable = stats.totalRevenue > 50000; // Simplified threshold
src/pages/clients/CustomerRetentionDashboard.tsx:      // Determine if top client (top 10% by trip frequency)
src/pages/clients/CustomerRetentionDashboard.tsx:      const isTopClient = stats.trips.length >= 5; // Simplified threshold
src/pages/clients/CustomerRetentionDashboard.tsx:      {/* Header */}
src/pages/clients/CustomerRetentionDashboard.tsx:      {/* Summary Cards */}
src/pages/clients/CustomerRetentionDashboard.tsx:      {/* Filters */}
src/pages/clients/CustomerRetentionDashboard.tsx:      {/* Customer Categories */}
src/pages/clients/CustomerRetentionDashboard.tsx:        {/* Most Profitable Clients */}
src/pages/clients/CustomerRetentionDashboard.tsx:        {/* Top Repeat Clients */}
src/pages/clients/CustomerRetentionDashboard.tsx:        {/* At-Risk Clients */}
src/pages/clients/CustomerRetentionDashboard.tsx:      {/* Detailed Customer List */}
src/pages/clients/ClientNetworkMap.tsx:  // Mock data for client locations
src/pages/clients/ClientNetworkMap.tsx:  // Calculate statistics
src/pages/clients/ClientNetworkMap.tsx:  // Get unique states for filter
src/pages/WialonMapDashboard.tsx:						{/* Simple map UI: show units as a list and a placeholder map */}
src/pages/invoices/PaidInvoices.tsx:/**
src/pages/invoices/PaidInvoices.tsx:        // Create a query against the 'invoices' collection
src/pages/invoices/PaidInvoices.tsx:      {/* Loading and Error States */}
src/pages/invoices/PaidInvoices.tsx:              xmlns="http://www.w3.org/2000/svg"
src/pages/invoices/PaidInvoices.tsx:      {/* Filters */}
src/pages/invoices/PaidInvoices.tsx:      {/* Table of paid invoices */}
src/pages/invoices/PaidInvoices.tsx:          {/* Pagination */}
src/pages/invoices/PaidInvoices.tsx:      {/* Summary Section - Only show when not loading and we have data */}
src/pages/invoices/PaidInvoices.tsx:              {/* Calculation would need actual date processing logic */}
src/pages/invoices/InvoiceBuilder.tsx:  // Calculate totals for invoice
src/pages/invoices/InvoiceBuilder.tsx:  // Handle item changes
src/pages/invoices/InvoiceBuilder.tsx:      // Recalculate total for this item
src/pages/invoices/InvoiceBuilder.tsx:  // Add a new item
src/pages/invoices/InvoiceBuilder.tsx:  // Remove an item
src/pages/invoices/InvoiceBuilder.tsx:  // Handle discount changes
src/pages/invoices/InvoiceBuilder.tsx:  // Handle field changes
src/pages/invoices/InvoiceBuilder.tsx:  // Handle customer selection
src/pages/invoices/InvoiceBuilder.tsx:  // Load template
src/pages/invoices/InvoiceBuilder.tsx:  // Save invoice
src/pages/invoices/InvoiceBuilder.tsx:  // Handlers to use setCustomers and setTemplates so they are "read"
src/pages/invoices/InvoiceBuilder.tsx:      {/* Icon Info Bar - Shows all imported icons in use */}
src/pages/invoices/InvoiceBuilder.tsx:      {/* Reset buttons to use setters */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Invoice Details Card */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Invoice Items Card */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Additional Info Card */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Summary Card */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Templates Card */}
src/pages/invoices/InvoiceBuilder.tsx:            {/* Actions Card */}
src/pages/invoices/PendingInvoices.tsx:/**
src/pages/invoices/PendingInvoices.tsx:  // Mock data
src/pages/invoices/PendingInvoices.tsx:      {/* Filters */}
src/pages/invoices/PendingInvoices.tsx:      {/* Table of pending invoices */}
src/pages/invoices/PendingInvoices.tsx:        {/* Pagination */}
src/pages/invoices/CreateInvoicePage.tsx:    // Guard index access and provide a default shape
src/pages/invoices/CreateInvoicePage.tsx:    // Compute updated item based on the field being edited
src/pages/invoices/CreateInvoicePage.tsx:      total: 0, // recalc below
src/pages/invoices/CreateInvoicePage.tsx:    // Recalculate total for this item
src/pages/invoices/CreateInvoicePage.tsx:    // Update all calculated fields
src/pages/invoices/CreateInvoicePage.tsx:    const vat = subtotal * 0.15; // 15% VAT
src/pages/invoices/CreateInvoicePage.tsx:      // Recalculate totals
src/pages/invoices/PaidInvoicesPage.tsx:// Import Ant Design components directly
src/pages/invoices/PaidInvoicesPage.tsx:// Extract nested components
src/pages/invoices/PaidInvoicesPage.tsx:    // Simulate fetching data from API or Firestore
src/pages/invoices/PaidInvoicesPage.tsx:        // This would be replaced with actual API or Firestore fetch
src/pages/invoices/PaidInvoicesPage.tsx:    // Implement download logic
src/pages/invoices/PaidInvoicesPage.tsx:    // Implement print logic
src/pages/invoices/PaidInvoicesPage.tsx:  // Define the columns with proper type
src/pages/invoices/PaidInvoicesPage.tsx:  // Use 'as any' to bypass TypeScript error temporarily - we'll fix the underlying issue
src/pages/invoices/PaidInvoicesPage.tsx:      // Use any type to bypass TypeScript error
src/pages/invoices/PaidInvoicesPage.tsx:  ] as any; // Use type assertion to bypass TypeScript error
src/pages/invoices/CreateQuotePage.tsx:    const vat = rate * 0.15; // 15% VAT
src/pages/invoices/PendingInvoicesPage.tsx:// Import Typography components directly
src/pages/invoices/PendingInvoicesPage.tsx:    // Simulate fetching data from API or Firestore
src/pages/invoices/PendingInvoicesPage.tsx:        // This would be replaced with actual API or Firestore fetch
src/pages/invoices/PendingInvoicesPage.tsx:    // Implement approve logic
src/pages/invoices/PendingInvoicesPage.tsx:  // Define the columns with proper type
src/pages/invoices/PendingInvoicesPage.tsx:  // Use 'as any' to bypass TypeScript error temporarily
src/pages/invoices/PendingInvoicesPage.tsx:  ] as any; // Use type assertion to bypass TypeScript error
src/pages/FormsIntegrationPage.tsx:// src/pages/FormsIntegrationPage.tsx
src/pages/FormsIntegrationPage.tsx:/**
src/pages/FormsIntegrationPage.tsx:  // Success messages
src/pages/FormsIntegrationPage.tsx:  // Show a success message for a specific form
src/pages/FormsIntegrationPage.tsx:    // Clear message after 5 seconds
src/pages/FormsIntegrationPage.tsx:  // Handle form submissions
src/pages/FormsIntegrationPage.tsx:        {/* Connection status */}
src/pages/FormsIntegrationPage.tsx:      {/* Navigation tabs */}
src/pages/FormsIntegrationPage.tsx:      {/* Success messages */}
src/pages/FormsIntegrationPage.tsx:      {/* Form content based on active tab */}
src/pages/diesel/FuelTheftDetection.tsx:  // Mock data for alerts
src/pages/diesel/FuelTheftDetection.tsx:  // Mock data for theft patterns
src/pages/diesel/DieselDashboard.tsx:// Simulated functions that will need to be added to AppContext
src/pages/diesel/DieselDashboard.tsx:  // This would be implemented in AppContext
src/pages/diesel/DieselDashboard.tsx:  // This would be implemented in AppContext
src/pages/diesel/DieselDashboard.tsx:  // Sync context will be used with SyncIndicator component if needed
src/pages/diesel/DieselDashboard.tsx:  // Load diesel records on mount
src/pages/diesel/DieselDashboard.tsx:  // Map base DieselConsumptionRecord to ExtendedDieselConsumptionRecord
src/pages/diesel/DieselDashboard.tsx:      vehicleId: record.fleetNumber, // Map fleetNumber to vehicleId
src/pages/diesel/DieselDashboard.tsx:      timestamp: record.date, // Map date to timestamp
src/pages/diesel/DieselDashboard.tsx:      liters: record.litresFilled, // Map litresFilled to liters
src/pages/diesel/DieselDashboard.tsx:      cost: record.totalCost, // Map totalCost to cost
src/pages/diesel/DieselDashboard.tsx:      location: record.fuelStation, // Map fuelStation to location
src/pages/diesel/DieselDashboard.tsx:      odometer: record.kmReading, // Map kmReading to odometer
src/pages/diesel/DieselDashboard.tsx:      verified: record.probeVerified || false, // Map probeVerified to verified
src/pages/diesel/DieselDashboard.tsx:      flagged: false, // Default for flagged
src/pages/diesel/DieselDashboard.tsx:  // Filter and sort records
src/pages/diesel/DieselDashboard.tsx:    // First map to extended records
src/pages/diesel/DieselDashboard.tsx:        // Filter by selected vehicles
src/pages/diesel/DieselDashboard.tsx:        // Filter by search term
src/pages/diesel/DieselDashboard.tsx:        // Filter by date range
src/pages/diesel/DieselDashboard.tsx:          // Special case for dates
src/pages/diesel/DieselDashboard.tsx:          // General case for other fields
src/pages/diesel/DieselDashboard.tsx:          // Cast to any to avoid type issues with accessing dynamic properties
src/pages/diesel/DieselDashboard.tsx:  // Handle sorting
src/pages/diesel/DieselDashboard.tsx:  // Get unique vehicles for filtering
src/pages/diesel/DieselDashboard.tsx:  // This was previously used with the FleetSelector but is now commented out since we updated to use
src/pages/diesel/DieselDashboard.tsx:  // the value/onChange pattern instead of selectedVehicles/availableVehicles
src/pages/diesel/DieselDashboard.tsx:  /*
src/pages/diesel/DieselDashboard.tsx:  // Handle vehicle selection
src/pages/diesel/DieselDashboard.tsx:  // Handle record deletion
src/pages/diesel/DieselDashboard.tsx:  // Handle Wialon sync
src/pages/diesel/DieselDashboard.tsx:  // Handle record edit
src/pages/diesel/DieselDashboard.tsx:  // Handle trip linkage
src/pages/diesel/DieselDashboard.tsx:  // Handle debrief
src/pages/diesel/DieselDashboard.tsx:  // Handle probe verification
src/pages/diesel/DieselDashboard.tsx:  // (removed unused formatNumber helper)
src/pages/diesel/DieselDashboard.tsx:          norms={[]} // Add empty norms array
src/pages/diesel/DieselDashboard.tsx:          records={[selectedRecord]} // Changed from record to records array
src/pages/diesel/DieselDashboard.tsx:          norms={[]} // Added required norms prop
src/pages/diesel/DieselDashboard.tsx:          dieselRecordId={selectedRecord.id} // Changed from dieselRecord to dieselRecordId
src/pages/diesel/DieselDashboard.tsx:          dieselRecordId={selectedRecord.id} // Changed from record to dieselRecordId
src/pages/diesel/FuelStations.tsx:  lastUpdated: string; // ISO string for UI display
src/pages/diesel/FuelStations.tsx:  // Firestore-backed fuel stations
src/pages/diesel/FuelStations.tsx:  // Convert raw Firebase data to FuelStation type with proper type checks
src/pages/diesel/FuelStations.tsx:  // Subscribe to Firestore collection
src/pages/diesel/FuelStations.tsx:    if (subscribing) return; // avoid double subscription
src/pages/diesel/FuelStations.tsx:  // Calculate summary statistics
src/pages/diesel/FuelLogs.tsx:  // Mock data
src/pages/diesel/FuelLogs.tsx:    // Navigate to view details
src/pages/diesel/FuelLogs.tsx:    // Navigate to edit form
src/pages/diesel/FuelLogs.tsx:    // Handle deletion (would show confirmation dialog first in a real app)
src/pages/diesel/FuelLogs.tsx:    // Export to Excel functionality
src/pages/diesel/FuelLogs.tsx:    // Export to PDF functionality
src/pages/diesel/FuelLogs.tsx:  // Filter the logs based on search text and selections
src/pages/diesel/DriverFuelBehavior.tsx:  // Mock data for demonstration
src/pages/diesel/DriverFuelBehavior.tsx:  // Handle search filter
src/pages/diesel/DriverFuelBehavior.tsx:  // Handle sorting
src/pages/diesel/DriverFuelBehavior.tsx:    // For string fields
src/pages/diesel/DriverFuelBehavior.tsx:  // Handle sort change
src/pages/diesel/DriverFuelBehavior.tsx:      setSortOrder("desc"); // Default to descending for new sort field
src/pages/diesel/DriverFuelBehavior.tsx:  // Get score color class
src/pages/diesel/DriverFuelBehavior.tsx:  // Get trend indicator
src/pages/diesel/DieselDashboardComponent.tsx:// Mock data is defined but will be used in future chart implementations
src/pages/diesel/DieselDashboardComponent.tsx:// We're keeping these variables commented out for reference
src/pages/diesel/DieselDashboardComponent.tsx:/*
src/pages/diesel/DieselDashboardComponent.tsx:// Mock alerts data
src/pages/diesel/DieselDashboardComponent.tsx:  // These would come from context or API in a real app
src/pages/diesel/FuelEfficiencyReport.tsx:  // Mock data
src/pages/diesel/FuelEfficiencyReport.tsx:  // Calculate summary statistics
src/pages/diesel/DieselAnalysis.tsx:  // Defensive: Accept possibly undefined fields everywhere
src/pages/diesel/DieselAnalysis.tsx:    // Group by date to calculate avg per day
src/pages/diesel/DieselAnalysis.tsx:    // Calculate average km per litre for non-reefer units
src/pages/diesel/DieselAnalysis.tsx:    // Group by fleet for fleet consumption analysis
src/pages/diesel/DieselAnalysis.tsx:      if (!fleetNum) return; // Skip if empty
src/pages/diesel/DieselAnalysis.tsx:    // Group by month for trend analysis
src/pages/diesel/DieselAnalysis.tsx:    // Calculate average cost per litre
src/pages/diesel/DieselAnalysis.tsx:    // Calculate percentage of reefer usage
src/pages/diesel/DieselAnalysis.tsx:    // Calculate average litres per hour for reefer units
src/pages/diesel/DieselAnalysis.tsx:  // Top 5 fleets by consumption
src/pages/diesel/DieselAnalysis.tsx:  // Last 6 months
src/pages/diesel/DieselAnalysis.tsx:  // Defensive: Accept undefined and handle safely
src/pages/diesel/DieselAnalysis.tsx:            // In a real implementation, this would export data to CSV/Excel
src/pages/diesel/DieselAnalysis.tsx:      {/* Date Range Filter */}
src/pages/diesel/DieselAnalysis.tsx:      {/* Summary Stats */}
src/pages/diesel/DieselAnalysis.tsx:      {/* Fleet Consumption Chart */}
src/pages/diesel/DieselAnalysis.tsx:      {/* Efficiency Analysis */}
src/pages/diesel/AddFuelEntryPageWrapper.tsx:      // Here you would normally submit to Firebase/Firestore
src/pages/diesel/AddFuelEntryPageWrapper.tsx:      await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
src/pages/diesel/DieselIntegratedPage.tsx:    // Here you would submit to Firebase/Firestore
src/pages/diesel/DieselIntegratedPage.tsx:              {/* Dashboard content */}
src/pages/diesel/DieselIntegratedPage.tsx:              {/* Vehicle content */}
src/pages/diesel/DieselIntegratedPage.tsx:              {/* Analytics content */}
src/pages/diesel/DieselManagementPage.tsx:  tolerancePercentage: number; // e.g., 10% = 10
src/pages/diesel/DieselManagementPage.tsx:  // Calculate enhanced metrics for each record
src/pages/diesel/DieselManagementPage.tsx:    // Calculate distance travelled if not provided
src/pages/diesel/DieselManagementPage.tsx:    // Calculate KM/L if not provided
src/pages/diesel/DieselManagementPage.tsx:    // Calculate cost per KM
src/pages/diesel/DieselManagementPage.tsx:    // Calculate cost per litre if not provided
src/pages/diesel/DieselManagementPage.tsx:    // Performance analysis
src/pages/diesel/DieselManagementPage.tsx:    // Flag for debrief if outside tolerance
src/pages/diesel/DieselManagementPage.tsx:    // Get linked trip info if available
src/pages/diesel/DieselManagementPage.tsx:    // Check if truck has probe
src/pages/diesel/DieselManagementPage.tsx:    // Calculate probe discrepancy
src/pages/diesel/DieselManagementPage.tsx:    // Determine if probe verification is needed
src/pages/diesel/DieselManagementPage.tsx:      currency: record.currency || "ZAR", // Default to ZAR if not specified
src/pages/diesel/DieselManagementPage.tsx:  // Apply filters
src/pages/diesel/DieselManagementPage.tsx:      // Ensure currency is either ZAR or USD
src/pages/diesel/DieselManagementPage.tsx:      // Calculate derived values
src/pages/diesel/DieselManagementPage.tsx:      // Calculate probe discrepancy if applicable
src/pages/diesel/DieselManagementPage.tsx:        currency, // Always set currency
src/pages/diesel/DieselManagementPage.tsx:  // Calculate fleet summary
src/pages/diesel/DieselManagementPage.tsx:      // Track by currency
src/pages/diesel/DieselManagementPage.tsx:  // Calculated but not used in this component
src/pages/diesel/DieselManagementPage.tsx:  // const averageCostPerKm =
src/pages/diesel/DieselManagementPage.tsx:  //   fleetSummary.totalDistance > 0 ? fleetSummary.totalCost / fleetSummary.totalDistance : 0;
src/pages/diesel/DieselManagementPage.tsx:  // Get unique drivers and fleets for filters
src/pages/diesel/DieselManagementPage.tsx:      {/* Header */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Connection Status Warning */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Probe Verification Alert */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Fleet Summary Cards */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Filters */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Performance Summary */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Records List */}
src/pages/diesel/DieselManagementPage.tsx:      {/* Modals */}
src/pages/diesel/FuelCardManager.tsx:  // Handler for adding a new card
src/pages/diesel/FuelCardManager.tsx:    // In a real implementation, this would open a modal or navigate to a form
src/pages/diesel/FuelCardManager.tsx:    // This would be replaced with actual implementation
src/pages/diesel/FuelCardManager.tsx:  // State for fuel cards
src/pages/diesel/FuelCardManager.tsx:  // Mock data for demonstration
src/pages/diesel/FuelCardManager.tsx:    // In a real implementation, this would fetch from Firestore
src/pages/diesel/FuelCardManager.tsx:  // Filter cards when search term or status filter changes
src/pages/diesel/FuelCardManager.tsx:    // Apply search term filter
src/pages/diesel/FuelCardManager.tsx:    // Apply status filter
src/pages/diesel/FuelCardManager.tsx:  // Format date for display
src/pages/diesel/FuelCardManager.tsx:  // Get status badge style
src/pages/diesel/FuelCardManager.tsx:      {/* Filters */}
src/pages/diesel/FuelCardManager.tsx:      {/* Fuel Cards Table */}
src/pages/diesel/BudgetPlanning.tsx:    if (percentage >= 85) return "normal"; // Changed from 'warning' as it's not a valid status
src/pages/diesel/BudgetPlanning.tsx:  // Calculate summary statistics
src/pages/diesel/CarbonFootprintCalc.tsx:          {/* This would be a chart in a real implementation */}
src/pages/diesel/CostAnalysis.tsx:  // Mock cost data
src/pages/diesel/CostAnalysis.tsx:  // Mock trip cost data
src/pages/diesel/CostAnalysis.tsx:  // Format currency
src/pages/diesel/CostAnalysis.tsx:      {/* Cost Summary Cards */}
src/pages/diesel/CostAnalysis.tsx:      {/* Cost Breakdown Chart */}
src/pages/diesel/CostAnalysis.tsx:      {/* Trip Cost Analysis Table */}
src/pages/diesel/CostAnalysis.tsx:      {/* Cost Saving Opportunities */}
src/pages/diesel/AddFuelEntryPage.tsx:  // Display a calendar view for reference (using the imported Calendar component)
src/pages/diesel/AddFuelEntryPage.tsx:  // Display a truck icon with vehicle information
src/pages/diesel/AddFuelEntryPage.tsx:        {/* Use the Truck component */}
src/pages/diesel/AddFuelEntryPage.tsx:          {/* Add Calendar component for date reference */}
src/pages/wialon/WialonMapDashboard.tsx:// Build Wialon direct URL from environment (token injected at build time)
src/pages/wialon/WialonMapDashboard.tsx:  ? `https://hosting.wialon.com/?token=${encodeURIComponent(WIALON_TOKEN)}&lang=en`
src/pages/wialon/WialonMapDashboard.tsx:// === FUNKSIE OM DIREK IN WIALON TE OPEN ===
src/pages/wialon/WialonMapDashboard.tsx:// === HOOF KOMPONENT ===
src/pages/wialon/WialonMapDashboard.tsx:  // Jou ander state/effects soos voorheen...
src/pages/wialon/WialonMapDashboard.tsx:  // Jy kan jou kaart/effects ens hierby voeg soos gewoonlik
src/pages/wialon/WialonMapDashboard.tsx:      {/* Title row */}
src/pages/wialon/WialonMapDashboard.tsx:        {/* Die Wialon Dashboard knoppie */}
src/pages/wialon/WialonMapDashboard.tsx:      {/* Ander dashboard inhoud */}
src/pages/wialon/WialonMapDashboard.tsx:        {/* Sidebar */}
src/pages/wialon/WialonMapDashboard.tsx:        {/* Map area */}
src/pages/wialon/WialonMapComponent.tsx:    // Using the proper Wialon type that's already defined in wialon-sdk.d.ts
src/pages/wialon/WialonMapComponent.tsx:    // Create map
src/pages/wialon/WialonMapComponent.tsx:    // Add OpenStreetMap tile layer as fallback
src/pages/wialon/WialonMapComponent.tsx:    window.L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
src/pages/wialon/WialonMapComponent.tsx:        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
src/pages/wialon/WialonMapComponent.tsx:        // Clear existing options
src/pages/wialon/WialonMapComponent.tsx:    // Load external dependencies
src/pages/wialon/WialonMapComponent.tsx:        // Load Leaflet CSS
src/pages/wialon/WialonMapComponent.tsx:        loadCSS("https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.css");
src/pages/wialon/WialonMapComponent.tsx:        // Load jQuery
src/pages/wialon/WialonMapComponent.tsx:        await loadScript("https://code.jquery.com/jquery-latest.min.js");
src/pages/wialon/WialonMapComponent.tsx:        // Load Leaflet
src/pages/wialon/WialonMapComponent.tsx:        await loadScript("https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.js");
src/pages/wialon/WialonMapComponent.tsx:        // Load Wialon SDK
src/pages/wialon/WialonMapComponent.tsx:          "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en/wsdk/script/wialon.js"
src/pages/wialon/WialonMapComponent.tsx:        // Initialize Wialon session
src/pages/wialon/WialonMapComponent.tsx:          "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en"
src/pages/wialon/WialonMapComponent.tsx:        // Login with token
src/pages/wialon/WialonMapComponent.tsx:    // Cleanup
src/pages/wialon/WialonUnitsPage.tsx:/**
src/pages/wialon/WialonUnitsPage.tsx:  // Retrieve Wialon units, loading and error state from provider
src/pages/wialon/WialonUnitsPage.tsx:                      href={`https://hosting.wialon.com/track.html?unit=${selectedUnit.id}`}
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:const db = {}; // Mock Firestore DB
src/pages/wialon/WialonAdminPage.tsx:const WIALON_API_URL = "https://hosting.wialon.com/?token=[VITE-WIALON-TOKEN]&lang=en";
src/pages/wialon/WialonAdminPage.tsx:  "https://hosting.wialon.com/?token=c1099bc37c906fd0832d8e783b60ae0dD9D1A721B294486AC08F8AA3ACAC2D2FD45FF053&lang=en";
src/pages/wialon/WialonAdminPage.tsx:  last_message?: number; // unix seconds
src/pages/wialon/WialonAdminPage.tsx:  connection_state?: number; // 1 online, 0 offline
src/pages/wialon/WialonAdminPage.tsx:    void _docId; // mark as used
src/pages/wialon/WialonAdminPage.tsx:        baseUrl: "https://hosting.wialon.com/",
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:  // unreachable due to union type, but satisfies exhaustive checks
src/pages/wialon/WialonAdminPage.tsx:    // Typed sort
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:    baseUrl: "https://hosting.wialon.com/",
src/pages/wialon/WialonAdminPage.tsx:          placeholder="https://hosting.wialon.com/"
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:            attribution='&copy; <a href="https://osm.org/copyright">OpenStreetMap</a> contributors'
src/pages/wialon/WialonAdminPage.tsx:            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
src/pages/wialon/WialonAdminPage.tsx:/* ----------------------------------------------------------------
src/pages/wialon/WialonAdminPage.tsx:// forward declaration removed (component already defined above)
src/pages/wialon/WialonAdminPage.tsx:        {/* Header */}
src/pages/wialon/WialonAdminPage.tsx:        {/* Company selection */}
src/pages/wialon/WialonAdminPage.tsx:        {/* Status & Config */}
src/pages/wialon/WialonAdminPage.tsx:        {/* Management */}
src/pages/wialon/WialonAdminPage.tsx:        {/* Info */}
src/pages/wialon/WialonConfigPage.tsx:/**
src/pages/wialon/WialonConfigPage.tsx:        // Dynamically import Firebase modules
src/pages/wialon/WialonDashboard.tsx:// Helper function to render a single unit item in the sidebar list
src/pages/wialon/WialonDashboard.tsx:    // Replace with your real Wialon token
src/pages/wialon/WialonDashboard.tsx:    // Placeholder for map state and instance
src/pages/wialon/WialonDashboard.tsx:    // Placeholder for a detailed info panel for the selected unit
src/pages/wialon/WialonDashboard.tsx:                 <div id="map" ref={node => setMap(node)}></div> {/* Leaflet map mount point */}
src/pages/wialon/WialonDashboard.tsx:            {/* These components are mounted but not rendered in the DOM directly */}
src/pages/wialon/WialonDashboard.tsx:            {/* They perform side effects on the map instance */}
src/pages/wialon/FleetLiveDashboard.tsx:  /**
src/pages/wialon/FleetLiveDashboard.tsx:  /** Live events */
src/pages/wialon/FleetLiveDashboard.tsx:  /** Save selected unit to user prefs */
src/pages/wialon/FleetLiveDashboard.tsx:      {/* Unit selector */}
src/pages/wialon/FleetLiveDashboard.tsx:      {/* Show errors if any */}
src/pages/wialon/FleetLiveDashboard.tsx:      {/* Live sensor data */}
src/pages/wialon/FleetLiveDashboard.tsx:      {/* Fuel Parameter Updater */}
src/pages/wialon/FleetLiveDashboard.tsx:      {/* 24-hour events table */}
src/pages/qc/ActionLog.tsx:  // Form state
src/pages/qc/ActionLog.tsx:  // Calculate overdue status and days for each action item
src/pages/qc/ActionLog.tsx:      // Check if overdue by 5 or 10 days
src/pages/qc/ActionLog.tsx:  // Apply filters
src/pages/qc/ActionLog.tsx:  // Sort items: first by status (incomplete first), then by due date (overdue first)
src/pages/qc/ActionLog.tsx:      // Completed items at the bottom
src/pages/qc/ActionLog.tsx:      // Then sort by due date (overdue first)
src/pages/qc/ActionLog.tsx:      // Then by due date (earliest first)
src/pages/qc/ActionLog.tsx:  // Calculate summary statistics
src/pages/qc/ActionLog.tsx:  // Handle form changes
src/pages/qc/ActionLog.tsx:    // Clear error for this field
src/pages/qc/ActionLog.tsx:  // Validate form
src/pages/qc/ActionLog.tsx:    // Validate due date is not in the past
src/pages/qc/ActionLog.tsx:  // Handle form submission
src/pages/qc/ActionLog.tsx:  // Add action item
src/pages/qc/ActionLog.tsx:    // Reset form and close modal
src/pages/qc/ActionLog.tsx:  // Reset form
src/pages/qc/ActionLog.tsx:  // Handle adding overdue reason
src/pages/qc/ActionLog.tsx:  // Handle status change
src/pages/qc/ActionLog.tsx:    // If marking as completed, add completion date and user
src/pages/qc/ActionLog.tsx:      updates.completedBy = "Current User"; // In a real app, use the logged-in user
src/pages/qc/ActionLog.tsx:  // Handle delete action item
src/pages/qc/ActionLog.tsx:  // Handle view details
src/pages/qc/ActionLog.tsx:  // Get status badge class
src/pages/qc/ActionLog.tsx:      {/* Header */}
src/pages/qc/ActionLog.tsx:      {/* Summary Cards */}
src/pages/qc/ActionLog.tsx:      {/* Filters */}
src/pages/qc/ActionLog.tsx:      {/* Action Items List */}
src/pages/qc/ActionLog.tsx:                      {/* Overdue Reason Input for items overdue by 10+ days */}
src/pages/qc/ActionLog.tsx:                      {/* Comments count */}
src/pages/qc/ActionLog.tsx:                      {/* Attachments count */}
src/pages/qc/ActionLog.tsx:      {/* Add Action Item Modal */}
src/pages/qc/ActionLog.tsx:      {/* Action Item Details Modal */}
src/pages/qc/ComplianceDashboard.tsx:/**
src/pages/qc/ComplianceDashboard.tsx:  // Mock data for compliance metrics
src/pages/qc/ComplianceDashboard.tsx:  // Mock data for recent incidents
src/pages/qc/ComplianceDashboard.tsx:      {/* Compliance Summary Cards */}
src/pages/qc/ComplianceDashboard.tsx:      {/* Recent Incidents */}
src/pages/qc/ComplianceDashboard.tsx:      {/* Upcoming Compliance Tasks */}
src/pages/qc/QAReviewPanel.tsx:  // Calculate stats
src/pages/qc/QAReviewPanel.tsx:          {/* QA Stats */}
src/pages/qc/QAReviewPanel.tsx:          {/* Tasks awaiting verification */}
src/pages/qc/QAReviewPanel.tsx:          {/* Task History */}
src/pages/qc/QAReviewPanel.tsx:                  // Get the task information
src/pages/mobile/TyreMobilePage.tsx:    // If tyreId is provided, fetch and select that specific tyre
src/pages/mobile/TyreMobilePage.tsx:      // First try to find the tyre in the already loaded tyres
src/pages/mobile/TyreMobilePage.tsx:        // If in list mode, switch to inspection mode for the selected tyre
src/pages/mobile/TyreMobilePage.tsx:        // If not found in the current list, fetch it directly
src/pages/mobile/TyreMobilePage.tsx:        // Import getDoc at the top of the file if not already imported
src/pages/mobile/TyreMobilePage.tsx:          // If in list mode, switch to inspection mode for the selected tyre
src/pages/mobile/TyreMobilePage.tsx:    // Navigate to detailed view or open modal
src/pages/mobile/TyreMobilePage.tsx:        // Start inspection for new tyre
src/pages/mobile/TyreMobilePage.tsx:      // Save inspection to Firebase
src/pages/mobile/TyreMobilePage.tsx:      // Update tyre's last inspection date
src/pages/mobile/TyreMobilePage.tsx:      // Refresh tyres list
src/pages/mobile/TyreMobilePage.tsx:      // Return to list view
src/pages/mobile/TyreMobilePage.tsx:        // Update existing tyre
src/pages/mobile/TyreMobilePage.tsx:        // Add new tyre
src/pages/mobile/TyreMobilePage.tsx:      // Refresh tyres list
src/pages/mobile/TyreMobilePage.tsx:      // Close modal
src/pages/mobile/TyreMobilePage.tsx:            {/* Bottom navigation - only show in list mode */}
src/pages/mobile/TyreMobilePage.tsx:      {/* Add/Edit Tyre Modal */}
src/pages/mobile/TyreMobilePage.tsx:      {/* Mobile-specific styles */}
src/pages/mobile/TyreMobilePage.tsx:        /* Ensure content doesn't go behind navigation */
src/pages/mobile/TyreMobilePage.tsx:          padding-bottom: 80px; /* Account for bottom navigation */
src/pages/mobile/TyreMobilePage.tsx:        /* Optimize for mobile performance */
src/pages/mobile/TyreMobilePage.tsx:        /* Smooth scrolling */
src/pages/mobile/TyreMobilePage.tsx:        /* Prevent horizontal scroll */
src/pages/mobile/TyreMobilePage.tsx:        /* Touch-friendly interactive elements */
src/pages/mobile/TyreMobilePage.tsx:        /* Optimize text for mobile readability */
src/pages/mobile/TyreMobilePage.tsx:        /* Reduce animations on lower-end devices */
src/pages/mobile/TyreMobilePage.tsx:        /* Optimize for PWA */
src/pages/Inventory/VendorScorecard.tsx:  // Mock data - in real app, this would come from Firestore
src/pages/Inventory/VendorScorecard.tsx:    // Simulate API call/Firestore fetch
src/pages/Inventory/VendorScorecard.tsx:    // Apply filters and sorting
src/pages/Inventory/VendorScorecard.tsx:    // Apply search filter
src/pages/Inventory/VendorScorecard.tsx:    // Apply score threshold
src/pages/Inventory/VendorScorecard.tsx:    // Apply sorting
src/pages/Inventory/InventoryDashboard.tsx:// Color palette for charts
src/pages/Inventory/InventoryDashboard.tsx:  // Fetch dashboard data
src/pages/Inventory/InventoryDashboard.tsx:        // In a real app, you'd fetch this data from Firestore
src/pages/Inventory/InventoryDashboard.tsx:        // For this demo, we'll use mock data
src/pages/Inventory/InventoryDashboard.tsx:  // Filter top items based on search query and category filter
src/pages/Inventory/InventoryDashboard.tsx:  // Get stock status for visualization
src/pages/Inventory/InventoryDashboard.tsx:            // This will trigger the useEffect to refetch data
src/pages/Inventory/InventoryDashboard.tsx:      {/* Key Metrics */}
src/pages/Inventory/InventoryDashboard.tsx:      {/* Charts Row 1 */}
src/pages/Inventory/InventoryDashboard.tsx:        {/* Stock Movements */}
src/pages/Inventory/InventoryDashboard.tsx:        {/* Category Breakdown */}
src/pages/Inventory/InventoryDashboard.tsx:      {/* Top Items */}
src/pages/Inventory/InventoryDashboard.tsx:      {/* Recent Activity */}
src/pages/Inventory/InventoryDashboard.tsx:        {/* Recent Deliveries */}
src/pages/Inventory/InventoryDashboard.tsx:        {/* Pending Orders */}
src/pages/Inventory/InventoryDashboard.tsx:      {/* Vendor Performance */}
src/pages/Inventory/InventoryDashboard.tsx:                            xmlns="http://www.w3.org/2000/svg"
src/pages/Inventory/InventoryDashboard.tsx:      {/* Action Items */}
src/pages/Inventory/InventoryPage.tsx:  // Mock data - in real app this would come from API/Firebase
src/pages/Inventory/InventoryPage.tsx:  // Calculate stats
src/pages/Inventory/InventoryPage.tsx:  // Get unique categories
src/pages/Inventory/InventoryPage.tsx:  // Filter items
src/pages/Inventory/InventoryPage.tsx:        {/* Header */}
src/pages/Inventory/InventoryPage.tsx:        {/* Stats Cards */}
src/pages/Inventory/InventoryPage.tsx:        {/* Filters */}
src/pages/Inventory/InventoryPage.tsx:        {/* Inventory Table */}
src/pages/Inventory/InventoryPage.tsx:        {/* Low Stock Alert */}
src/pages/Inventory/POApprovalSummary.tsx:// Sample data for the component
src/pages/Inventory/LoadPlanningPage.tsx:      {/* Pending Loads */}
src/pages/Inventory/LoadPlanningPage.tsx:      {/* Available Vehicles */}
src/pages/Inventory/LoadPlanningPage.tsx:      {/* Load Templates */}
src/pages/Inventory/PartsOrderingPage.tsx:// Firebase will be dynamically imported when needed
src/pages/Inventory/PartsOrderingPage.tsx:// Import related forms
src/pages/Inventory/PartsOrderingPage.tsx:  // Modal states
src/pages/Inventory/PartsOrderingPage.tsx:  // Initialize with mock data
src/pages/Inventory/PartsOrderingPage.tsx:  // Filter orders based on search and filters
src/pages/Inventory/PartsOrderingPage.tsx:      // Convert DemandPartsFormData to PartOrder
src/pages/Inventory/PartsOrderingPage.tsx:        totalCost: 0, // Will be calculated when supplier prices are added
src/pages/Inventory/PartsOrderingPage.tsx:          unitPrice: 0, // Will be set when ordering from supplier
src/pages/Inventory/PartsOrderingPage.tsx:      // Dynamically import Firebase modules
src/pages/Inventory/PartsOrderingPage.tsx:      // Save to Firestore
src/pages/Inventory/PartsOrderingPage.tsx:      // Update with Firestore ID
src/pages/Inventory/PartsOrderingPage.tsx:      // Update local state
src/pages/Inventory/PartsOrderingPage.tsx:    // Update order status based on received parts
src/pages/Inventory/PartsOrderingPage.tsx:        // Update parts quantities and statuses
src/pages/Inventory/PartsOrderingPage.tsx:        // Determine overall order status
src/pages/Inventory/PartsOrderingPage.tsx:        // Dynamically import Firebase modules
src/pages/Inventory/PartsOrderingPage.tsx:        // Update in Firestore
src/pages/Inventory/PartsOrderingPage.tsx:        // Update parts inventory quantities
src/pages/Inventory/PartsOrderingPage.tsx:          // Query for existing part in inventory
src/pages/Inventory/PartsOrderingPage.tsx:            // Update existing part quantity
src/pages/Inventory/PartsOrderingPage.tsx:            if (partDoc) { // Add null/undefined check
src/pages/Inventory/PartsOrderingPage.tsx:            // Add new part to inventory
src/pages/Inventory/PartsOrderingPage.tsx:              cost: 0, // This would need to be determined
src/pages/Inventory/PartsOrderingPage.tsx:        // Update local state
src/pages/Inventory/PartsOrderingPage.tsx:    // Would open edit modal here
src/pages/Inventory/PartsOrderingPage.tsx:    // Export orders to CSV/Excel
src/pages/Inventory/PartsOrderingPage.tsx:    // Implementation would go here
src/pages/Inventory/PartsOrderingPage.tsx:    // Import orders from file
src/pages/Inventory/PartsOrderingPage.tsx:    // Implementation would go here
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Header Section */}
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Quick Stats */}
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Filters and Search */}
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Orders Table */}
src/pages/Inventory/PartsOrderingPage.tsx:                                // Option 1: Modal approach
src/pages/Inventory/PartsOrderingPage.tsx:                                // setSelectedOrder(order);
src/pages/Inventory/PartsOrderingPage.tsx:                                // setIsReceivePartsModalOpen(true);
src/pages/Inventory/PartsOrderingPage.tsx:                                // Option 2: Navigate to dedicated receive page with PO information
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Create Order Modal */}
src/pages/Inventory/PartsOrderingPage.tsx:        {/* Receive Parts Modal */}
src/pages/Inventory/PartsOrderingPage.tsx:        {/* View Order Modal */}
src/pages/Inventory/PartsInventoryPage.tsx:// Define the inspection data type
src/pages/Inventory/PartsInventoryPage.tsx:  // State for managing modals
src/pages/Inventory/PartsInventoryPage.tsx:  // Filter inspections based on search term
src/pages/Inventory/PartsInventoryPage.tsx:      {/* Defect Item Modal */}
src/pages/Inventory/PartsInventoryPage.tsx:      {/* Inspection Details Modal */}
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Fetch purchase orders from Firestore (mock)
src/pages/Inventory/PurchaseOrderTracker.tsx:    // Mock data - in a real app this would be from Firestore
src/pages/Inventory/PurchaseOrderTracker.tsx:      // Extract unique vendors
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Apply filters and search
src/pages/Inventory/PurchaseOrderTracker.tsx:    // Apply text search
src/pages/Inventory/PurchaseOrderTracker.tsx:    // Apply filters
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Handle filter changes
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Toggle expanded order view - used in JSX
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Get status badge styling
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Get payment status badge styling
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Format currency
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Get status icon
src/pages/Inventory/PurchaseOrderTracker.tsx:  // Calculate the delivery status based on expected delivery date
src/pages/Inventory/PurchaseOrderTracker.tsx:    // Order date might be used for future features
src/pages/Inventory/PurchaseOrderTracker.tsx:      {/* Notification */}
src/pages/Inventory/PurchaseOrderTracker.tsx:      {/* Search and Filters */}
src/pages/Inventory/PurchaseOrderTracker.tsx:      {/* Purchase Orders Table */}
src/pages/Inventory/PurchaseOrderTracker.tsx:                      {/* Expanded Details */}
src/pages/Inventory/PurchaseOrderTracker.tsx:      {/* Summary Statistics */}
src/pages/Inventory/PurchaseOrderTracker.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/Inventory/PurchaseOrderDetailView.tsx:  // Calculate total cost
src/pages/Inventory/PurchaseOrderDetailView.tsx:  const tax = subtotal * 0.15; // Assuming 15% tax
src/pages/Inventory/PurchaseOrderDetailView.tsx:  const shipping = 0; // Could be dynamic
src/pages/Inventory/PurchaseOrderDetailView.tsx:  // Format currency
src/pages/Inventory/PurchaseOrderDetailView.tsx:  // Determine status badge color
src/pages/Inventory/ReceivePartsPage.tsx:// Interface for parts being received
src/pages/Inventory/ReceivePartsPage.tsx:// Interface for purchase order parts (matching the data structure used in the component)
src/pages/Inventory/ReceivePartsPage.tsx:/**
src/pages/Inventory/ReceivePartsPage.tsx:      // 1. Update inventory quantities in Firestore
src/pages/Inventory/ReceivePartsPage.tsx:        // Check if part exists in inventory
src/pages/Inventory/ReceivePartsPage.tsx:          // Update existing part quantity
src/pages/Inventory/ReceivePartsPage.tsx:          const partDoc = partsSnapshot.docs[0]!; // non-null: guarded by empty check
src/pages/Inventory/ReceivePartsPage.tsx:          // Add new part to inventory
src/pages/Inventory/ReceivePartsPage.tsx:      // 2. Update purchase order status if poNumber is provided
src/pages/Inventory/ReceivePartsPage.tsx:          const orderDoc = poSnapshot.docs[0]!; // non-null: guarded by empty check
src/pages/Inventory/ReceivePartsPage.tsx:          // Update parts status
src/pages/Inventory/ReceivePartsPage.tsx:          // Determine overall order status
src/pages/Inventory/ReceivePartsPage.tsx:      // 3. Create audit trail
src/pages/Inventory/ReceivePartsPage.tsx:        userId: "current-user-id", // This should come from authentication context
src/pages/Inventory/ReceivePartsPage.tsx:      // Show success message
src/pages/Inventory/ReceivePartsPage.tsx:    // Navigate back or close form
src/pages/drivers/TrainingRecords.tsx:// Mock training data
src/pages/drivers/TrainingRecords.tsx:  // Filter trainings based on status filter
src/pages/drivers/TrainingRecords.tsx:  // Get counts for dashboard
src/pages/drivers/TrainingRecords.tsx:  // Function to determine status badge style
src/pages/drivers/TrainingRecords.tsx:      {/* Dashboard Summary */}
src/pages/drivers/TrainingRecords.tsx:      {/* Training Records Table */}
src/pages/drivers/TrainingRecords.tsx:      {/* Upcoming Trainings */}
src/pages/drivers/DriverFuelBehavior.tsx:/**
src/pages/drivers/DriverFuelBehavior.tsx:  // Local UI state
src/pages/drivers/DriverFuelBehavior.tsx:  // Search and filtering state
src/pages/drivers/DriverFuelBehavior.tsx:  // Get application context for data and operations
src/pages/drivers/DriverFuelBehavior.tsx:  // Subscribe directly to driver behavior events (hook handles Firestore listeners)
src/pages/drivers/DriverFuelBehavior.tsx:  // Wire the driverBehaviorService import so it's actively used (non-invasive)
src/pages/drivers/DriverFuelBehavior.tsx:        // Hook already provides real-time data; keep this as a lightweight diagnostic
src/pages/drivers/DriverFuelBehavior.tsx:    // On unmount, clear the callback registration without touching global listeners
src/pages/drivers/DriverFuelBehavior.tsx:  // Subscribe to driver behavior events when the component mounts
src/pages/drivers/DriverFuelBehavior.tsx:    // Real-time updates are now handled by the DriverBehaviorContext provider
src/pages/drivers/DriverFuelBehavior.tsx:    // The useDriverBehavior hook already provides real-time data from Firestore
src/pages/drivers/DriverFuelBehavior.tsx:    // Check if we have any events, if not and we're online, trigger a sync
src/pages/drivers/DriverFuelBehavior.tsx:    // Log the number of events coming from the context
src/pages/drivers/DriverFuelBehavior.tsx:    // Cleanup function not needed (hook handles it)
src/pages/drivers/DriverFuelBehavior.tsx:  // Handle initiating CAR from event
src/pages/drivers/DriverFuelBehavior.tsx:  // Manual sync handler with enhanced error handling and feedback
src/pages/drivers/DriverFuelBehavior.tsx:  // View event details
src/pages/drivers/DriverFuelBehavior.tsx:  // Export data handler
src/pages/drivers/DriverFuelBehavior.tsx:      // Get the data to export (filtered or all)
src/pages/drivers/DriverFuelBehavior.tsx:      // Convert to CSV
src/pages/drivers/DriverFuelBehavior.tsx:      // Create download link
src/pages/drivers/DriverFuelBehavior.tsx:  // Get unique event types for filtering
src/pages/drivers/DriverFuelBehavior.tsx:  // Filter events based on search term and filters
src/pages/drivers/DriverFuelBehavior.tsx:      // Search term filter
src/pages/drivers/DriverFuelBehavior.tsx:      // Severity filter
src/pages/drivers/DriverFuelBehavior.tsx:      // Event type filter
src/pages/drivers/DriverFuelBehavior.tsx:      // Date range filter
src/pages/drivers/DriverFuelBehavior.tsx:  // Get filtered events
src/pages/drivers/DriverFuelBehavior.tsx:  // Get unique event types
src/pages/drivers/DriverFuelBehavior.tsx:      {/* Header with title and action buttons */}
src/pages/drivers/DriverFuelBehavior.tsx:      {/* Error display if needed */}
src/pages/drivers/DriverFuelBehavior.tsx:      {/* Main tabs for different sections */}
src/pages/drivers/DriverFuelBehavior.tsx:        {/* Driver Performance Overview Tab */}
src/pages/drivers/DriverFuelBehavior.tsx:        {/* Behavior Events Tab */}
src/pages/drivers/DriverFuelBehavior.tsx:            {/* Filters Section */}
src/pages/drivers/DriverFuelBehavior.tsx:                {/* Removed Web-Book only toggle – hook already provides filtered events */}
src/pages/drivers/DriverFuelBehavior.tsx:            {/* Events Table */}
src/pages/drivers/DriverFuelBehavior.tsx:        {/* CAR Reports Tab */}
src/pages/drivers/DriverFuelBehavior.tsx:      {/* Event Form Modal */}
src/pages/drivers/DriverFuelBehavior.tsx:      {/* Event Details Modal */}
src/pages/drivers/DriverFuelBehavior.tsx:      {/* CAR Form Modal */}
src/pages/drivers/DriverScheduling.tsx:  startTime: string; // ISO string
src/pages/drivers/DriverScheduling.tsx:  endTime: string; // ISO string
src/pages/drivers/DriverScheduling.tsx:// Function to format time from date string
src/pages/drivers/DriverScheduling.tsx:// Function to format date from date string
src/pages/drivers/DriverScheduling.tsx:  // Load schedules from Firestore
src/pages/drivers/DriverScheduling.tsx:  // Function to navigate to previous period
src/pages/drivers/DriverScheduling.tsx:  // Function to navigate to next period
src/pages/drivers/DriverScheduling.tsx:  // Function to get period label
src/pages/drivers/DriverScheduling.tsx:          {/* Weekly Schedule View */}
src/pages/drivers/DriverScheduling.tsx:              {/* Day Headers */}
src/pages/drivers/DriverScheduling.tsx:              {/* Schedules Grid */}
src/pages/drivers/DriverScheduling.tsx:                  // Adjust to start of week (Sunday)
src/pages/drivers/DriverScheduling.tsx:                  // Get date for this column
src/pages/drivers/DriverScheduling.tsx:                  // Format as YYYY-MM-DD for comparison
src/pages/drivers/DriverScheduling.tsx:                  // Filter schedules for this day
src/pages/drivers/DriverScheduling.tsx:          {/* Monthly View */}
src/pages/drivers/DriverScheduling.tsx:          {/* Daily View */}
src/pages/drivers/DriverScheduling.tsx:      {/* Upcoming Schedules */}
src/pages/drivers/DriverScheduling.tsx:      {/* Schedule Conflicts Alert */}
src/pages/drivers/AddEditDriverPage.tsx:// Import DriverData interface
src/pages/drivers/AddEditDriverPage.tsx:  // State for driver data
src/pages/drivers/AddEditDriverPage.tsx:  // Fetch driver data if in edit mode
src/pages/drivers/AddEditDriverPage.tsx:  // Offline form handling
src/pages/drivers/AddEditDriverPage.tsx:      // Navigate back to drivers list or detail page
src/pages/drivers/AddEditDriverPage.tsx:  // Show loading state
src/pages/drivers/AddEditDriverPage.tsx:  // Show error state
src/pages/drivers/PerformanceAnalytics.tsx:  // These would be replaced with actual charts in a real implementation
src/pages/drivers/PerformanceAnalytics.tsx:  // For now, using colored bars to simulate charts
src/pages/drivers/PerformanceAnalytics.tsx:      {/* Overall Performance Overview */}
src/pages/drivers/PerformanceAnalytics.tsx:      {/* Driver Performance Comparison */}
src/pages/drivers/PerformanceAnalytics.tsx:          {/* Simulated Bar Chart */}
src/pages/drivers/PerformanceAnalytics.tsx:      {/* Performance Trends */}
src/pages/drivers/PerformanceAnalytics.tsx:        {/* Safety Score Trend */}
src/pages/drivers/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/pages/drivers/PerformanceAnalytics.tsx:        {/* On-Time Delivery Trend */}
src/pages/drivers/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/pages/drivers/PerformanceAnalytics.tsx:      {/* Performance Metrics Breakdown */}
src/pages/drivers/DriverBehaviorPage.tsx:/**
src/pages/drivers/DriverBehaviorPage.tsx:  // Local UI state
src/pages/drivers/DriverBehaviorPage.tsx:  // Search and filtering state
src/pages/drivers/DriverBehaviorPage.tsx:  // Get application context for data and operations
src/pages/drivers/DriverBehaviorPage.tsx:  // Subscribe directly to driver behavior events (hook handles Firestore listeners)
src/pages/drivers/DriverBehaviorPage.tsx:  // Wire the driverBehaviorService import so it's actively used (non-invasive)
src/pages/drivers/DriverBehaviorPage.tsx:        // Hook already provides real-time data; keep this as a lightweight diagnostic
src/pages/drivers/DriverBehaviorPage.tsx:    // On unmount, clear the callback registration without touching global listeners
src/pages/drivers/DriverBehaviorPage.tsx:  // Subscribe to driver behavior events when the component mounts
src/pages/drivers/DriverBehaviorPage.tsx:    // Real-time updates are now handled by the DriverBehaviorContext provider
src/pages/drivers/DriverBehaviorPage.tsx:    // The useDriverBehavior hook already provides real-time data from Firestore
src/pages/drivers/DriverBehaviorPage.tsx:    // Check if we have any events, if not and we're online, trigger a sync
src/pages/drivers/DriverBehaviorPage.tsx:    // Log the number of events coming from the context
src/pages/drivers/DriverBehaviorPage.tsx:    // Cleanup function not needed (hook handles it)
src/pages/drivers/DriverBehaviorPage.tsx:  // Handle initiating CAR from event
src/pages/drivers/DriverBehaviorPage.tsx:  // Manual sync handler with enhanced error handling and feedback
src/pages/drivers/DriverBehaviorPage.tsx:  // View event details
src/pages/drivers/DriverBehaviorPage.tsx:  // Export data handler
src/pages/drivers/DriverBehaviorPage.tsx:      // Get the data to export (filtered or all)
src/pages/drivers/DriverBehaviorPage.tsx:      // Convert to CSV
src/pages/drivers/DriverBehaviorPage.tsx:      // Create download link
src/pages/drivers/DriverBehaviorPage.tsx:  // Get unique event types for filtering
src/pages/drivers/DriverBehaviorPage.tsx:  // Filter events based on search term and filters
src/pages/drivers/DriverBehaviorPage.tsx:      // Search term filter
src/pages/drivers/DriverBehaviorPage.tsx:      // Severity filter
src/pages/drivers/DriverBehaviorPage.tsx:      // Event type filter
src/pages/drivers/DriverBehaviorPage.tsx:      // Date range filter
src/pages/drivers/DriverBehaviorPage.tsx:  // Get filtered events
src/pages/drivers/DriverBehaviorPage.tsx:  // Get unique event types
src/pages/drivers/DriverBehaviorPage.tsx:      {/* Header with title and action buttons */}
src/pages/drivers/DriverBehaviorPage.tsx:      {/* Error display if needed */}
src/pages/drivers/DriverBehaviorPage.tsx:      {/* Main tabs for different sections */}
src/pages/drivers/DriverBehaviorPage.tsx:        {/* Driver Performance Overview Tab */}
src/pages/drivers/DriverBehaviorPage.tsx:        {/* Behavior Events Tab */}
src/pages/drivers/DriverBehaviorPage.tsx:            {/* Filters Section */}
src/pages/drivers/DriverBehaviorPage.tsx:                {/* Removed Web-Book only toggle – hook already provides filtered events */}
src/pages/drivers/DriverBehaviorPage.tsx:            {/* Events Table */}
src/pages/drivers/DriverBehaviorPage.tsx:        {/* CAR Reports Tab */}
src/pages/drivers/DriverBehaviorPage.tsx:      {/* Event Form Modal */}
src/pages/drivers/DriverBehaviorPage.tsx:      {/* Event Details Modal */}
src/pages/drivers/DriverBehaviorPage.tsx:      {/* CAR Form Modal */}
src/pages/drivers/DriverRewards.tsx:// Mock rewards data
src/pages/drivers/DriverRewards.tsx:// Available rewards
src/pages/drivers/DriverRewards.tsx:  // Toggle expanded driver
src/pages/drivers/DriverRewards.tsx:  // Function to get badge for level
src/pages/drivers/DriverRewards.tsx:  // Function to render stars based on level
src/pages/drivers/DriverRewards.tsx:  // Format date
src/pages/drivers/DriverRewards.tsx:      {/* Top Performers */}
src/pages/drivers/DriverRewards.tsx:      {/* Driver Rewards Summary */}
src/pages/drivers/DriverRewards.tsx:      {/* Available Rewards */}
src/pages/drivers/DriverRewards.tsx:      {/* Program Rules */}
src/pages/drivers/DriverDetailsPage.tsx:// Using our custom formatDate helper instead of date-fns
src/pages/drivers/DriverDetailsPage.tsx:        // Get driver details from Firestore
src/pages/drivers/DriverDetailsPage.tsx:        // Fetch driver authorizations if idNo exists
src/pages/drivers/DriverDetailsPage.tsx:  // Function to check if a document is expiring soon (within 90 days)
src/pages/drivers/DriverDetailsPage.tsx:      // Parse the expiration date (assuming format DD/MM/YYYY)
src/pages/drivers/DriverDetailsPage.tsx:      if (parts.length !== 3) return false; // Ensure we have exactly 3 parts
src/pages/drivers/DriverDetailsPage.tsx:      if (!day || !month || !year) return false; // Ensure all parts exist
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(year), // Year
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(month) - 1, // Month (0-based)
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(day) // Day
src/pages/drivers/DriverDetailsPage.tsx:      // Calculate days until expiry
src/pages/drivers/DriverDetailsPage.tsx:  // Function to check if a document is expired
src/pages/drivers/DriverDetailsPage.tsx:      // Parse the expiration date (assuming format DD/MM/YYYY)
src/pages/drivers/DriverDetailsPage.tsx:      if (parts.length !== 3) return false; // Ensure we have exactly 3 parts
src/pages/drivers/DriverDetailsPage.tsx:      if (!day || !month || !year) return false; // Ensure all parts exist
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(year), // Year
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(month) - 1, // Month (0-based)
src/pages/drivers/DriverDetailsPage.tsx:        parseInt(day) // Day
src/pages/drivers/DriverDetailsPage.tsx:      // Check if expired
src/pages/drivers/DriverDetailsPage.tsx:              <svg className="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
src/pages/drivers/DriverDetailsPage.tsx:              <svg className="h-5 w-5 text-yellow-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
src/pages/drivers/DriverDetailsPage.tsx:        {/* Driver Information Card */}
src/pages/drivers/DriverDetailsPage.tsx:        {/* Driver Documents and Authorizations */}
src/pages/drivers/DriverDetailsPage.tsx:        {/* Additional Information (can be expanded later) */}
src/pages/drivers/DriverViolations.tsx:// Types
src/pages/drivers/DriverViolations.tsx:  date: string; // ISO string
src/pages/drivers/DriverViolations.tsx:// Mock violations data
src/pages/drivers/DriverViolations.tsx:  // Filter violations based on selected severity
src/pages/drivers/DriverViolations.tsx:  // Violation counts by type for the chart
src/pages/drivers/DriverViolations.tsx:  // Sort types by count for display
src/pages/drivers/DriverViolations.tsx:  // Function to format date
src/pages/drivers/DriverViolations.tsx:  // Function to get severity badge
src/pages/drivers/DriverViolations.tsx:  // Function to get status badge
src/pages/drivers/DriverViolations.tsx:  // Function to get violation icon
src/pages/drivers/DriverViolations.tsx:      {/* Dashboard Summary */}
src/pages/drivers/DriverViolations.tsx:      {/* Violations by Type Chart */}
src/pages/drivers/DriverViolations.tsx:      {/* Violations List */}
src/pages/drivers/DriverViolations.tsx:      {/* Repeat Offenders */}
src/pages/drivers/DriverViolations.tsx:                {/* Group violations by driver and count */}
src/pages/drivers/DriverViolations.tsx:                    if (!entry) return acc; // Safety check, though this shouldn't happen
src/pages/drivers/DriverViolations.tsx:                    // Find most common violation type
src/pages/drivers/DriverProfiles.tsx:/**
src/pages/drivers/DriverProfiles.tsx:  // Fetch drivers from Firestore using the custom hook
src/pages/drivers/DriverProfiles.tsx:  // Small util for flexible date parsing (supports ISO and DD/MM/YYYY)
src/pages/drivers/DriverProfiles.tsx:  // Normalize name and filter list
src/pages/drivers/DriverProfiles.tsx:        {/* Pagination (static for now, can be enhanced later) */}
src/pages/drivers/SafetyScores.tsx:// Add type definitions
src/pages/drivers/SafetyScores.tsx:// Mock data for driver safety scores
src/pages/drivers/SafetyScores.tsx:/**
src/pages/drivers/SafetyScores.tsx:  // If we have a driverId, filter for just that driver
src/pages/drivers/SafetyScores.tsx:  // Sort by safety score (descending)
src/pages/drivers/SafetyScores.tsx:  // Update to handle the safety tips section more safely
src/pages/drivers/SafetyScores.tsx:      {/* Company-wide safety metrics */}
src/pages/drivers/SafetyScores.tsx:      {/* Driver Safety Scores List */}
src/pages/drivers/SafetyScores.tsx:      {/* Safety Tips Section */}
src/pages/drivers/LicenseManagement.tsx:// Firestore license document shape (extend as needed)
src/pages/drivers/LicenseManagement.tsx:  issueDate?: string; // ISO / YYYY-MM-DD
src/pages/drivers/LicenseManagement.tsx:  status?: string; // active | expired | expiring-soon
src/pages/drivers/LicenseManagement.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/drivers/LicenseManagement.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/drivers/LicenseManagement.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/drivers/DriverManagementPageIntegrated.tsx:// Mock data for drivers
src/pages/drivers/DriverManagementPageIntegrated.tsx:  // Filter drivers based on search query and status filter
src/pages/drivers/DriverManagementPageIntegrated.tsx:      await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
src/pages/drivers/DriverManagementPageIntegrated.tsx:        // Edit existing driver
src/pages/drivers/DriverManagementPageIntegrated.tsx:        // Add new driver
src/pages/drivers/DriverManagementPageIntegrated.tsx:        const newDriver = { ...driverData, id: String(drivers.length + 1) }; // Simple ID generation
src/pages/drivers/DriverManagementPageIntegrated.tsx:  // Get status badge color
src/pages/drivers/DriverManagementPageIntegrated.tsx:  // Get license status badge color
src/pages/drivers/DriverManagementPageIntegrated.tsx:      {/* Success message */}
src/pages/drivers/DriverManagementPageIntegrated.tsx:      {/* Error message */}
src/pages/drivers/DriverManagementPageIntegrated.tsx:      {/* Search and filter section */}
src/pages/drivers/DriverManagementPageIntegrated.tsx:      {/* Drivers list */}
src/pages/drivers/DriverManagementPageIntegrated.tsx:      {/* Driver form modal */}
src/pages/drivers/DriverDetails.tsx:// Driver document interface (trimmed to fields we display)
src/pages/drivers/DriverDetails.tsx:        {/* Driver Info */}
src/pages/drivers/DriverDetails.tsx:        {/* License Info */}
src/pages/drivers/DriverDetails.tsx:        {/* Performance */}
src/pages/drivers/AddNewDriverPage.tsx:/**
src/pages/drivers/AddNewDriverPage.tsx:    // In a real application, this would save the driver to the database
src/pages/drivers/AddNewDriverPage.tsx:    // Show success message and navigate back to drivers list
src/pages/drivers/EditDriver.tsx:// Define interfaces for nested objects
src/pages/drivers/EditDriver.tsx:// Define the main Driver interface for mock data
src/pages/drivers/EditDriver.tsx:// Define the interface for the formData state
src/pages/drivers/EditDriver.tsx:// Mock driver data - same as used in DriverDetails.tsx
src/pages/drivers/EditDriver.tsx:    // Explicitly type formData
src/pages/drivers/EditDriver.tsx:    // Simulate API call
src/pages/drivers/EditDriver.tsx:      // Explicitly type prev
src/pages/drivers/EditDriver.tsx:    // Simulate API call
src/pages/drivers/EditDriver.tsx:          {/* Personal Information */}
src/pages/drivers/EditDriver.tsx:          {/* License & Emergency Contact */}
src/pages/drivers/EditDriver.tsx:        {/* Banking Details */}
src/pages/drivers/EditDriver.tsx:        {/* Form Actions */}
src/pages/drivers/DriverPerformancePage.tsx:  // Mock data for driver performance
src/pages/drivers/DriverPerformancePage.tsx:      {/* Integrated detailed performance overview component */}
src/pages/drivers/DriverPerformancePage.tsx:      {/* Performance Overview Cards */}
src/pages/drivers/DriverPerformancePage.tsx:      {/* Driver Leaderboard */}
src/pages/drivers/DriverPerformancePage.tsx:      {/* Performance Charts */}
src/pages/drivers/DriverManagementPage.tsx:/**
src/pages/drivers/DriverManagementPage.tsx:      {/* Outlet for nested routes */}
src/pages/drivers/HoursOfService.tsx:// Mock hours of service data
src/pages/drivers/HoursOfService.tsx:// HOS limits for reference
src/pages/drivers/HoursOfService.tsx:  // We currently don't mutate hoursData; keep setter placeholder underscored for future use while silencing lint
src/pages/drivers/HoursOfService.tsx:  // Calculate HOS compliance stats
src/pages/drivers/HoursOfService.tsx:  // Function to get status indicator color
src/pages/drivers/HoursOfService.tsx:  // Function to calculate percentage of time used
src/pages/drivers/HoursOfService.tsx:      {/* Dashboard Summary */}
src/pages/drivers/HoursOfService.tsx:      {/* HOS Records */}
src/pages/drivers/HoursOfService.tsx:      {/* Violation Alerts */}
src/pages/drivers/HoursOfService.tsx:      {/* HOS Regulations Reference */}
src/pages/tyres/TyreFleetMap.tsx:  // Removed unused _vehicleTyreStore state (previously held buildVehicleTyreStore result)
src/pages/tyres/TyreFleetMap.tsx:    // Group mapping data by vehicle
src/pages/tyres/TyreFleetMap.tsx:      // Sort by position: V positions first, then T positions, then SP
src/pages/tyres/TyreFleetMap.tsx:      {/* Header */}
src/pages/tyres/TyreFleetMap.tsx:      {/* Search and Filter */}
src/pages/tyres/TyreFleetMap.tsx:      {/* Statistics */}
src/pages/tyres/TyreFleetMap.tsx:      {/* Vehicle Grid */}
src/pages/tyres/TyreFleetMap.tsx:        // Single vehicle detailed view
src/pages/tyres/TyreFleetMap.tsx:        // Fleet overview
src/pages/tyres/TyreFleetMap.tsx:                  {/* Mini tyre grid preview */}
src/pages/tyres/TyreManagementPage.tsx:import React, { useEffect, useMemo, useState } from "react"; // Added useMemo
src/pages/tyres/TyreManagementPage.tsx:// Using the Tyre type directly from tyreData.ts instead of TyreModel
src/pages/tyres/TyreManagementPage.tsx:// Renamed import to avoid conflict with local declaration
src/pages/tyres/TyreManagementPage.tsx:// Removed unused adaptTyreFormat import after local adapter implementation
src/pages/tyres/TyreManagementPage.tsx:// Import all necessary Enums and Types from your tyreData.ts file
src/pages/tyres/TyreManagementPage.tsx:// Ensure this path is correct relative to TyreManagementPage.tsx
src/pages/tyres/TyreManagementPage.tsx:// Import tyre components that need to be integrated
src/pages/tyres/TyreManagementPage.tsx:// Define tabs for navigation
src/pages/tyres/TyreManagementPage.tsx:/**
src/pages/tyres/TyreManagementPage.tsx:      // TyreDashboard might expect additional calculated fields
src/pages/tyres/TyreManagementPage.tsx:        // Map any missing properties needed by TyreDashboard
src/pages/tyres/TyreManagementPage.tsx:        // Add any other fields needed by the dashboard
src/pages/tyres/TyreManagementPage.tsx:          // Ensure these fields exist for compatibility
src/pages/tyres/TyreManagementPage.tsx:        // Always ensure these properties exist
src/pages/tyres/TyreManagementPage.tsx:      // Ensure cost data is properly formatted
src/pages/tyres/TyreManagementPage.tsx:      // Add performance metrics
src/pages/tyres/TyreManagementPage.tsx:      // Ensure analytics-specific fields are present
src/pages/tyres/TyreManagementPage.tsx:      // Return the original format for most components
src/pages/tyres/TyreManagementPage.tsx:  const [filterStatus, setFilterStatus] = useState<TyreStatus | null>(null); // Changed type to TyreStatus
src/pages/tyres/TyreManagementPage.tsx:  // Sub-tab states for Analytics and Reports sections
src/pages/tyres/TyreManagementPage.tsx:  // Define defaultNewTyre using Enum members and ensuring all required fields are present
src/pages/tyres/TyreManagementPage.tsx:  // This is wrapped in useMemo to prevent re-creation on every render, which is good practice.
src/pages/tyres/TyreManagementPage.tsx:        invoiceNumber: "", // Added as it's optional but good to initialize
src/pages/tyres/TyreManagementPage.tsx:        nextInspectionDue: "", // Corrected: Ensures this required field is present
src/pages/tyres/TyreManagementPage.tsx:      location: TyreStoreLocation.HOLDING_BAY, // Corrected to use enum member
src/pages/tyres/TyreManagementPage.tsx:  ); // Empty dependency array means it's created once
src/pages/tyres/TyreManagementPage.tsx:  // Function to fetch tyres from Firestore
src/pages/tyres/TyreManagementPage.tsx:      // Dynamically import Firebase modules
src/pages/tyres/TyreManagementPage.tsx:      // Assuming 'db' is exported from '../../firebase'
src/pages/tyres/TyreManagementPage.tsx:      const { db } = await import("../../firebase"); // Make sure this path is correct
src/pages/tyres/TyreManagementPage.tsx:      // Create a query against the 'tyres' collection
src/pages/tyres/TyreManagementPage.tsx:  // Load tyres on component mount
src/pages/tyres/TyreManagementPage.tsx:  // Filter tyres based on search query and status filter
src/pages/tyres/TyreManagementPage.tsx:    // Create a searchable string from relevant tyre properties
src/pages/tyres/TyreManagementPage.tsx:    // Directly compare with filterStatus, which is now TyreStatus or null
src/pages/tyres/TyreManagementPage.tsx:  // Convert tyres to inventory format for TyreInventoryStats
src/pages/tyres/TyreManagementPage.tsx:    quantity: 1, // Each tyre is counted as 1
src/pages/tyres/TyreManagementPage.tsx:    minStock: 2, // Default minimum stock level
src/pages/tyres/TyreManagementPage.tsx:  // Handle adding a new tyre
src/pages/tyres/TyreManagementPage.tsx:      // Dynamically import Firebase modules
src/pages/tyres/TyreManagementPage.tsx:      // Save to Firestore
src/pages/tyres/TyreManagementPage.tsx:      // Add the new tyre to the local state with the Firestore ID
src/pages/tyres/TyreManagementPage.tsx:      // Close the form
src/pages/tyres/TyreManagementPage.tsx:      // Show a success toast/notification (assuming react-hot-toast is installed and used)
src/pages/tyres/TyreManagementPage.tsx:      // toast.success("Tyre added successfully!");
src/pages/tyres/TyreManagementPage.tsx:      alert("Tyre added successfully!"); // Fallback to alert
src/pages/tyres/TyreManagementPage.tsx:      // toast.error("Failed to add tyre. Please try again.");
src/pages/tyres/TyreManagementPage.tsx:      alert("Failed to add tyre. Please try again."); // Fallback to alert
src/pages/tyres/TyreManagementPage.tsx:      throw err; // Re-throw to ensure Promise rejection
src/pages/tyres/TyreManagementPage.tsx:  // Handle updating an existing tyre
src/pages/tyres/TyreManagementPage.tsx:      // Dynamically import Firebase modules
src/pages/tyres/TyreManagementPage.tsx:      // Reference to the tyre document
src/pages/tyres/TyreManagementPage.tsx:      // Create a shallow copy without id field for update
src/pages/tyres/TyreManagementPage.tsx:      // Update the tyre in the local state
src/pages/tyres/TyreManagementPage.tsx:      // Reset edit state
src/pages/tyres/TyreManagementPage.tsx:      // Show success message
src/pages/tyres/TyreManagementPage.tsx:      // toast.success("Tyre updated successfully!");
src/pages/tyres/TyreManagementPage.tsx:      alert("Tyre updated successfully!"); // Fallback to alert
src/pages/tyres/TyreManagementPage.tsx:      // toast.error("Failed to update tyre. Please try again.");
src/pages/tyres/TyreManagementPage.tsx:      alert("Failed to update tyre. Please try again."); // Fallback to alert
src/pages/tyres/TyreManagementPage.tsx:      throw err; // Re-throw to ensure Promise rejection
src/pages/tyres/TyreManagementPage.tsx:  // Map TyreStatus enum values (domain) to legacy dashboard string statuses used in TyreDashboard logic
src/pages/tyres/TyreManagementPage.tsx:  // Convert domain Tyre -> legacy TyreDoc expected by TyreDashboard
src/pages/tyres/TyreManagementPage.tsx:    status: t.status, // keep enum value; dashboard just displays it
src/pages/tyres/TyreManagementPage.tsx:              // Re-fetch data
src/pages/tyres/TyreManagementPage.tsx:      {/* Tab Navigation */}
src/pages/tyres/TyreManagementPage.tsx:      {/* Loading and Error States */}
src/pages/tyres/TyreManagementPage.tsx:      {/* Tab Content - Render different components based on active tab */}
src/pages/tyres/TyreManagementPage.tsx:          {/* Dashboard Tab */}
src/pages/tyres/TyreManagementPage.tsx:              {/* Stats Cards */}
src/pages/tyres/TyreManagementPage.tsx:              {/* Render the TyreDashboard component */}
src/pages/tyres/TyreManagementPage.tsx:          {/* Inventory Tab */}
src/pages/tyres/TyreManagementPage.tsx:              {/* Inventory Stats from TyreInventoryStats */}
src/pages/tyres/TyreManagementPage.tsx:              {/* Search and Filter */}
src/pages/tyres/TyreManagementPage.tsx:              {/* Tyres Table */}
src/pages/tyres/TyreManagementPage.tsx:          {/* Analytics Tab */}
src/pages/tyres/TyreManagementPage.tsx:          {/* Reports Tab */}
src/pages/tyres/TyreManagementPage.tsx:                        // Implementation for report generation would go here
src/pages/tyres/TyreManagementPage.tsx:      {/* Add Tyre Modal */}
src/pages/tyres/TyreManagementPage.tsx:            // Check if initialData.purchaseDetails.invoiceNumber is missing, set to empty string
src/pages/tyres/TyreManagementPage.tsx:              // Create a properly typed purchase details object
src/pages/tyres/TyreManagementPage.tsx:          initialData={defaultNewTyre} // Pass the memoized default new tyre data
src/pages/tyres/TyreManagementPage.tsx:      {/* Edit Tyre Modal */}
src/pages/tyres/TyreManagementPage.tsx:          initialData={editTyre} // Pass the selected tyre directly
src/pages/tyres/TyreInventoryDashboard.tsx:  const tyres: TyreRecord[] = uiRecords; // Adapt hook output to existing logic
src/pages/tyres/TyreInventoryDashboard.tsx:  // Derived manufacturer/status/condition filters now from tyres dataset
src/pages/tyres/TyreInventoryDashboard.tsx:  // Legacy mock removed; real-time data via hook
src/pages/tyres/TyreInventoryDashboard.tsx:  // Filter and sort tyres
src/pages/tyres/TyreInventoryDashboard.tsx:  // Toggle sort direction
src/pages/tyres/TyreInventoryDashboard.tsx:  // Calculate summary statistics
src/pages/tyres/TyreInventoryDashboard.tsx:  // Get unique manufacturers for filter dropdown
src/pages/tyres/TyreInventoryDashboard.tsx:  // Generate condition class
src/pages/tyres/TyreInventoryDashboard.tsx:  // Generate status class
src/pages/tyres/TyreInventoryDashboard.tsx:  // Calculate tread percentage
src/pages/tyres/TyreInventoryDashboard.tsx:  // Format numbers
src/pages/tyres/TyreInventoryDashboard.tsx:      {/* Header and Summary Stats */}
src/pages/tyres/TyreInventoryDashboard.tsx:      {/* Summary Cards */}
src/pages/tyres/TyreInventoryDashboard.tsx:      {/* Filters and Search */}
src/pages/tyres/TyreInventoryDashboard.tsx:      {/* Tyre Inventory Table */}
src/pages/tyres/VehicleTyreViewA.tsx:// Local fallback helpers to avoid coupling to data/tyreData
src/pages/tyres/VehicleTyreViewA.tsx:  // Use our hooks to get tyre data
src/pages/tyres/VehicleTyreViewA.tsx:  // Get vehicle tyres based on selected vehicle
src/pages/tyres/VehicleTyreViewA.tsx:  // Filter tyres for this vehicle when selectedVehicle or tyres change
src/pages/tyres/VehicleTyreViewA.tsx:      // Filter tyres for the selected vehicle
src/pages/tyres/VehicleTyreViewA.tsx:  // Get the tyre configuration
src/pages/tyres/VehicleTyreViewA.tsx:          // additional fields left undefined
src/pages/tyres/VehicleTyreViewA.tsx:  // const getTyreAtPosition = (position: string) => {
src/pages/tyres/VehicleTyreViewA.tsx:  //   return getTyreByPosition(selectedVehicle, position);
src/pages/tyres/VehicleTyreViewA.tsx:  // };
src/pages/tyres/VehicleTyreViewA.tsx:          {/* Visual Vehicle Diagram */}
src/pages/tyres/VehicleTyreViewA.tsx:          {/* Tyre Details Panel */}
src/pages/tyres/TyreHistoryPage.tsx:import { db } from "../../firebase"; // <- adjust if your path differs
src/pages/tyres/TyreHistoryPage.tsx:  eventDate: Date; // normalized from Firestore Timestamp
src/pages/tyres/TyreHistoryPage.tsx:// --- Small utilities ---
src/pages/tyres/TyreHistoryPage.tsx:// --- Data hook ---
src/pages/tyres/TyreHistoryPage.tsx:      // not all schemas have eventDate indexed; if missing, remove where and rely on client-side filter
src/pages/tyres/TyreHistoryPage.tsx:      // Prefer: where("eventDate", ">=", since)
src/pages/tyres/TyreHistoryPage.tsx:          // subcollectionPerTyre: Best-effort batch read (no realtime). Adjust if you provide a tyreId prop/page param.
src/pages/tyres/TyreHistoryPage.tsx:// --- UI helpers ---
src/pages/tyres/TyreHistoryPage.tsx:// --- Main page ---
src/pages/tyres/TyreHistoryPage.tsx:  // Filters
src/pages/tyres/TyreHistoryPage.tsx:  // Derived view
src/pages/tyres/TyreHistoryPage.tsx:        // date range filter
src/pages/tyres/TyreHistoryPage.tsx:        // type filter
src/pages/tyres/TyreHistoryPage.tsx:        // text search across key fields
src/pages/tyres/TyreHistoryPage.tsx:  // Pagination
src/pages/tyres/TyreHistoryPage.tsx:    // reset to page 1 on filter change
src/pages/tyres/TyreHistoryPage.tsx:  // CSV export
src/pages/tyres/TyreHistoryPage.tsx:      {/* Header */}
src/pages/tyres/TyreHistoryPage.tsx:      {/* Filters */}
src/pages/tyres/TyreHistoryPage.tsx:        {/* Event type filter row (full width on small screens) */}
src/pages/tyres/TyreHistoryPage.tsx:      {/* Meta */}
src/pages/tyres/TyreHistoryPage.tsx:      {/* Table */}
src/pages/tyres/TyreHistoryPage.tsx:      {/* Pagination controls */}
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreDashboard.tsx:/** ----------------------------------------------------------------
src/pages/tyres/TyreManagementView.tsx:// Import type utilities from the tyreConstants file
src/pages/tyres/TyreManagementView.tsx:// Mock data
src/pages/tyres/TyreManagementView.tsx:  // Inventory form modal state
src/pages/tyres/TyreManagementView.tsx:  // TyreStores modal state
src/pages/tyres/TyreManagementView.tsx:  // Filter tyres based on the selected filters
src/pages/tyres/TyreManagementView.tsx:  // Total values for the inventory
src/pages/tyres/TyreManagementView.tsx:  // Button click handlers
src/pages/tyres/TyreManagementView.tsx:    // Add export functionality here
src/pages/tyres/TyreManagementView.tsx:  // Toggle expanded view for a tyre
src/pages/tyres/TyreManagementView.tsx:  // Handlers for inventory and inspection
src/pages/tyres/TyreManagementView.tsx:  // Get unique brands from the tyre constants
src/pages/tyres/TyreManagementView.tsx:  // Get unique sizes from tyres
src/pages/tyres/TyreManagementView.tsx:    // Support 'ZAR', 'USD', or 'ZAR/USD' for display
src/pages/tyres/TyreManagementView.tsx:    // Format with 2 decimals, thousands separator
src/pages/tyres/TyreManagementView.tsx:      // Show both ZAR and USD (mock conversion, e.g. 1 USD = 18 ZAR)
src/pages/tyres/TyreManagementView.tsx:          {/* Inventory Summary Cards */}
src/pages/tyres/TyreManagementView.tsx:          {/* Filters */}
src/pages/tyres/TyreManagementView.tsx:          {/* Tyre Inventory Table */}
src/pages/tyres/TyreManagementView.tsx:                        {/* Expanded View */}
src/pages/tyres/TyreManagementView.tsx:          {/* VehicleTyreStore Live Entries */}
src/pages/tyres/TyreManagementView.tsx:          {/* Move Modal */}
src/pages/tyres/TyreManagementView.tsx:      {/* Add Tyre Inventory Form Modal */}
src/pages/tyres/TyreManagementView.tsx:      {/* Tyre Inspection Modal */}
src/pages/tyres/TyreReferenceManagerPage.tsx:/**
src/pages/tyres/VehicleTyreView.tsx:// Helper functions needed for this component
src/pages/tyres/VehicleTyreView.tsx:      // Get available positions for this vehicle
src/pages/tyres/VehicleTyreView.tsx:      // Create tyre configuration mapping
src/pages/tyres/VehicleTyreView.tsx:      // Load tyres for this vehicle from Firestore
src/pages/tyres/VehicleTyreView.tsx:  // Helper to determine vehicle type based on fleet number
src/pages/tyres/VehicleTyreView.tsx:  // Get tyre at a specific position
src/pages/tyres/VehicleTyreView.tsx:  // Handle position click
src/pages/tyres/VehicleTyreView.tsx:  // Get status color for tyre position
src/pages/tyres/VehicleTyreView.tsx:              {/* Visual representation of vehicle and tyre positions */}
src/pages/tyres/VehicleTyreView.tsx:                {/* Vehicle type indicator */}
src/pages/tyres/VehicleTyreView.tsx:                {/* Front axle */}
src/pages/tyres/VehicleTyreView.tsx:                {/* Middle axles */}
src/pages/tyres/VehicleTyreView.tsx:                {/* Rear axles */}
src/pages/tyres/VehicleTyreView.tsx:                {/* Legend */}
src/pages/tyres/VehicleTyreView.tsx:      {/* Selected Tyre Details */}
src/pages/tyres/TyreStores.tsx:// Remove Label import as we'll use a simple label element
src/pages/tyres/TyreStores.tsx:  // Filter tyres by the selected store
src/pages/tyres/TyreStores.tsx:  // Calculate statistics for each store
src/pages/tyres/TyreStores.tsx:  // Handle moving a tyre between stores
src/pages/tyres/TyreStores.tsx:    // Implementation would call a function from TyreContext to update the tyre's location
src/pages/tyres/TyreStores.tsx:      {/* Store Location Cards */}
src/pages/tyres/TyreStores.tsx:      {/* Store Inventory List */}
src/pages/tyres/TyreStores.tsx:      {/* Move Tyre Controls */}
src/pages/FleetLocationMapPage.tsx:// Define GeoJSON interfaces
src/pages/FleetLocationMapPage.tsx:// type GeoJSONData = { ... }; // Remove or comment out if not used
src/pages/FleetLocationMapPage.tsx:/**
src/pages/FleetLocationMapPage.tsx:  // Wialon integration
src/pages/FleetLocationMapPage.tsx:  // On mount: auto-login to Wialon if not initializing/logged in
src/pages/FleetLocationMapPage.tsx:  // When Wialon units are available, use them for the map
src/pages/FleetLocationMapPage.tsx:      // Convert Wialon units to Location[]
src/pages/FleetLocationMapPage.tsx:  // Filter vehicles if a specific one is selected
src/pages/FleetLocationMapPage.tsx:        {/* Wialon status */}
src/pages/FleetLocationMapPage.tsx:        {/* Controls */}
src/pages/FleetLocationMapPage.tsx:        {/* Map component */}
src/pages/WialonConfig.tsx:/**
src/pages/WialonConfig.tsx:  // Form state
src/pages/WialonConfig.tsx:    'https://hst-api.wialon.com'
src/pages/WialonConfig.tsx:  // Test connection state
src/pages/WialonConfig.tsx:  // Save settings
src/pages/WialonConfig.tsx:    // Save to localStorage
src/pages/WialonConfig.tsx:    // Show success message
src/pages/WialonConfig.tsx:  // Test connection with proper error typing
src/pages/WialonConfig.tsx:      // Step 1 & 2: Initialize and login using the service class.
src/pages/WialonConfig.tsx:      // Step 3: Fetch units to verify full access
src/pages/WialonConfig.tsx:            placeholder="https://hst-api.wialon.com"
src/pages/WialonConfig.tsx:            href="https://sdk.wialon.com/wiki/en/sidebar/remoteapi/apiref/apiref"
src/pages/analytics/YearToDateKPIs.tsx:// ─── Utilities ───────────────────────────────────────────────────
src/pages/analytics/YearToDateKPIs.tsx:  ipk: number; // Income per KM
src/pages/analytics/YearToDateKPIs.tsx:  operationalCpk: number; // Operational Cost per KM
src/pages/analytics/YearToDateKPIs.tsx:  roe: number; // Return on Equity
src/pages/analytics/YearToDateKPIs.tsx:  roic: number; // Return on Invested Capital
src/pages/analytics/YearToDateKPIs.tsx:  // Use props if provided, otherwise use context
src/pages/analytics/YearToDateKPIs.tsx:  // Current YTD data - updated manually monthly
src/pages/analytics/YearToDateKPIs.tsx:  // Load YTD data from localStorage on component mount
src/pages/analytics/YearToDateKPIs.tsx:  // Save YTD data to localStorage whenever it changes
src/pages/analytics/YearToDateKPIs.tsx:  // Calculate weekly metrics from completed trips
src/pages/analytics/YearToDateKPIs.tsx:      // Use offload dates or endDate as fallback
src/pages/analytics/YearToDateKPIs.tsx:      // Monday of the week (ISO week starts Monday)
src/pages/analytics/YearToDateKPIs.tsx:      // Sunday of the week
src/pages/analytics/YearToDateKPIs.tsx:        return; // Skip this iteration
src/pages/analytics/YearToDateKPIs.tsx:    // Calculate IPK, CPK, and Profit Margin
src/pages/analytics/YearToDateKPIs.tsx:  // Helper: ISO Week Number calculation
src/pages/analytics/YearToDateKPIs.tsx:    // Save to localStorage for persistence
src/pages/analytics/YearToDateKPIs.tsx:    // For operational costs, negative change is good (cost reduction)
src/pages/analytics/YearToDateKPIs.tsx:  // Handler for toggling week expansion
src/pages/analytics/YearToDateKPIs.tsx:  // Map trips to weeks for detailed view
src/pages/analytics/YearToDateKPIs.tsx:      {/* Info Banner */}
src/pages/analytics/YearToDateKPIs.tsx:      {/* KPI Grid */}
src/pages/analytics/YearToDateKPIs.tsx:        {/* Edit buttons for both years */}
src/pages/analytics/YearToDateKPIs.tsx:      {/* Margin & Return Metrics */}
src/pages/analytics/YearToDateKPIs.tsx:      {/* Weekly Revenue Reporting */}
src/pages/analytics/YearToDateKPIs.tsx:      {/* Performance Summary */}
src/pages/analytics/YearToDateKPIs.tsx:            {/* Operational Efficiency */}
src/pages/analytics/YearToDateKPIs.tsx:            {/* Financial Performance */}
src/pages/analytics/YearToDateKPIs.tsx:          {/* Key Insights */}
src/pages/analytics/YearToDateKPIs.tsx:      {/* Edit Modal */}
src/pages/analytics/PerformanceAnalytics.tsx:  // These would be replaced with actual charts in a real implementation
src/pages/analytics/PerformanceAnalytics.tsx:  // For now, using colored bars to simulate charts
src/pages/analytics/PerformanceAnalytics.tsx:      {/* Overall Performance Overview */}
src/pages/analytics/PerformanceAnalytics.tsx:      {/* Driver Performance Comparison */}
src/pages/analytics/PerformanceAnalytics.tsx:          {/* Simulated Bar Chart */}
src/pages/analytics/PerformanceAnalytics.tsx:      {/* Performance Trends */}
src/pages/analytics/PerformanceAnalytics.tsx:        {/* Safety Score Trend */}
src/pages/analytics/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/pages/analytics/PerformanceAnalytics.tsx:        {/* On-Time Delivery Trend */}
src/pages/analytics/PerformanceAnalytics.tsx:            {/* Simulated Line Chart */}
src/pages/analytics/PerformanceAnalytics.tsx:      {/* Performance Metrics Breakdown */}
src/pages/analytics/FleetAnalyticsPage.tsx:/**
src/pages/analytics/FleetAnalyticsPage.tsx:  // When the component mounts, navigate to the dashboard if we're on the base analytics path
src/pages/analytics/FleetAnalyticsPage.tsx:      {/* Outlet for nested routes */}
src/pages/analytics/DashboardPage.tsx:      {/* Analytics Controls */}
src/pages/analytics/DashboardPage.tsx:      {/* Top row with fleet status and ROI */}
src/pages/analytics/DashboardPage.tsx:      {/* Interactive charts row */}
src/pages/analytics/DashboardPage.tsx:// Wrap with Provider
src/pages/dashboard/FormsTestWrapper.tsx:/**
src/pages/dashboard/FormsTestWrapper.tsx:      {/* This will render the child route component */}
src/pages/dashboard/ConsolidatedDashboard.tsx:// Dashboard statistics interface
src/pages/dashboard/ConsolidatedDashboard.tsx:// Recent activity interface
src/pages/dashboard/ConsolidatedDashboard.tsx:// Mock data
src/pages/dashboard/ConsolidatedDashboard.tsx:  // Get icon for activity item
src/pages/dashboard/ConsolidatedDashboard.tsx:  // Get status badge for activity item
src/pages/dashboard/ConsolidatedDashboard.tsx:  // Format date to relative time
src/pages/dashboard/ConsolidatedDashboard.tsx:  // Format number as currency
src/pages/dashboard/ConsolidatedDashboard.tsx:      {/* Quick Stats */}
src/pages/dashboard/ConsolidatedDashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/dashboard/ConsolidatedDashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/dashboard/ConsolidatedDashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/dashboard/ConsolidatedDashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/dashboard/ConsolidatedDashboard.tsx:        {/* Fuel Stats */}
src/pages/dashboard/ConsolidatedDashboard.tsx:        {/* Trip Stats */}
src/pages/dashboard/ConsolidatedDashboard.tsx:        {/* Maintenance Stats */}
src/pages/dashboard/ConsolidatedDashboard.tsx:      {/* Recent Activity */}
src/pages/dashboard/ConsolidatedDashboard.tsx:      {/* Quick Actions */}
src/pages/trips/CompletedTrips.tsx:  // Mock user role - in real app, get from auth context
src/pages/trips/CompletedTrips.tsx:  // Ensure trips is an array before filtering
src/pages/trips/CompletedTrips.tsx:    // In real app, save deletion record to audit log before deleting
src/pages/trips/CompletedTrips.tsx:      {/* Filters */}
src/pages/trips/CompletedTrips.tsx:      {/* Offline warning */}
src/pages/trips/CompletedTrips.tsx:                {/* Edit History Preview */}
src/pages/trips/CompletedTrips.tsx:                    {/* Edit Button - Available for all users */}
src/pages/trips/CompletedTrips.tsx:                    {/* Delete Button - Admin Only */}
src/pages/trips/CompletedTrips.tsx:      {/* Edit Modal */}
src/pages/trips/CompletedTrips.tsx:      {/* Deletion Modal */}
src/pages/trips/FlagsInvestigationsPage.tsx:// Converted to self-contained page: trips now sourced from AppContext instead of props
src/pages/trips/FlagsInvestigationsPage.tsx:  // Defensive: ensure arrays
src/pages/trips/FlagsInvestigationsPage.tsx:      // Check if all flags for the trip are resolved - if yes, mark trip as completed
src/pages/trips/FlagsInvestigationsPage.tsx:      {/* Status Overview */}
src/pages/trips/FlagsInvestigationsPage.tsx:      {/* Filters */}
src/pages/trips/FlagsInvestigationsPage.tsx:      {/* Flagged Costs List */}
src/pages/trips/FlagsInvestigationsPage.tsx:                      {/* Attachments Status */}
src/pages/trips/FlagsInvestigationsPage.tsx:      {/* Flag Resolution Modal */}
src/pages/trips/TripCompletionPanel.tsx:          {/* Completion Checklist */}
src/pages/trips/TripCompletionPanel.tsx:          {/* Proof of Delivery */}
src/pages/trips/TripCompletionPanel.tsx:              accept="image/*,.pdf"
src/pages/trips/TripCompletionPanel.tsx:          {/* End Odometer Reading */}
src/pages/trips/TripCompletionPanel.tsx:          {/* Completion Notes */}
src/pages/trips/TripCompletionPanel.tsx:          {/* Action Buttons */}
src/pages/trips/ActiveTrips.tsx:  unitId?: number; // Add unitId prop
src/pages/trips/ActiveTrips.tsx:// Mock active trips data with cost breakdown
src/pages/trips/ActiveTrips.tsx:  // Narrow currency to the ones supported by formatCurrency helper (USD|ZAR)
src/pages/trips/ActiveTrips.tsx:  // State variables
src/pages/trips/ActiveTrips.tsx:  // Add sensor data hook
src/pages/trips/ActiveTrips.tsx:  // Add WebBook trips hook
src/pages/trips/ActiveTrips.tsx:  // Update state when real data arrives
src/pages/trips/ActiveTrips.tsx:      // Map the fetched trips to the expected format
src/pages/trips/ActiveTrips.tsx:  // Mock function to fetch webhook trips - replace with actual API call
src/pages/trips/ActiveTrips.tsx:      // This is a placeholder - replace with actual API call
src/pages/trips/ActiveTrips.tsx:      // Example: const response = await fetch('/api/webhook-trips');
src/pages/trips/ActiveTrips.tsx:      // const data = await response.json();
src/pages/trips/ActiveTrips.tsx:      // Simulate API response with mock data
src/pages/trips/ActiveTrips.tsx:          cost: 0, // Initial cost is 0, needs to be allocated
src/pages/trips/ActiveTrips.tsx:          cost: 0, // Initial cost is 0, needs to be allocated
src/pages/trips/ActiveTrips.tsx:  // Fetch webhook trips when component mounts
src/pages/trips/ActiveTrips.tsx:  // Combine internal, webhook, and webBook trips
src/pages/trips/ActiveTrips.tsx:    // Auto-calculate total cost
src/pages/trips/ActiveTrips.tsx:    // Determine if the editing trip is from webhook source
src/pages/trips/ActiveTrips.tsx:      // Update webhook trips
src/pages/trips/ActiveTrips.tsx:            lastUpdated: new Date().toISOString(), // Update timestamp
src/pages/trips/ActiveTrips.tsx:      // In a real application, you might want to sync this data with the backend
src/pages/trips/ActiveTrips.tsx:      // Example: await updateTripInAPI(editingTrip.id, editForm);
src/pages/trips/ActiveTrips.tsx:      // Update internal trips
src/pages/trips/ActiveTrips.tsx:            lastUpdated: new Date().toISOString(), // Update timestamp
src/pages/trips/ActiveTrips.tsx:  // File upload handlers
src/pages/trips/ActiveTrips.tsx:        // Create trip object with required fields
src/pages/trips/ActiveTrips.tsx:        // Add cost breakdown if available
src/pages/trips/ActiveTrips.tsx:        // Reset file input
src/pages/trips/ActiveTrips.tsx:  // Function to generate sample CSV for users to download
src/pages/trips/ActiveTrips.tsx:  // Handle clearing error/success messages and refreshing webhook trips
src/pages/trips/ActiveTrips.tsx:  // Handle adding a new trip
src/pages/trips/ActiveTrips.tsx:    // Create a new trip object with the required format
src/pages/trips/ActiveTrips.tsx:    // Add the new trip to the active trips
src/pages/trips/ActiveTrips.tsx:    // Close the modal
src/pages/trips/ActiveTrips.tsx:    // Show success message
src/pages/trips/ActiveTrips.tsx:  // Handle status update modal
src/pages/trips/ActiveTrips.tsx:    // Update the trip status in the appropriate array
src/pages/trips/ActiveTrips.tsx:    // Close modal and show success
src/pages/trips/ActiveTrips.tsx:          {/* File input (hidden) */}
src/pages/trips/ActiveTrips.tsx:          {/* File upload button */}
src/pages/trips/ActiveTrips.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/trips/ActiveTrips.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/trips/ActiveTrips.tsx:          {/* Template download button */}
src/pages/trips/ActiveTrips.tsx:              xmlns="http://www.w3.org/2000/svg"
src/pages/trips/ActiveTrips.tsx:      {/* Error message */}
src/pages/trips/ActiveTrips.tsx:              xmlns="http://www.w3.org/2000/svg"
src/pages/trips/ActiveTrips.tsx:                // Convert WebBookTrip to Trip-like structure if needed
src/pages/trips/ActiveTrips.tsx:      {/* Legacy AddTripModal retained for backward compatibility but not invoked */}
src/pages/trips/ActiveTrips.tsx:      {/* Trip Form Modal for create/edit flow */}
src/pages/trips/ActiveTrips.tsx:      {/* AddTripModal Implementation */}
src/pages/trips/ActiveTrips.tsx:      {/* TripStatusUpdateModal Implementation */}
src/pages/trips/ActiveTrips.tsx:      {/* Cost entry modal */}
src/pages/trips/ActiveTrips.tsx:      {/* System costs modal */}
src/pages/trips/ReportingPanel.tsx:    // In a real app, this would generate and download the reports
src/pages/trips/ReportingPanel.tsx:        {/* Trip Summary */}
src/pages/trips/ReportingPanel.tsx:        {/* Report Selection */}
src/pages/trips/ReportingPanel.tsx:        {/* Quick Stats */}
src/pages/trips/ReportingPanel.tsx:        {/* Cost Breakdown */}
src/pages/trips/ReportingPanel.tsx:        {/* Actions */}
src/pages/trips/TripManager.tsx:// Firestore hooks
src/pages/trips/TripManager.tsx:// Import consolidated view components
src/pages/trips/TripManager.tsx:import CompletedTrips from "./CompletedTrips"; // Using local version
src/pages/trips/TripManager.tsx:// Types
src/pages/trips/TripManager.tsx:/**
src/pages/trips/TripManager.tsx:  // Setup activeTab state based on current URL
src/pages/trips/TripManager.tsx:    // Extract the active tab from the URL path
src/pages/trips/TripManager.tsx:    return "active"; // Default tab
src/pages/trips/TripManager.tsx:  // Firestore data connections
src/pages/trips/TripManager.tsx:    // trips: activeTrips, // Unused but kept for future integration
src/pages/trips/TripManager.tsx:    // trips: completedTrips, // Unused but kept for future integration
src/pages/trips/TripManager.tsx:    // trips: webBookTrips, // Unused but kept for future integration
src/pages/trips/TripManager.tsx:    // activeTrips: activeWebBookTrips, // Unused but kept for future integration
src/pages/trips/TripManager.tsx:  // The following line is kept in comments for future integration
src/pages/trips/TripManager.tsx:  // const allActiveTrips = [...(activeTrips || []), ...(activeWebBookTrips || [])];
src/pages/trips/TripManager.tsx:  // Combined loading and error states
src/pages/trips/TripManager.tsx:  // Update combined loading and error states
src/pages/trips/TripManager.tsx:    // Set loading state based on current tab
src/pages/trips/TripManager.tsx:      calendar: false, // Calendar doesn't need to load Firestore data
src/pages/trips/TripManager.tsx:      "missed-loads": false, // MissedLoads uses manually loaded data
src/pages/trips/TripManager.tsx:    // Combine errors
src/pages/trips/TripManager.tsx:  // Handle tab change
src/pages/trips/TripManager.tsx:    // Update the URL to reflect the selected tab
src/pages/trips/TripManager.tsx:  // Dummy functions for the MissedLoadsTracker
src/pages/trips/TripManager.tsx:    // Implementation would go here
src/pages/trips/TripManager.tsx:    // Implementation would go here
src/pages/trips/TripManager.tsx:    // Implementation would go here
src/pages/trips/TripManager.tsx:              {/* Only pass props that ActiveTrips component accepts */}
src/pages/trips/TripManager.tsx:              {/* CompletedTrips expects trips & onView; currently no data wired, pass empty list & noop */}
src/pages/trips/TripManager.tsx:              {/* TripCalendarPage doesn't have props defined for trip data */}
src/pages/trips/TripManager.tsx:              {/* Only pass props that MissedLoadsTracker component accepts */}
src/pages/trips/SystemCostGenerator.tsx:  distance: number; // in km
src/pages/trips/SystemCostGenerator.tsx:  duration: number; // in hours
src/pages/trips/SystemCostGenerator.tsx:    // Simulate API call or complex calculation
src/pages/trips/SystemCostGenerator.tsx:    // Repair costs (per km)
src/pages/trips/SystemCostGenerator.tsx:    // Tyre costs (per km)
src/pages/trips/SystemCostGenerator.tsx:    // GIT (General Insurance and Tax) - per day
src/pages/trips/SystemCostGenerator.tsx:    // Estimated fuel cost (basic calculation)
src/pages/trips/SystemCostGenerator.tsx:    const estimatedFuelConsumption = trip.distance * 0.35; // 35L/100km average
src/pages/trips/SystemCostGenerator.tsx:    // Driver cost
src/pages/trips/TripReportPage.tsx:  // Placeholder for report data
src/pages/trips/TripReportPage.tsx:      {/* Available Report Types */}
src/pages/trips/TripReportPage.tsx:      {/* Recent Reports */}
src/pages/trips/TripManagementPage.tsx:  const [, setIsSubmitting] = useState(false); // Unused but needed for state updates
src/pages/trips/TripManagementPage.tsx:      // Add trip to Firestore
src/pages/trips/TripManagementPage.tsx:      // Reset success message after 3 seconds
src/pages/trips/TripManagementPage.tsx:      {/* Success message */}
src/pages/trips/TripManagementPage.tsx:      {/* Error message */}
src/pages/trips/TripManagementPage.tsx:      {/* Trip form modal */}
src/pages/trips/MainTripWorkflow.tsx:  // Use configuration for system rates
src/pages/trips/MainTripWorkflow.tsx:  // Get flagged costs for the flag investigation step
src/pages/trips/MainTripWorkflow.tsx:      {/* Progress Indicator */}
src/pages/trips/MainTripWorkflow.tsx:        {/* Progress Bar */}
src/pages/trips/MainTripWorkflow.tsx:        {/* Step Indicators */}
src/pages/trips/MainTripWorkflow.tsx:      {/* Step Content */}
src/pages/trips/MainTripWorkflow.tsx:              /* maybe navigate elsewhere */
src/pages/trips/MainTripWorkflow.tsx:      {/* Navigation Controls */}
src/pages/trips/FleetManagementPage.tsx:  // Get missed loads data and functions from context
src/pages/trips/FleetManagementPage.tsx:  // Update URL when tab changes
src/pages/trips/FleetManagementPage.tsx:            {/* This would be replaced with a proper Fleet Overview component */}
src/pages/trips/LoadPlanningPage.tsx:      {/* Pending Loads */}
src/pages/trips/LoadPlanningPage.tsx:      {/* Available Vehicles */}
src/pages/trips/LoadPlanningPage.tsx:      {/* Load Templates */}
src/pages/trips/IndirectCostBreakdown.tsx:// Component aligned with default export & route expectations
src/pages/trips/TripDashboardPage.tsx:// Mock trips data
src/pages/trips/TripDashboardPage.tsx:    // Here we would add the trip to Firestore
src/pages/trips/TripDashboardPage.tsx:  // Get status badge color
src/pages/trips/ActiveTripsManager.tsx:  // Filters
src/pages/trips/ActiveTripsManager.tsx:  // Modals
src/pages/trips/RoutePlanningPage.tsx:/* eslint-disable @typescript-eslint/no-unused-vars */
src/pages/trips/RoutePlanningPage.tsx:// Google Maps API key
src/pages/trips/RoutePlanningPage.tsx:// Map container styles
src/pages/trips/RoutePlanningPage.tsx:// Map center (default to South Africa)
src/pages/trips/RoutePlanningPage.tsx:// Libraries to load with Google Maps
src/pages/trips/RoutePlanningPage.tsx:  // Navigation handler for back button
src/pages/trips/RoutePlanningPage.tsx:  // --- Core route helpers (defined early to avoid use-before-declare issues) ---
src/pages/trips/RoutePlanningPage.tsx:  // Calculate route using Google Directions Service
src/pages/trips/RoutePlanningPage.tsx:  // Save route to trip
src/pages/trips/RoutePlanningPage.tsx:  // Optimize route
src/pages/trips/RoutePlanningPage.tsx:  // Toggle waypoints visibility
src/pages/trips/RoutePlanningPage.tsx:  // Handler for removing a waypoint
src/pages/trips/RoutePlanningPage.tsx:  // Handler for adding a waypoint
src/pages/trips/RoutePlanningPage.tsx:  // (Wrappers removed; handlers now directly use calculateRoute/saveRoute/handleOptimizeRoute)
src/pages/trips/RoutePlanningPage.tsx:  // Autocomplete references
src/pages/trips/RoutePlanningPage.tsx:  // Removed custom Google Maps loader - using LoadScript component instead
src/pages/trips/RoutePlanningPage.tsx:  // Fetch trip data on component mount
src/pages/trips/RoutePlanningPage.tsx:        // Initialize form with trip route data if available
src/pages/trips/RoutePlanningPage.tsx:        // If the trip has route data, calculate directions
src/pages/trips/RoutePlanningPage.tsx:  // Map load callback
src/pages/trips/RoutePlanningPage.tsx:    // Map initialization code could go here if needed
src/pages/trips/RoutePlanningPage.tsx:  // Add waypoint
src/pages/trips/RoutePlanningPage.tsx:  // Remove waypoint
src/pages/trips/RoutePlanningPage.tsx:  // Update waypoint
src/pages/trips/RoutePlanningPage.tsx:  // (Original calculateRoute/saveRoute/handleOptimizeRoute blocks moved above)
src/pages/trips/RoutePlanningPage.tsx:        {/* Route Planning Form */}
src/pages/trips/RoutePlanningPage.tsx:                        // Add safety check before setting ref
src/pages/trips/RoutePlanningPage.tsx:                        // Add comprehensive safety checks
src/pages/trips/RoutePlanningPage.tsx:                            // Gracefully handle the error without breaking the UI
src/pages/trips/RoutePlanningPage.tsx:                        // Add safety check before setting ref
src/pages/trips/RoutePlanningPage.tsx:                        // Add comprehensive safety checks
src/pages/trips/RoutePlanningPage.tsx:                            // Gracefully handle the error without breaking the UI
src/pages/trips/RoutePlanningPage.tsx:                                // Add safety check before setting ref
src/pages/trips/RoutePlanningPage.tsx:                                // Add comprehensive safety checks
src/pages/trips/RoutePlanningPage.tsx:                                    // Gracefully handle the error without breaking the UI
src/pages/trips/RoutePlanningPage.tsx:        {/* Map Area */}
src/pages/trips/PaymentTrackingPanel.tsx:    // In a real app, this would send an email/SMS reminder
src/pages/trips/PaymentTrackingPanel.tsx:    // In a real app, this would escalate to collections
src/pages/trips/PaymentTrackingPanel.tsx:        {/* Payment Status Overview */}
src/pages/trips/PaymentTrackingPanel.tsx:        {/* Invoice Details */}
src/pages/trips/PaymentTrackingPanel.tsx:            {/* Mark as Paid Section */}
src/pages/trips/PaymentTrackingPanel.tsx:            {/* Follow-up Actions */}
src/pages/trips/CostEntryForm.tsx:  existingCosts?: Omit<CostEntry, "attachments">[]; // For duplicate validation
src/pages/trips/CostEntryForm.tsx:      // Set available subcategories for existing cost
src/pages/trips/CostEntryForm.tsx:      // Set today's date as default for new cost entries
src/pages/trips/CostEntryForm.tsx:        date: new Date().toLocaleDateString('en-CA'), // Returns YYYY-MM-DD format
src/pages/trips/CostEntryForm.tsx:    // Update subcategories when category changes
src/pages/trips/CostEntryForm.tsx:      setFormData((prev) => ({ ...prev, subCategory: "" })); // Reset subcategory
src/pages/trips/CostEntryForm.tsx:    // Prevent manual entry of System Costs
src/pages/trips/CostEntryForm.tsx:    // Document attachment validation - MANDATORY REQUIREMENT
src/pages/trips/CostEntryForm.tsx:    // existing attachments not required in create validation block here (handled on submit)
src/pages/trips/CostEntryForm.tsx:    // Manual flag validation
src/pages/trips/CostEntryForm.tsx:    // Duplicate reference number validation (only for new entries, not editing same cost)
src/pages/trips/CostEntryForm.tsx:      // Determine if item should be flagged
src/pages/trips/CostEntryForm.tsx:      // Auto-flag conditions
src/pages/trips/CostEntryForm.tsx:      const missingDocumentation = !hasDocumentation && formData.noDocumentReason.trim().length > 0; // boolean
src/pages/trips/CostEntryForm.tsx:      // Determine if should be flagged
src/pages/trips/CostEntryForm.tsx:      // Ensure shouldFlag is always a boolean
src/pages/trips/CostEntryForm.tsx:      // Determine flag reason
src/pages/trips/CostEntryForm.tsx:        flaggedBy: shouldFlag ? "Current User" : undefined, // In real app, use actual user
src/pages/trips/CostEntryForm.tsx:      // Pass files to the submit handler
src/pages/trips/CostEntryForm.tsx:      {/* High-Risk Category Warning */}
src/pages/trips/CostEntryForm.tsx:      {/* Structured Cost Category Selection */}
src/pages/trips/CostEntryForm.tsx:      {/* MANDATORY DOCUMENT ATTACHMENT SECTION */}
src/pages/trips/CostEntryForm.tsx:        {/* No Document Reason - Required if no files */}
src/pages/trips/CostEntryForm.tsx:      {/* Manual Flag Section */}
src/pages/trips/CostEntryForm.tsx:      {/* Form Actions */}
src/pages/trips/TripInvoicingPanel.tsx:  // Defensive: always initialize to string, never undefined
src/pages/trips/TripInvoicingPanel.tsx:  // Auto-generate invoice number if empty
src/pages/trips/TripInvoicingPanel.tsx:  // Auto-set due date to 30 days from invoice date
src/pages/trips/TripInvoicingPanel.tsx:                value={invoiceNumber ?? ""} // Defensive: never undefined
src/pages/trips/TripInvoicingPanel.tsx:          {/* Invoice Preview */}
src/pages/trips/TripTimelinePage.tsx:import { firestore as db } from "../../utils/firebaseConnectionHandler"; // Using firestore from connection handler
src/pages/trips/TripTimelinePage.tsx:  group: string; // vehicleId or fleetNo
src/pages/trips/TripTimelinePage.tsx:  const [statusFilters, setStatusFilters] = useState<string[]>([]); // multi-select
src/pages/trips/TripTimelinePage.tsx:  // Computed time values for the timeline
src/pages/trips/TripTimelinePage.tsx:  // Fetch data from Firestore
src/pages/trips/TripTimelinePage.tsx:        // Get trips from Firestore, with proper filtering and ordering
src/pages/trips/TripTimelinePage.tsx:          limit(100) // Limit for performance
src/pages/trips/TripTimelinePage.tsx:        // Process trip documents
src/pages/trips/TripTimelinePage.tsx:        // Extract unique vehicles from trips
src/pages/trips/TripTimelinePage.tsx:        // Create timeline items from trips
src/pages/trips/TripTimelinePage.tsx:          // Use fleetNumber as the group identifier
src/pages/trips/TripTimelinePage.tsx:          // Store vehicle info
src/pages/trips/TripTimelinePage.tsx:          // Parse dates, checking if they're valid
src/pages/trips/TripTimelinePage.tsx:          // Try to parse startDate or startTime
src/pages/trips/TripTimelinePage.tsx:            startTime = Date.now(); // Fallback
src/pages/trips/TripTimelinePage.tsx:          // Try to parse endDate or endTime
src/pages/trips/TripTimelinePage.tsx:            endTime = startTime + 24 * 60 * 60 * 1000; // Default to 1 day duration
src/pages/trips/TripTimelinePage.tsx:          // Format title based on available data
src/pages/trips/TripTimelinePage.tsx:        // Convert vehicle map to array
src/pages/trips/TripTimelinePage.tsx:  // Navigation functions
src/pages/trips/TripTimelinePage.tsx:      // Adjust to full current month
src/pages/trips/TripTimelinePage.tsx:  // Handle item selection
src/pages/trips/TripTimelinePage.tsx:  // Handle time change in timeline
src/pages/trips/TripTimelinePage.tsx:  // Filter trips by type/status
src/pages/trips/TripTimelinePage.tsx:  // Filter vehicles for search and only show vehicles with trips
src/pages/trips/TripTimelinePage.tsx:  // Stats summary
src/pages/trips/TripTimelinePage.tsx:  // Derived list of statuses in filtered trips for dynamic chips
src/pages/trips/TripTimelinePage.tsx:  // Calendar (month grid) data
src/pages/trips/TripTimelinePage.tsx:  // Custom item renderer for trip bars
src/pages/trips/TripTimelinePage.tsx:    // Background style for different trip statuses
src/pages/trips/TripTimelinePage.tsx:    // Base style with background color
src/pages/trips/TripTimelinePage.tsx:  // Helper for toggling single status filter from legend or chip
src/pages/trips/TripTimelinePage.tsx:  // Calendar specific helpers for multi‑day visualization (simple proportional bar)
src/pages/trips/TripTimelinePage.tsx:      {/* Stats + Status Chips */}
src/pages/trips/TripTimelinePage.tsx:            {/* Left side: Timeline controls */}
src/pages/trips/TripTimelinePage.tsx:            {/* Right side: Search and filter */}
src/pages/trips/TripTimelinePage.tsx:          {/* Error display */}
src/pages/trips/TripTimelinePage.tsx:          {/* Timeline Component */}
src/pages/trips/TripTimelinePage.tsx:                  {/* Current time marker */}
src/pages/trips/TripTimelinePage.tsx:          {/* Selected Trip Details */}
src/pages/trips/TripTimelinePage.tsx:          {/* Hover Tooltip */}
src/pages/trips/TripTimelinePage.tsx:          {/* Legend */}
src/pages/trips/TripTimelinePage.tsx:                const active = statusFilters.includes(st) || statusFilters.length === 0; // show as active if not filtered out
src/pages/trips/ActiveTripsPageEnhanced.tsx:import LoadImportModal from "../../components/Models/Trips/LoadImportModal"; // Keep this import
src/pages/trips/ActiveTripsPageEnhanced.tsx:import { CostBreakdown, ImportSource, SupportedCurrency, UITrip } from "../../types/index"; // import
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Define the SelectOption interface
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Removed unused SelectOption interface (was only for removed mock modal)
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Helper functions and constants
src/pages/trips/ActiveTripsPageEnhanced.tsx:const displayCurrency: SupportedCurrency = "USD"; // Default currency
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Retained for potential future use (prefixed with underscore to avoid unused-var lint rule)
src/pages/trips/ActiveTripsPageEnhanced.tsx:// const _formatDate = (dateString: string) =>
src/pages/trips/ActiveTripsPageEnhanced.tsx://   dateString
src/pages/trips/ActiveTripsPageEnhanced.tsx://     ? new Date(dateString).toLocaleDateString("en-US", {
src/pages/trips/ActiveTripsPageEnhanced.tsx://         year: "numeric",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         month: "short",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         day: "numeric",
src/pages/trips/ActiveTripsPageEnhanced.tsx://       })
src/pages/trips/ActiveTripsPageEnhanced.tsx://     : "-";
src/pages/trips/ActiveTripsPageEnhanced.tsx:// const _formatDateTime = (dateTimeString: string) =>
src/pages/trips/ActiveTripsPageEnhanced.tsx://   dateTimeString
src/pages/trips/ActiveTripsPageEnhanced.tsx://     ? new Date(dateTimeString).toLocaleString("en-US", {
src/pages/trips/ActiveTripsPageEnhanced.tsx://         year: "numeric",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         month: "short",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         day: "numeric",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         hour: "2-digit",
src/pages/trips/ActiveTripsPageEnhanced.tsx://         minute: "2-digit",
src/pages/trips/ActiveTripsPageEnhanced.tsx://       })
src/pages/trips/ActiveTripsPageEnhanced.tsx://     : "-";
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Real driver data would come from the AppContext or a custom hook
src/pages/trips/ActiveTripsPageEnhanced.tsx:// No mock data needed here as we'll use the real data from context
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Re-usable UI components (Card, Button, Modal, etc.) would be defined here or imported.
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Removed unused form field components (Input, Select, TextArea) used only by deleted mock modals
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Mock components for modals
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Main Component
src/pages/trips/ActiveTripsPageEnhanced.tsx:    // Legacy properties for backward compatibility
src/pages/trips/ActiveTripsPageEnhanced.tsx:    // UITrip specific properties
src/pages/trips/ActiveTripsPageEnhanced.tsx:    // Remove lastUpdated as it's not part of UITrip interface
src/pages/trips/ActiveTripsPageEnhanced.tsx:        // UITrip specific properties
src/pages/trips/ActiveTripsPageEnhanced.tsx:        // UITrip specific properties
src/pages/trips/ActiveTripsPageEnhanced.tsx:      // Legacy properties for backward compatibility
src/pages/trips/ActiveTripsPageEnhanced.tsx:      // Remove lastUpdated as it's not part of UITrip interface
src/pages/trips/ActiveTripsPageEnhanced.tsx:      {/* Modals */}
src/pages/trips/ActiveTripsPageEnhanced.tsx:      {/* Quick Add Trip Modal */}
src/pages/trips/ActiveTripsPageEnhanced.tsx:// Quick Add Trip Modal Component
src/pages/trips/ActiveTripsPageEnhanced.tsx:    endDate: new Date(Date.now() + 86400000).toISOString().split('T')[0], // Tomorrow
src/pages/trips/ActiveTripsPageEnhanced.tsx:    // Validate required fields
src/pages/trips/TripCalendarPage.tsx:// NOTE: This file is the TripCalendarPage; rename component accordingly to avoid confusion with TripTimelinePage
src/pages/trips/RouteOptimizationPage.tsx:      {/* KPI Cards */}
src/pages/trips/RouteOptimizationPage.tsx:      {/* Routes to Optimize */}
src/pages/trips/CreateLoadConfirmationPage.tsx:    // Check if the field is part of the authorizedBy object
src/pages/trips/TripDetailsPage.tsx:  // State for trip data - use prop trip or fetch from context
src/pages/trips/TripDetailsPage.tsx:    // If no trip prop provided, try to get it from the route parameter
src/pages/trips/TripDetailsPage.tsx:  // Early return if trip data is not available or incomplete
src/pages/trips/TripDetailsPage.tsx:  // Enhanced handleAddCost with file support
src/pages/trips/TripDetailsPage.tsx:      // Show success message with cost details
src/pages/trips/TripDetailsPage.tsx:  // Enhanced handleUpdateCost with file support
src/pages/trips/TripDetailsPage.tsx:        // Process new files if provided
src/pages/trips/TripDetailsPage.tsx:      // Add each system cost entry individually
src/pages/trips/TripDetailsPage.tsx:      // Show detailed success message
src/pages/trips/TripDetailsPage.tsx:          completedBy: "Current User", // In a real app, this would be the logged-in user
src/pages/trips/TripDetailsPage.tsx:  // Handle invoice submission
src/pages/trips/TripDetailsPage.tsx:      // Create proof of delivery attachments
src/pages/trips/TripDetailsPage.tsx:      // Create signed invoice attachments
src/pages/trips/TripDetailsPage.tsx:      // Create attachments from files if provided
src/pages/trips/TripDetailsPage.tsx:        // Update local state
src/pages/trips/TripDetailsPage.tsx:  // Check if system costs have been generated
src/pages/trips/TripDetailsPage.tsx:  // Calculate timeline discrepancies for display
src/pages/trips/TripDetailsPage.tsx:    return diffHours > 1; // More than 1 hour difference
src/pages/trips/TripDetailsPage.tsx:      {/* Header with Navigation and Actions */}
src/pages/trips/TripDetailsPage.tsx:      {/* Status Alerts */}
src/pages/trips/TripDetailsPage.tsx:      {/* Timeline Discrepancy Alert */}
src/pages/trips/TripDetailsPage.tsx:      {/* Auto-completion notification */}
src/pages/trips/TripDetailsPage.tsx:      {/* System Costs Alert */}
src/pages/trips/TripDetailsPage.tsx:      {/* System Costs Summary */}
src/pages/trips/TripDetailsPage.tsx:      {/* Trip Status Alerts */}
src/pages/trips/TripDetailsPage.tsx:      {/* Trip Summary with Enhanced KPIs */}
src/pages/trips/TripDetailsPage.tsx:            {/* Trip Information */}
src/pages/trips/TripDetailsPage.tsx:            {/* Financial Summary */}
src/pages/trips/TripDetailsPage.tsx:            {/* KPIs and Status */}
src/pages/trips/TripDetailsPage.tsx:      {/* Cost Entries Section */}
src/pages/trips/TripDetailsPage.tsx:      {/* Modals */}
src/pages/trips/MissedLoadsTracker.tsx:// ─── React & Utilities ───────────────────────────────────────────
src/pages/trips/MissedLoadsTracker.tsx:// ─── Types & Constants ───────────────────────────────────────────
src/pages/trips/MissedLoadsTracker.tsx:// ─── UI Components ───────────────────────────────────────────────
src/pages/trips/MissedLoadsTracker.tsx:// FIX: Corrected the typo from 'Textarea' to 'TextArea'
src/pages/trips/MissedLoadsTracker.tsx:// ─── Icons ───────────────────────────────────────────────────────
src/pages/trips/MissedLoadsTracker.tsx:// FIX: Added the missing constants 'MISSED_LOAD_REASONS' and 'CLIENTS'
src/pages/trips/MissedLoadsTracker.tsx:// You may need to adjust these values based on your application's data.
src/pages/trips/MissedLoadsTracker.tsx:  missedLoads = [], // Provide default empty array if missedLoads is undefined
src/pages/trips/MissedLoadsTracker.tsx:  // Calculate summary metrics
src/pages/trips/MissedLoadsTracker.tsx:      {/* Header */}
src/pages/trips/MissedLoadsTracker.tsx:      {/* Summary Cards */}
src/pages/trips/MissedLoadsTracker.tsx:      {/* Missed Loads List */}
src/pages/trips/MissedLoadsTracker.tsx:                            // FIX: Added '?' for optional chaining to prevent crashes if 'MISSED_LOAD_REASONS' is not defined
src/pages/trips/MissedLoadsTracker.tsx:      {/* Add/Edit Modal */}
src/pages/trips/MissedLoadsTracker.tsx:              // FIX: Add explicit type annotation to the map function parameter
src/pages/trips/MissedLoadsTracker.tsx:      {/* Resolution Modal */}
src/pages/trips/MissedLoadsTracker.tsx:                    // FIX: Added '?' for optional chaining to prevent crashes if 'MISSED_LOAD_REASONS' is not defined
src/pages/trips/TripFinancialsPanel.tsx:// Define charts and chart options
src/pages/trips/TripFinancialsPanel.tsx:  // Fetch trip and financial data
src/pages/trips/TripFinancialsPanel.tsx:        // Check for existing financial analysis
src/pages/trips/TripFinancialsPanel.tsx:  // Generate financial analysis
src/pages/trips/TripFinancialsPanel.tsx:  // Store chart-related functions and data in a dedicated object
src/pages/trips/TripFinancialsPanel.tsx:  // This approach preserves the chart functionality for future use
src/pages/trips/TripFinancialsPanel.tsx:  // while avoiding unused variable warnings
src/pages/trips/TripFinancialsPanel.tsx:    /**
src/pages/trips/TripFinancialsPanel.tsx:        // Comparison chart data for company vs industry averages
src/pages/trips/TripFinancialsPanel.tsx:    // Future method placeholders for chart rendering
src/pages/trips/TripFinancialsPanel.tsx:      // Will be implemented when charts are added
src/pages/trips/TripFinancialsPanel.tsx:      // Will be implemented when charts are added
src/pages/trips/TripFinancialsPanel.tsx:  // Prepare chart data (will be used in future chart implementation)
src/pages/trips/TripFinancialsPanel.tsx:      // Store the chart data in a ref or context for future use
src/pages/trips/TripFinancialsPanel.tsx:      // This ensures chartUtils is used and prevents unused variable warnings
src/pages/trips/TripFinancialsPanel.tsx:      // Future implementation will use these data objects with chart components
src/pages/trips/TripFinancialsPanel.tsx:          {/* Summary Cards */}
src/pages/trips/TripFinancialsPanel.tsx:            {/* Cost Breakdown */}
src/pages/trips/TripFinancialsPanel.tsx:                  if (key === "totalCosts") return null; // Skip total, displayed elsewhere
src/pages/trips/TripFinancialsPanel.tsx:                  // Format the key for display
src/pages/trips/TripFinancialsPanel.tsx:                  // Calculate percentage of total costs
src/pages/trips/TripFinancialsPanel.tsx:            {/* Per KM Metrics */}
src/pages/trips/TripFinancialsPanel.tsx:              {/* Comparison to Averages */}
src/pages/trips/TripFinancialsPanel.tsx:          {/* Detailed Analysis and Recommendations */}
src/pages/trips/TripFinancialsPanel.tsx:          {/* Recommendations */}
src/pages/trips/TripFinancialsPanel.tsx:      xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:// src/pages/Dashboard.tsx
src/pages/Dashboard.tsx:// Log when Dashboard component is loaded to help debug dynamic import issues
src/pages/Dashboard.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/Dashboard.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/workshop/WorkshopPage.tsx:// UI Components
src/pages/workshop/WorkshopPage.tsx:  // Filter for low stock items
src/pages/workshop/WorkshopPage.tsx:  // Calculate total inventory value
src/pages/workshop/WorkshopPage.tsx:  // Filter for recent purchase orders
src/pages/workshop/WorkshopPage.tsx:  // Workshop modules
src/pages/workshop/WorkshopPage.tsx:      {/* Dashboard Overview Cards */}
src/pages/workshop/WorkshopPage.tsx:      {/* Workshop Modules */}
src/pages/workshop/WorkshopPage.tsx:      {/* Fleet Vehicles */}
src/pages/workshop/WorkshopPage.tsx:      {/* Active Job Cards */}
src/pages/workshop/WorkshopPage.tsx:      {/* Recent Purchase Orders */}
src/pages/workshop/WorkshopPage.tsx:      {/* Low Stock Items */}
src/pages/workshop/WorkshopPage.tsx:      {/* Workshop Integration */}
src/pages/workshop/WorkshopAnalytics.tsx:      {/* Summary KPIs */}
src/pages/workshop/WorkshopAnalytics.tsx:      {/* Charts Section */}
src/pages/workshop/WorkshopAnalytics.tsx:        {/* Job Types Chart */}
src/pages/workshop/WorkshopAnalytics.tsx:        {/* Completion Times Chart */}
src/pages/workshop/WorkshopAnalytics.tsx:        {/* Workshop Productivity */}
src/pages/workshop/WorkshopAnalytics.tsx:        {/* Cost Analysis */}
src/pages/workshop/WorkshopAnalytics.tsx:      {/* Trending Jobs */}
src/pages/workshop/QRGenerator.tsx:  // Positions for parts/tyres
src/pages/workshop/QRGenerator.tsx:  // Load fleet numbers from Firestore
src/pages/workshop/QRGenerator.tsx:          // If no vehicles in database, use sample data
src/pages/workshop/QRGenerator.tsx:        // Fallback to sample data
src/pages/workshop/QRGenerator.tsx:  // Generate QR code
src/pages/workshop/QRGenerator.tsx:  // Reset form
src/pages/workshop/QRGenerator.tsx:  // Handle QR type change
src/pages/workshop/QRGenerator.tsx:  // Validate form before generation
src/pages/workshop/QRGenerator.tsx:  // Download QR code as image
src/pages/workshop/QRGenerator.tsx:    // Create a temporary canvas to generate the PNG
src/pages/workshop/QRGenerator.tsx:    // Create a Blob from SVG data
src/pages/workshop/QRGenerator.tsx:      // Set canvas dimensions to match the QR code
src/pages/workshop/QRGenerator.tsx:      // Draw the image on the canvas
src/pages/workshop/QRGenerator.tsx:        // Create download link
src/pages/workshop/QRGenerator.tsx:        // Clean up
src/pages/workshop/QRGenerator.tsx:          {/* QR Type Selector */}
src/pages/workshop/QRGenerator.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/workshop/QRGenerator.tsx:          {/* Dynamic form based on QR type */}
src/pages/workshop/QRGenerator.tsx:            {/* Fleet number field for vehicle, tyre, inspection and job cards */}
src/pages/workshop/QRGenerator.tsx:            {/* Position field for tyre */}
src/pages/workshop/QRGenerator.tsx:            {/* Part fields */}
src/pages/workshop/QRGenerator.tsx:            {/* Generate Button */}
src/pages/workshop/QRGenerator.tsx:        {/* QR Code Preview */}
src/pages/workshop/JobCardKanbanBoard.tsx:// Mock data for the job cards conforming to the JobCard interface
src/pages/workshop/JobCardKanbanBoard.tsx:  // Function to group job cards by status
src/pages/workshop/JobCardKanbanBoard.tsx:  // Handle drag end (when a card is dropped)
src/pages/workshop/JobCardKanbanBoard.tsx:    // If there's no destination or the card is dropped in the same place
src/pages/workshop/JobCardKanbanBoard.tsx:    // Update the job card status
src/pages/workshop/JobCardKanbanBoard.tsx:    // In a real application, this would update Firestore
src/pages/workshop/JobCardKanbanBoard.tsx:  // Open the job card modal
src/pages/workshop/JobCardKanbanBoard.tsx:          {/* New/Initiated Column */}
src/pages/workshop/JobCardKanbanBoard.tsx:          {/* In Progress Column */}
src/pages/workshop/JobCardKanbanBoard.tsx:          {/* Completed Column */}
src/pages/workshop/JobCardKanbanBoard.tsx:          {/* Invoiced Column */}
src/pages/workshop/JobCardKanbanBoard.tsx:      {/* Job Card Modal */}
src/pages/workshop/StockInventoryPage.tsx:  lastRestocked: string; // explicitly ensure string type
src/pages/workshop/StockInventoryPage.tsx:  // Ensure lastRestocked is always a string
src/pages/workshop/StockInventoryPage.tsx:    lastRestocked: new Date().toISOString().split("T")[0] as string, // yyyy-mm-dd
src/pages/workshop/StockInventoryPage.tsx:      // guarantee string for lastRestocked
src/pages/workshop/StockInventoryPage.tsx:      lastRestocked: item.lastRestocked, // already a string by type
src/pages/workshop/StockInventoryPage.tsx:            // Ensure lastRestocked is a string
src/pages/workshop/StockInventoryPage.tsx:      {/* Header */}
src/pages/workshop/StockInventoryPage.tsx:      {/* Search & Filter */}
src/pages/workshop/StockInventoryPage.tsx:      {/* Stats */}
src/pages/workshop/StockInventoryPage.tsx:      {/* Table */}
src/pages/workshop/StockInventoryPage.tsx:      {/* Add/Edit Form */}
src/pages/workshop/StockInventoryPage.tsx:      {/* Import Modal */}
src/pages/workshop/ReportNewIncidentPage.tsx:/**
src/pages/workshop/ReportNewIncidentPage.tsx:    // In a real app, this would save to Firebase
src/pages/workshop/ReportNewIncidentPage.tsx:    // Show success message
src/pages/workshop/ReportNewIncidentPage.tsx:    // Navigate back to incidents list
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would refresh the job cards data
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would update the status via API
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would refresh the inspections data
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would create a job card from an inspection
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would refresh the work orders data
src/pages/workshop/WorkshopDashboardPage.tsx:              // In a real app, this would update the status via API
src/pages/workshop/InspectionManagement.tsx:    setTimeout(() => setErrorMessage(null), 5000); // Clear error after 5 seconds
src/pages/workshop/InspectionManagement.tsx:                // Refresh logic here
src/pages/workshop/InspectionManagement.tsx:                // New inspection logic here
src/pages/workshop/InspectionManagement.tsx:                        // Create template logic here
src/pages/workshop/PurchaseOrderPage.tsx:/**
src/pages/workshop/PurchaseOrderPage.tsx:  // Sample initial data (in real app, this might come from a PO draft or context)
src/pages/workshop/PurchaseOrderPage.tsx:      // In a real app, this would save to Firestore
src/pages/workshop/PurchaseOrderPage.tsx:      // const db = getFirestore();
src/pages/workshop/PurchaseOrderPage.tsx:      // await addDoc(collection(db, 'purchaseOrders'), data);
src/pages/workshop/PurchaseOrderPage.tsx:      // For demo purposes, we'll just show a success message
src/pages/workshop/PurchaseOrderPage.tsx:      // And redirect after a delay
src/pages/workshop/PurchaseOrderPage.tsx:    // In a real app, this would generate a PDF and either show it or download it
src/pages/workshop/PurchaseOrderPage.tsx:                  xmlns="http://www.w3.org/2000/svg"
src/pages/workshop/WorkOrderManagement.tsx:    // Check if RCA is required
src/pages/workshop/WorkOrderManagement.tsx:    // Check if all tasks are completed
src/pages/workshop/WorkOrderManagement.tsx:          {/* Filters */}
src/pages/workshop/WorkOrderManagement.tsx:          {/* Work Orders List */}
src/pages/workshop/WorkOrderManagement.tsx:      {/* Work Order Detail Modal would go here */}
src/pages/workshop/WorkOrderManagement.tsx:            {/* Work Order detail tabs would go here */}
src/pages/workshop/JobCardManagement.tsx:  // Handler to open the Job Card modal
src/pages/workshop/JobCardManagement.tsx:      {/* Job Card Modal */}
src/pages/workshop/NewJobCardPage.tsx:// Full JobCard type implementation with real-time data
src/pages/workshop/NewJobCardPage.tsx:// Allow tasks to be TaskEntry[] (preferred) but provide conversion for JobCardTask[]
src/pages/workshop/NewJobCardPage.tsx:  woNumber: string; // Alias for workOrderNumber
src/pages/workshop/NewJobCardPage.tsx:  vehicle: string;  // Alias for vehicleId
src/pages/workshop/NewJobCardPage.tsx:  dueDate: string;  // Alias for scheduledDate
src/pages/workshop/NewJobCardPage.tsx:  assigned: string[]; // For backward compatibility
src/pages/workshop/NewJobCardPage.tsx:  tasks: TaskEntry[]; // Use TaskEntry as the primary type
src/pages/workshop/NewJobCardPage.tsx:// Conversion functions between TaskEntry and JobCardTask
src/pages/workshop/NewJobCardPage.tsx:    // Basic identification
src/pages/workshop/NewJobCardPage.tsx:    // Vehicle information
src/pages/workshop/NewJobCardPage.tsx:    // Status and customer info
src/pages/workshop/NewJobCardPage.tsx:    // Dates
src/pages/workshop/NewJobCardPage.tsx:    // Assignment
src/pages/workshop/NewJobCardPage.tsx:    // Tasks and work details
src/pages/workshop/NewJobCardPage.tsx:    // Costs
src/pages/workshop/NewJobCardPage.tsx:    // Notes and meta
src/pages/workshop/NewJobCardPage.tsx:    // Related items
src/pages/workshop/NewJobCardPage.tsx:    // RCA
src/pages/workshop/NewJobCardPage.tsx:    // Optional fields
src/pages/workshop/NewJobCardPage.tsx:  const userName = "John Doe"; // TODO: pull from auth
src/pages/workshop/NewJobCardPage.tsx:  // Modals state
src/pages/workshop/NewJobCardPage.tsx:  // Field updates
src/pages/workshop/NewJobCardPage.tsx:        // If value is a string, convert to JobCardNote[]
src/pages/workshop/NewJobCardPage.tsx:        // If value is array, ensure all are JobCardNote by filtering out non-objects
src/pages/workshop/NewJobCardPage.tsx:  // Parts handlers
src/pages/workshop/NewJobCardPage.tsx:      // In a real app, this would be an API call
src/pages/workshop/NewJobCardPage.tsx:  // Task handlers
src/pages/workshop/NewJobCardPage.tsx:  // TaskEntry-based handlers
src/pages/workshop/NewJobCardPage.tsx:  // Defects -> tasks (open/close handled locally where needed)
src/pages/workshop/NewJobCardPage.tsx:    // Convert defects to TaskEntry
src/pages/workshop/NewJobCardPage.tsx:  // PO modal
src/pages/workshop/NewJobCardPage.tsx:  // Save/Cancel
src/pages/workshop/NewJobCardPage.tsx:    // TODO: integrate with backend
src/pages/workshop/NewJobCardPage.tsx:    // In a real application, this would save both jobCardData and assignedParts to the database
src/pages/workshop/NewJobCardPage.tsx:    // For example: await saveJobCardWithParts(jobCardData, assignedParts);
src/pages/workshop/NewJobCardPage.tsx:  // Calculate the total cost of parts and labor
src/pages/workshop/NewJobCardPage.tsx:    // Sum the cost of all assigned parts
src/pages/workshop/NewJobCardPage.tsx:    // Add labor costs (using a mock value of 10 hours at $75/hour)
src/pages/workshop/NewJobCardPage.tsx:                        // Only add valid JobCardNote objects
src/pages/workshop/NewJobCardPage.tsx:              // Convert TaskEntry[] to JobCardTask[] for legacy TaskManager
src/pages/workshop/NewJobCardPage.tsx:                // Convert updates to TaskEntry shape
src/pages/workshop/NewJobCardPage.tsx:                // Convert JobCardTask to TaskEntry
src/pages/workshop/NewJobCardPage.tsx:              // Convert TaskEntry[] to JobCardTask[] for legacy QAReviewPanel
src/pages/workshop/NewJobCardPage.tsx:              laborHours={10} // Mock value, would come from state in real app
src/pages/workshop/NewJobCardPage.tsx:// Helper to make a sample PO
src/pages/workshop/WorkshopOperations.tsx:// Import all workshop components
src/pages/workshop/VendorPage.tsx:  // Export vendors to CSV
src/pages/workshop/VendorPage.tsx:  // Handle file selection for import
src/pages/workshop/VendorPage.tsx:  // Download CSV template
src/pages/workshop/VendorPage.tsx:  // Handle CSV import
src/pages/workshop/VendorPage.tsx:          // Use the context function to import vendors
src/pages/workshop/VendorPage.tsx:      {/* CSV Import Modal */}
src/pages/workshop/VendorPage.tsx:                    xmlns="http://www.w3.org/2000/svg"
src/pages/workshop/QRScannerPage.tsx:  // Removed unused context
src/pages/workshop/QRScannerPage.tsx:  // Parse return URL from query parameters if it exists
src/pages/workshop/QRScannerPage.tsx:    // Add to scan history (most recent first)
src/pages/workshop/QRScannerPage.tsx:    setScanHistory(prev => [data, ...prev].slice(0, 10)); // Keep only last 10 scans
src/pages/workshop/QRScannerPage.tsx:    // Try to parse as URL or JSON
src/pages/workshop/QRScannerPage.tsx:        // Handle as URL - might be internal link
src/pages/workshop/QRScannerPage.tsx:        // Handle as JSON
src/pages/workshop/QRScannerPage.tsx:        JSON.parse(data); // Just validate it's valid JSON
src/pages/workshop/QRScannerPage.tsx:        // Process based on JSON content
src/pages/workshop/QRScannerPage.tsx:      // Not a URL or JSON, just plain text
src/pages/workshop/QRScannerPage.tsx:        <div className="w-20"></div> {/* Spacer for alignment */}
src/pages/workshop/QRScannerPage.tsx:      {/* Scan History */}
