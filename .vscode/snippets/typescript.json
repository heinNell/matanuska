{
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ $3 }) => {",
      "  return (",
      "    <div className=\"$4\">",
      "      $5",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React functional component with TypeScript and Tailwind"
  },
  "React Hook": {
    "prefix": "hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "export const use${1:HookName} = ($2) => {",
      "  const [${3:state}, set${3/(.*)/${3:/capitalize}/}] = useState$4();",
      "",
      "  useEffect(() => {",
      "    $5",
      "  }, [$6]);",
      "",
      "  return {",
      "    ${3:state},",
      "    set${3/(.*)/${3:/capitalize}/},",
      "    $7",
      "  };",
      "};"
    ],
    "description": "Custom React hook with TypeScript"
  },
  "Firebase Firestore Hook": {
    "prefix": "useFirestore",
    "body": [
      "import { useState, useEffect } from 'react';",
      "import { collection, query, onSnapshot, DocumentData } from 'firebase/firestore';",
      "import { db } from '@/firebase';",
      "",
      "export const use${1:CollectionName} = () => {",
      "  const [${2:data}, set${2/(.*)/${2:/capitalize}/}] = useState<DocumentData[]>([]);",
      "  const [loading, setLoading] = useState(true);",
      "  const [error, setError] = useState<string | null>(null);",
      "",
      "  useEffect(() => {",
      "    const q = query(collection(db, '${3:collectionName}'));",
      "    ",
      "    const unsubscribe = onSnapshot(",
      "      q,",
      "      (snapshot) => {",
      "        const data = snapshot.docs.map(doc => ({",
      "          id: doc.id,",
      "          ...doc.data()",
      "        }));",
      "        set${2/(.*)/${2:/capitalize}/}(data);",
      "        setLoading(false);",
      "      },",
      "      (err) => {",
      "        setError(err.message);",
      "        setLoading(false);",
      "      }",
      "    );",
      "",
      "    return () => unsubscribe();",
      "  }, []);",
      "",
      "  return { ${2:data}, loading, error };",
      "};"
    ],
    "description": "Firestore collection hook with real-time updates"
  },
  "Tailwind Container": {
    "prefix": "container",
    "body": [
      "<div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">",
      "  $1",
      "</div>"
    ],
    "description": "Responsive container with Tailwind CSS"
  },
  "Tailwind Grid": {
    "prefix": "grid",
    "body": [
      "<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">",
      "  $1",
      "</div>"
    ],
    "description": "Responsive grid with Tailwind CSS"
  },
  "Tailwind Button": {
    "prefix": "btn",
    "body": [
      "<button",
      "  className=\"bg-primary-500 hover:bg-primary-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"",
      "  onClick={$1}",
      "  ${2:disabled={false\\}}",
      ">",
      "  $3",
      "</button>"
    ],
    "description": "Styled button with Tailwind CSS"
  },
  "Capacitor Plugin Import": {
    "prefix": "capimport",
    "body": [
      "import { ${1:PluginName} } from '@capacitor/${2:plugin-name}';"
    ],
    "description": "Import Capacitor plugin"
  },
  "React Router Route": {
    "prefix": "route",
    "body": [
      "<Route",
      "  path=\"${1:/path}\"",
      "  element={<${2:ComponentName} />}",
      "/>"
    ],
    "description": "React Router route definition"
  },
  "Context Provider": {
    "prefix": "context",
    "body": [
      "import React, { createContext, useContext, useState, ReactNode } from 'react';",
      "",
      "interface ${1:ContextName}ContextType {",
      "  $2",
      "}",
      "",
      "const ${1:ContextName}Context = createContext<${1:ContextName}ContextType | undefined>(undefined);",
      "",
      "interface ${1:ContextName}ProviderProps {",
      "  children: ReactNode;",
      "}",
      "",
      "export const ${1:ContextName}Provider: React.FC<${1:ContextName}ProviderProps> = ({ children }) => {",
      "  $3",
      "",
      "  const value = {",
      "    $4",
      "  };",
      "",
      "  return (",
      "    <${1:ContextName}Context.Provider value={value}>",
      "      {children}",
      "    </${1:ContextName}Context.Provider>",
      "  );",
      "};",
      "",
      "export const use${1:ContextName} = () => {",
      "  const context = useContext(${1:ContextName}Context);",
      "  if (context === undefined) {",
      "    throw new Error('use${1:ContextName} must be used within a ${1:ContextName}Provider');",
      "  }",
      "  return context;",
      "};"
    ],
    "description": "React Context with TypeScript"
  },
  "Error Boundary": {
    "prefix": "errorboundary",
    "body": [
      "import React, { Component, ErrorInfo, ReactNode } from 'react';",
      "",
      "interface Props {",
      "  children: ReactNode;",
      "}",
      "",
      "interface State {",
      "  hasError: boolean;",
      "  error?: Error;",
      "}",
      "",
      "class ${1:ErrorBoundary} extends Component<Props, State> {",
      "  constructor(props: Props) {",
      "    super(props);",
      "    this.state = { hasError: false };",
      "  }",
      "",
      "  static getDerivedStateFromError(error: Error): State {",
      "    return { hasError: true, error };",
      "  }",
      "",
      "  componentDidCatch(error: Error, errorInfo: ErrorInfo) {",
      "    console.error('Error caught by boundary:', error, errorInfo);",
      "  }",
      "",
      "  render() {",
      "    if (this.state.hasError) {",
      "      return (",
      "        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">",
      "          <div className=\"max-w-md w-full bg-white shadow-lg rounded-lg p-6\">",
      "            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">",
      "              Something went wrong",
      "            </h2>",
      "            <p className=\"text-gray-600 mb-4\">",
      "              We're sorry, but something unexpected happened.",
      "            </p>",
      "            <button",
      "              className=\"w-full bg-primary-500 text-white py-2 px-4 rounded-lg hover:bg-primary-600 transition-colors\"",
      "              onClick={() => window.location.reload()}",
      "            >",
      "              Reload Page",
      "            </button>",
      "          </div>",
      "        </div>",
      "      );",
      "    }",
      "",
      "    return this.props.children;",
      "  }",
      "}",
      "",
      "export default ${1:ErrorBoundary};"
    ],
    "description": "React Error Boundary with TypeScript and Tailwind styling"
  }
}